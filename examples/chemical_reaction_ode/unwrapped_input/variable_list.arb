# Reconstructed list of the variables in arb format:
#--------------------------------------------------------------------------------
# constant variables:
NONE_CONSTANT <c_A_0> [1] "numerical constant rather than an equation" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # initial concentration of <c_A>, set as a constant
NONE_CONSTANT <c_B> [1] "numerical constant rather than an equation" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # for this reaction we assume that the concentration of B is a constant, regardless of the amount of AB that has formed.
NONE_CONSTANT <k_a> [1] "numerical constant rather than an equation" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # constants that are equal to numerical values can appear anywhere within the file
NONE_CONSTANT <k_d> [1] "numerical constant rather than an equation" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # 1.d-1 is the same as 1.e-1 notation, but specifies double precision variables.  Using double precision notation isn't really necessary, but is good practice in my opinion.
NONE_CONSTANT <dt> [1] "numerical constant rather than an equation" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # a constant timestep is implied (in this case, a very large one that produces poor accuracy results)
NONE_CONSTANT <c_1> [1] "<k_a>*<c_A_0>*<c_B>" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # constants can be defined using expressions (of other constants) as well as directly as numerical values.
NONE_CONSTANT <c_2> [1] "<k_a>*<c_B>-<k_d>" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = empty
#--------------------------------------------------------------------------------
# transient variables:
NONE_TRANSIENT <c_AB[r=1]> [1] "0.d0" "<c_AB>" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # to calculate the derivative of AB at each point in time, we'll have to remember the concentration at the previous timestep, so store it in a transient variable that is updated at the start of each timestep.  You can think of transient variables as constants that are evaluated once (at the start of) every timestep.  Hence, computationally they are quite cheap to calculate, and do not depend on the current unknown variables that we are trying to find (if they do refer to unknown or derived variables, then these will be the values from the previous timestep).
NONE_TRANSIENT <t> [1] "0.d0" "<t[r=1]>+<dt>" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # although time (<t>) doesn't appear in the single equation, we want to calculate it for plotting purposes.
NONE_TRANSIENT <t[r=1]> [1] "<t>-<dt>" "<t>" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # and to calculate time, it is necessary to store the time of the previous timestep so that we can use it in the update process for <t>.  Note that any expression, including those for the transient variables, cannot refer to themselves.  Here this is the only reason why we need to store the previous time value, so that we can use it in the update to <t> as given above.
#--------------------------------------------------------------------------------
# newtient variables:
#--------------------------------------------------------------------------------
# unknown variables:
NONE_UNKNOWN <c_AB> [1] "0.d0" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # only one unknown and one equation here.  The expression for this unknown is its initial value (as this is a transient simulation).  Also, <c_AB> needs a characteristic magnitude for the solver to be able to solve it - this can be set by: a) specifying a value (ie magnitude=10.d0); b) allowing the initial value to set the magnitude (which is the default behaviour); or c) using a none centred constant to set the magnitude.  The default behaviour, which is to calculate the value based on the variable's initial value won't work for this simulation as the initial value of this variable is 0, and which gives no indication of how large this variable will become.  Instead here we set the magnitude of <c_AB> to the intial concentration of B which is stored as the none-centred variable <c_B>.
#--------------------------------------------------------------------------------
# derived variables:
NONE_DERIVED <c_A> [1] "<c_A_0>-<c_AB>" # other information: region = empty: deriv = 1: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # using a mass balance <c_A> can be expressed in terms of <c_AB>, so write it as a derived (deriveds are just a way to store commonly used functions of the unknowns).  An alternative for this problem would be to have <c_A> as a second unknown, with a corresponding second equation expressing this mass balance - that is, <c_A>-<c_A_0>-<c_AB> as an equation to solve (ie, make equal to zero)
NONE_DERIVED <r_1> [1] "<k_a>*<c_A>*<c_B>-<k_d>*<c_AB>" # other information: region = empty: deriv = 1: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # this is the net forward rate of the reaction.  All variable types are evaluated as a group, in the order that they are defined.  So, in this file the derived <c_A> would be the first derived to be evaluated, followed by <r_1>.  So, if <r_1> depends on <c_A> (as it does here), its definition must go below that of <c_A>.  Note that each type of variable is evaluated as a separate group - that is, all constants are evaluated as a group, all deriveds are evaluated as a group, all equations are evaluated as a group etc.  So a constant that appears in <r_1> doesn't necessarily have to appear before the expression for <r_1>, as constants are evaluated (as a group) before the deriveds.
#--------------------------------------------------------------------------------
# equation variables:
NONE_EQUATION <c_1 equation> [1] "(<c_AB>-<c_AB[r=1]>)/<dt>-<r_1>" # other information: region = empty: deriv = 1: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # finally, this is the equation to solve.  Note that in this file we have one unknown (<c_AB>) and one equation (this one) - that is the same number of unknowns as equations.  This is the number one rule of performing simulations, that the number of unknowns equals the number of equations.
#--------------------------------------------------------------------------------
# output variables:
NONE_OUTPUT <c_AB_analytical> [1] "<c_1>/<c_2>*( 1.d0 - exp(-<c_2>*<t>) )" # other information: region = empty: deriv = 0: newtstepmax = empty: newtstepmin = empty: filename = chemical_reaction_ode.arb: absfilename = /home/daltonh/fortran/arb/testsuite/arb_master/examples/chemical_reaction_ode/chemical_reaction_ode.arb: comments = # output variables are only evaluated when output files are written, and are handy for expressing simlation results in terms of things that we might be measureing or are interested in.
#--------------------------------------------------------------------------------
# condition variables:
#--------------------------------------------------------------------------------
# local variables:
#--------------------------------------------------------------------------------
