# within this file we calculate the curvature
# as cell centred curvature is calculated from face centred curvature, which is itself averaged from the cell centred curvature, makes sense to NOT smooth these normals (normals.arb) prior to calling this file

# roughly a return of the old method 8
#<<dim1comment>>FACE_LOCAL <vof_phigrad_f[l=1]> "facegrad[l=1](<vof_phi_normal>)" ON <all faces>
#<<dim2comment>>FACE_LOCAL <vof_phigrad_f[l=2]> "facegrad[l=2](<vof_phi_normal>)" ON <all faces>
#<<dim3comment>>FACE_LOCAL <vof_phigrad_f[l=3]> "facegrad[l=3](<vof_phi_normal>)" ON <all faces>
# note, not component directions here!
FACE_LOCAL <vof_phigrad_f[l=1]> "facegrad[l=4](<vof_phi_normal>)" ON <all faces>
FACE_LOCAL <vof_phigrad_f[l=2]> "facegrad[l=5](<vof_phi_normal>)" ON <all faces>
FACE_LOCAL <vof_phigrad_f[l=3]> "facegrad[l=6](<vof_phi_normal>)" ON <all faces>
FACE_LOCAL <vof_phigrad_f_mag> "sqrt(dot(<vof_phigrad_f[l=:]>,<vof_phigrad_f[l=:]>))" ON <all faces>
FACE_DERIVED <vof_phigrad_f_scalar> "faceif(<mask>,facegrad(<vof_phi_normal>)/facemax(<vof_phigrad_f_mag>,<vof_phigrad_tol>),0.d0)" ON <all faces> nooutput

# doing cartesian and cylindrical curvatures separately
# cartesian
<<cartesiancomment>>CELL_LOCAL <vof_kappa_c2> "-celldiv(<vof_phigrad_f_scalar>)" ON <all cells> output
# cylindrical
<<cylindricalcomment>>CELL_LOCAL <vof_kappa_cart_c> "-celldiv(<vof_phigrad_f_scalar>)" ON <all cells>
<<cylindricalcomment>>CELL_LOCAL <vof_kappa_cyl_c> "-<vof_phigrad_unit[l=<<radialdim>>]>/<<radius_c>>" ON <all cells> # won't work on centreline, so instead use twice carteisan curvature there
<<cylindricalcomment>>CELL_DERIVED <vof_kappa_c2> "cellif(<<radius_c>>-1.d-10,<vof_kappa_cart_c>+<vof_kappa_cyl_c>,2.d0*<vof_kappa_cart_c>)" ON <all cells> output

# doing cartesian and cylindrical curvatures using single divergence
#<<cylindricalcomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<<radius_f>>*<vof_phigrad_f_scalar>/faceave[lastcell](<<radius_c>>))" ON <all cells> nooutput,elementdata
#<<cartesiancomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<vof_n_f_scalar>)" ON <all cells> nooutput,elementdata

#FACE_DERIVED <vof_kappa_f> "faceave[adjacentcells](<vof_kappa_c2>)" ON <all faces> output
FACE_DERIVED <vof_kappa_f> "faceave[adjacentcells](<vof_kappa_c2>)" ON <all faces> output
# v0.5 trialling this
#FACE_DERIVED <vof_kappa_f> "faceave(<vof_kappa_c2>)" ON <all faces> output
# v0.5a new interpolation that is weighted towards centre of interface region
#CELL_LOCAL <vof_interface_centre> "cellmax(<vof_phi_normal>*(1.d0-<vof_phi_normal>)*2.d0,0.d0)" ON <all cells>
#FACE_DERIVED <vof_interface_centre_f> "faceave(<vof_interface_centre>)" ON <all faces>
#FACE_DERIVED <vof_kappa_f> "faceif(<vof_interface_centre_f>,faceave(<vof_kappa_c2>*<vof_interface_centre>)/<vof_interface_centre_f>,0.d0)" ON <all faces> output
# cell centred curvature is interpolated from face centred values
CELL_DERIVED <vof_kappa_c> "<vof_kappa_f>" ON <all cells> output,elementdata
# cell centred curvature is taken directly from celldiv - NO
#CELL_DERIVED <vof_kappa_c> "<vof_kappa_c2>" ON <all cells> output,elementdata
