MARKDOWN
Make some vectors to visualise the forces for each phase

These forces are expressed on a per phase volume basis (ie, divided by phi for the phase), and moved to appear on the RHS of the momentum equation.
END_MARKDOWN

REPLACEMENTS D "<<stressmethod>>" W "version2" # as per jackson98 and zhang97, have phi outside of stress divergence, version2 default = zhang97 = jackson98 = balls
REPLACEMENTS D "<<buoyancy>>" W "0" # this will already have been set in buoyancy_dynamic_force as a global replacement
REPLACEMENTS D "<<body_force>>" W "0" # this will already have been set in body_force as a global replacement if it is relevant

# run through each of the dimensions and forces
# at the same time assemble a list of the forces
{{
  my $return_string='';
  my @force_list=(); # for convienience define this at the same time (redefine for each dimension, not efficient, but doesn't matter here)
  for my $l (string_eval('<<dimensions>>','list')) {
    @force_list=(); # clear force list
# viscous
    if (string_test('<<stressmethod>>','version1')) {
# version1 has mu that roughly is proportional to phi
      $return_string .= "CELL_LOCAL <force_vis_<<species>>[l=$l]> '(-celldiv((<<radius_f>>)*(<J_viscous_f_<<species>>[l=$l]>))/(<<radius_c>>))/<phi_bounded_<<species>>>' ON <domain>\n";
    } else {
# version2 has mu that roughly is constant
      $return_string .= "CELL_LOCAL <force_vis_<<species>>[l=$l]> '(-celldiv((<<radius_f>>)*(<J_viscous_f_<<species>>[l=$l]>))/(<<radius_c>>))' ON <domain>\n";
    }
    push(@force_list,'vis');
# advection
    if (string_test('<<navierstokescomment>>','')) {
      $return_string .= "CELL_LOCAL <force_adv_<<species>>[l=$l]> '(-celldiv((<<radius_f>>)*(<J_advection_f_<<species>>[l=$l]>))/(<<radius_c>>))/<phi_bounded_<<species>>>' ON <domain>\n";
      push(@force_list,'adv');
    }
# transient
    if (string_test('<<transientnavierstokescomment>>','')) {
#     $return_string .= "CELL_LOCAL <force_trans_<<species>>[l=$l]> '-(<rho_<<species>>>/<dt>)*(<u_<<species>>[l=$l]>-<phi_bounded_<<species>>[r=1]>*<u_<<species>>[r=1,l=$l]>/<phi_bounded_<<species>>>)' ON <domain>\n";
      $return_string .= "CELL_LOCAL <force_trans_<<species>>[l=$l]> '-(<rho_<<species>>>/<dt>)*(<u_<<species>>[l=$l]>-<phi_pos_<<species>>[r=1]>*<u_<<species>>[r=1,l=$l]>/<phi_bounded_<<species>>>)' ON <domain>\n";
      push(@force_list,'trans');
      $return_string .= "CELL_LOCAL <force_trans_new_<<species>>[l=$l]> '-(<rho_<<species>>>/<dt>)*<u_<<species>>[l=$l]>' ON <domain>\n";
      push(@force_list,'trans_new');
#     $return_string .= "CELL_LOCAL <force_trans_old_<<species>>[l=$l]> '+(<rho_<<species>>>/<dt>)*(<phi_bounded_<<species>>[r=1]>*<u_<<species>>[r=1,l=$l]>/<phi_bounded_<<species>>>)' ON <domain>\n";
      $return_string .= "CELL_LOCAL <force_trans_old_<<species>>[l=$l]> '+(<rho_<<species>>>/<dt>)*(<phi_pos_<<species>>[r=1]>*<u_<<species>>[r=1,l=$l]>/<phi_bounded_<<species>>>)' ON <domain>\n";
      push(@force_list,'trans_old');
    }
# buoyancy
    if (string_eval('<<buoyancy>>')) {
      $return_string .= "CELL_LOCAL <force_grav_<<species>>[l=$l]> '<rho_<<species>>>*<gravity[l=$l]>' ON <domain>\n";
      push(@force_list,'grav');
    }
# body force
    if (string_eval('<<body_force>>')) {
      $return_string .= "CELL_LOCAL <force_body_<<species>>[l=$l]> '<body_force[l=$l]>' ON <domain>\n";
      push(@force_list,'body');
    }
# any extra forces, included in extra_force
    $return_string .= "CELL_LOCAL <force_extra_<<species>>[l=$l]> '<extra_force_<<species>>[l=$l]>' ON <domain>\n";
    push(@force_list,'extra');
# fluid pressure
    $return_string .= "CELL_LOCAL <force_pfluid_<<species>>[l=$l]> '-celldivgrad[l=$l](<p_f_species0>)' ON <domain>\n";
    push(@force_list,'pfluid');
# species pressure
    if (0) {
# output as a single pressure
      if (string_test('<<species>>','species0')) {
        $return_string .= "CELL_LOCAL <force_pspecies_<<species>>[l=$l]> '0.d0' ON <domain>\n";
      } else {
        $return_string .= "CELL_LOCAL <force_pspecies_<<species>>[l=$l]> '-celldivgrad[l=$l](<p_f_<<species>>>)/<phi_bounded_<<species>>>' ON <domain>\n";
      }
      push(@force_list,'pspecies');
    } else {
# output as separate osmotic and sid components
      if (string_test('<<species>>','species0')) {
        $return_string .= "CELL_LOCAL <force_posmotic_<<species>>[l=$l]> '0.d0' ON <domain>\n";
        $return_string .= "CELL_LOCAL <force_psid_<<species>>[l=$l]> '0.d0' ON <domain>\n";
      } else {
        $return_string .= "CELL_LOCAL <force_posmotic_<<species>>[l=$l]> '-celldivgrad[l=$l](<p_osmotic_f_<<species>>>)/<phi_bounded_<<species>>>' ON <domain>\n";
        $return_string .= "CELL_LOCAL <force_psid_<<species>>[l=$l]> '-celldivgrad[l=$l](<p_sid_f_<<species>>>)/<phi_bounded_<<species>>>' ON <domain>\n";
      }
      push(@force_list,'posmotic');
      push(@force_list,'psid');
    }
# drag
    $return_string .= "CELL_LOCAL <force_drag_<<species>>[l=$l]> '0.d0' ON <domain>\n";
    push(@force_list,'drag');
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      if ($species ne string_eval('<<species>>') && ($species eq 'species0' || string_eval('<<species>>') eq 'species0')) {
# for now only include contributions between a disperse phase and the continuous phase
        $return_string .= "CELL_LOCAL <force_drag_<<species>>[l=$l]> '<force_drag_<<species>>[l=$l]>-<beta^_<<species>>_$species>*(<u_<<species>>[l=$l]>-<u_$species"."[l=$l]>)' ON <domain>\n";
      }
    }
# residual or error
    $return_string .= "CELL_LOCAL <force_error_<<species>>[l=$l]> '<momentum_<<species>>[l=$l]>' ON <domain>\n";
    push(@force_list,'error');
  }

# now run through calculating a maximum magnitude for each of the forces, and a maximum of all of these
  $return_string .= "NONE_OUTPUT <force_maximum_magnitude_<<species>>> '0.d0'\n";
  for my $force (@force_list) {
    $return_string .= "NONE_LOCAL <force_$force"."_magnitude_<<species>>> 'cellmax(sqrt(dot(<force_$force"."_<<species>>[l=:]>,<force_$force"."_<<species>>[l=:]>)),region=<domain>)'\n";
    if ($force =~ /^trans_/) { next; }
    $return_string .= "NONE_OUTPUT <force_maximum_magnitude_<<species>>> 'nonemax(<force_$force"."_magnitude_<<species>>>,<force_maximum_magnitude_<<species>>>)'\n";
  }

# now calculate normalised forces
  foreach my $force (@force_list) {
    for my $l (string_eval('<<dimensions>>','list')) {
      $return_string .= "CELL_OUTPUT <forcen_$force"."_<<species>>[l=$l]> '<force_$force"."_<<species>>[l=$l]>/<force_maximum_magnitude_<<species>>>' ON <domain>\n";
    }
  }

# calculate a sum of forces as a check
  if (1) {
    for my $l (string_eval('<<dimensions>>','list')) {
      $return_string .= "CELL_OUTPUT <forcen_sum_<<species>>[l=$l]> '0.d0' ON <domain>\n";
      foreach my $force (@force_list) {
        if ($force =~ /^trans_/) { next; }
        $return_string .= "CELL_OUTPUT <forcen_sum_<<species>>[l=$l]> '<forcen_sum_<<species>>[l=$l]>+(<forcen_$force"."_<<species>>[l=$l]>)'\n";
      }
    }
  }

  return $return_string;
}}
