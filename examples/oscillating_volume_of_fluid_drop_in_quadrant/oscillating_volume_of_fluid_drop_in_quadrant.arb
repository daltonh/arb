# arb finite volume solver
# Copyright 2009,2010 Dalton Harvie (daltonh@unimelb.edu.au)
#
# arb is released under the GNU GPL.  For full details see the license directory.
#
#-------------------------------------------------------------------
# file equations.in
VERSION 0.50

# the following strings describe the simulation and are passed to the output files
INFO_TITLE "Oscillating vof droplet"
INFO_DESCRIPTION "Oscillating 2D droplet calculated using the volume of fluid method in a quadrant"
INFO_DESCRIPTION+ ": Stationary droplet can be calculated using this but with circle instead of ellipse as initial phi"
INFO_DESCRIPTION+ ": now works for cartesian or cylindrical"
INFO_AUTHOR "Dalton Harvie"
INFO_DATE "04/2/15" # interpreted as the last modification date

# for a cylindrical droplet
#GENERAL_REPLACEMENTS R "<<cylindricalcomment>>" W "" R "<<cartesiancomment>>" W "#"
# for a cartesian droplet don't need to change anything from their defaults, just comment out the above, as these two strings are set automatically

# for uniform properties (rho and mu) include the following line
#GENERAL_REPLACEMENTS R "<<uniformcomment>>" W "" R "<<nonuniformcomment>>" W "#"
# or for nonuniform properties (rho and mu) include the following line
GENERAL_REPLACEMENTS R "<<uniformcomment>>" W "#" R "<<nonuniformcomment>>" W ""

# for a single mesh domain (all on the fluid mesh) include the following
GENERAL_REPLACEMENTS R "<<singledomaincomment>>" W "" R "<<doubledomaincomment>>" W "#"
# for a double mesh domain everything except the curvature calculation (and its dependent smoothed phi and normals) is done on the fluid domain, and the rest on the free surface domain which is coincident and larger
#GENERAL_REPLACEMENTS R "<<singledomaincomment>>" W "#" R "<<doubledomaincomment>>" W ""

<<cartesiancomment>>INFO_DESCRIPTION+ ": cartesian 2D droplet"
<<cylindricalcomment>>INFO_DESCRIPTION+ ": cylindrical droplet"
<<uniformcomment>>INFO_DESCRIPTION+ ": uniform properties (rho and mu)"
<<nonuniformcomment>>INFO_DESCRIPTION+ ": nonuniform properties (rho and mu)"
<<singledomaincomment>>INFO_DESCRIPTION+ ": done on a single domain"
<<doubledomaincomment>>INFO_DESCRIPTION+ ": done on a double (fluid + free surface) domain"

#-------------------------------------------------------------------
# MSH_FILE instructs arb to read or write a gmsh file (location is read location - write location will always be within the output directory)
# output options are: output,centringoutput,meshoutput,centringmeshoutput,nooutput
# input options are: input,centringinput,meshinput,centringmeshinput,noinput
# data output format options for CELL centred data (which overwrite individual variable options if specified): elementdata,elementnodedata,elementnodelimiteddata
# vtk file output options are: vtkoutput,centringvtkoutput,meshvtkoutput,centringmeshvtkoutput,novtkoutput (novtkoutput is the default)
# dat file output options are: dat_output,centringdat_output,meshdat_output,centringmeshdat_output,nodat_output (nodat_output is the default)
MSH_FILE "free_surface_quadrant_extruded_structured_fluid.msh" nooutput
<<doubledomaincomment>>MSH_FILE "free_surface_quadrant_extruded_structured_free_surface.msh" nooutput
#MSH_FILE "output/latest.output.msh" input

#-------------------------------------------------------------------
# geometry stuff

GLUE_FACES <fluid west> reflect=1
<<doubledomaincomment>>GLUE_FACES <free surface west> reflect=1
<<doubledomaincomment>>GLUE_FACES <free surface centre west> reflect=1
GLUE_FACES <fluid south> reflect=2
<<doubledomaincomment>>GLUE_FACES <free surface south> reflect=2
<<doubledomaincomment>>GLUE_FACES <free surface centre south> reflect=2

# CELL_REGION/FACE_REGION specified by: <name> "location string" # comments
# where location string could be: "AT x1 x2 x3" for a single point closest to these coordinates
# where location string could be: "WITHIN BOX x1_min x2_min x3_min x1_max x2_max x3_max" for all elements within a box defined by the minimum and maximum coordinate values
# where location string could be: "COMPOUND +<a region>-<another region>" for a + and - compound region list
# where location string could be: "BOUNDARY OF <a region>" - boundary faces/cells contained within or surrounding <a region>
# where location string could be: "DOMAIN OF <a region>" - domain faces/cells contained within <a region>
# where location string could be: "ASSOCIATED WITH <a region>" - faces/cells both contained within and surrounding <a region>
# where location string could be: "SURROUNDS <a region>" - faces/cells that surround <a region>, irrespective of whether they are boundary or domain elements - right now only works when <a region> is cell centred

#-------------------------------------------------------------------
# numerical options
NEWTSTEPMAX 100
NEWTSTEPDEBUGOUT 90
# for test simulation just do a few timesteps
TIMESTEPOUT 2
TIMESTEPMAX 4 # just compute the first 5 timesteps for this trial simulation

#KERNEL_OPTIONS polynomialorder=2,polynomialaverageorder=2
#-------------------------------------------------------------------

INCLUDE_ROOT "free_surface/volume_of_fluid"
# commands to form the single mesh regions from the fluid msh file
<<singledomaincomment>>INCLUDE "single_region_formation"
# commands to form the double mesh regions from both the fluid and free surface msh files
# also do general region name replacements
<<doubledomaincomment>>INCLUDE "double_region_formation"

# commands to replace all generic regions with fluid msh equivalents
<<doubledomaincomment>>INCLUDE "fluid_replacements"

# setup basic cylindrical general replacements by including the following two lines
<<cylindricalcomment>>INCLUDE_ROOT "general"
<<cylindricalcomment>>INCLUDE "cylindrical_reflect_r1z2"
# these statements only necessary in cartesian as already included in above files, but GENERAL_REPLACEMENT statements can't be commented out by other strings, so just repeat them
GENERAL_REPLACEMENTS REPLACE "<<dim3comment>>" WITH "#" # comment out any references to the third dimension in any included files
GENERAL_REPLACEMENTS REPLACE "<<reflect=1>>" WITH "reflect=1"
# include this for both cylindrical and cartesian when using a quadrant
GENERAL_REPLACEMENTS REPLACE "<<reflect=2>>" WITH "reflect=2"

# bring in default physical and numerical constants
INCLUDE_ROOT "navier_stokes"
INCLUDE "nondimensional_constants"

# v0.50 - now use transient setup files
INCLUDE "transient_dynamic_setup" # a dynamic timestep to keep the CFL number at a specified level
#INCLUDE "transient_implicit_setup" # a dynamic timestep to keep the CFL number at a specified level
#INCLUDE "transient_constant_setup" # a constant timestep

# overwrite some transient specifications
CONSTANT <t_end> [] 1.d2 # time for simulation to stop
CONSTANT <dt_initial> [] "1.d-4*<celldxave>" # initial timestep based on cell dimension, expecting a velocity of magnitude around 1
CONSTANT <dt_out> [] "<t_end>/50.d0" # time between output

# include the following to also include an explicit surface tension based timestep - just a placeholder, not debugged
#CONSTANT <dt_surf> "0.5d0*sqrt(0.5d0*<We>*<celldxave>^3/<pi>)"
#NONE_TRANSIENT <dt[r=0]> "<dt_initial>" "nonemax(nonemin(nonemin(<dt_increase>,<CFL_max>/nonemax(<CFL[r=1]>,<tiny>))*<dt[r=1]>,<dt_max>),<dt_min>)" stepoutput,input

<<nonuniformcomment>>INCLUDE "nonuniform_properties" # this just cancels the previous general property replacements on <mu_f> and <rho_f>
INCLUDE_ROOT "volume_of_fluid"
INCLUDE "nondimensional_constants"
# calculate the mac2 cartesian vof velocity errors for reference (http://dx.doi.org/10.1016/j.apm.2005.08.015)
<<uniformcomment>>INCLUDE "parasitic_mac2_correlation"
<<nonuniformcomment>>INCLUDE "parasitic_nonuniform_properties_mac2_correlation"
# for nonuniform properties, define them
<<nonuniformcomment>>INCLUDE "nondimensional_nonuniform_properties"

# physical data, now for nondimensional uniform properties
# set these
#CONSTANT <Re> 1.d+2
CONSTANT <Re> 1.d+2
CONSTANT <S> 1.d+1 # surface tension strength nondimensional number, see harvie 2004, applied mathematical modelling (http://dx.doi.org/10.1016/j.apm.2005.08.015)
# for nonuniform properties, express as a ratio between the disperse phase and the continuous phase (which is used as the properties scale)
<<nonuniformcomment>>CONSTANT <vof_rho_d_ratio> 1.d+1 # dimensional <rho_d>/<rho_c>
<<nonuniformcomment>>CONSTANT <vof_mu_d_ratio> 1.d+1 # dimensional <mu_d>/<mu_c>

CELL_UNKNOWN <p> [] "(2.d0^<<cylindricalflag>>)*<vof_phi>/<We>" ON <all cells> elementdata # pressure
CELL_UNKNOWN <u[l=1]> [] "0.d0" ON <all cells> magnitude=1.d0 # velocity component
CELL_UNKNOWN <u[l=2]> [] "0.d0" ON <all cells> magnitude=1.d0 # velocity component

# CSF based levelset formulation with reinitialisation
INCLUDE_ROOT "volume_of_fluid"
INCLUDE "setup"

# define real initial vof
NONE_CONSTANT <vof_phi_initial_tol> 1.d-4 # accuracy in computing initial shapes (in terms of volume fraction per cell)
# circle (cylinder/sphere)
CONSTANT <radius1> 1.0d0
CELL_CONSTANT <vof_phi_initial_saved> "cellvofphishape[sphere](size[l=1]=2.d0*<radius1>,centre[l=1]=0.d0,centre[l=2]=0.d0,phitol=<vof_phi_initial_tol>)" ON <all cells> output,elementdata
# ellipse
#CONSTANT <radius_a> 0.9d0
#CONSTANT <radius_b> 1.1d0
#CELL_CONSTANT <vof_phi_initial_saved> "cellvofphishape[ellipsoid](size[l=1]=2.d0*<radius_a>,size[l=2]=2.d0*<radius_b>,centre[l=1]=0.d0,centre[l=2]=0.d0,phitol=<vof_phi_initial_tol>)" ON <all cells> output,elementdata
CELL_LOCAL <vof_phi_initial> "<vof_phi_initial_saved>" ON <all cells>

# the following curvature and related cell centred unit normal and smooth phi calculations are done on the free surface mesh
<<doubledomaincomment>>INCLUDE "cancel_fluid_replacements"
<<doubledomaincomment>>INCLUDE "link_double_domain_variables" # NB, has to be done while no region replacements are active, so do it here but as only involves locals could go in other places (start of file eg)
<<doubledomaincomment>>INCLUDE "free_surface_replacements"

# calculate the interface curvature, using a 2D expansion of the unit normals
#INCLUDE "interface_geometry_2D"
# for 3D include the following which expands the unit normals using their components:
#INCLUDE "interface_geometry"
# now by solving separate level-set-like field to calculate the normals
INCLUDE "clsvof_interface_geometry"

# and now move back to the fluid mesh
<<doubledomaincomment>>INCLUDE "cancel_free_surface_replacements"
<<doubledomaincomment>>INCLUDE "fluid_replacements"

INCLUDE "force" # force done back on the fluid mesh

# calculate <u_f> using rhie-chow type interpolation, including a contribution from the surface tension force term
INCLUDE_ROOT "navier_stokes"
# nonuniform
<<nonuniformcomment>>INCLUDE "total_stress" R "<mu_f>" W "<vof_mu_harmonic_f>"
<<nonuniformcomment>>INCLUDE "advection_flux" R "<rho_f>" W "<vof_rho_f>" R "<mu_f>" W "<vof_mu_f>"
# uniform
<<uniformcomment>>INCLUDE "total_stress"
<<uniformcomment>>INCLUDE "advection_flux"

INCLUDE_ROOT "volume_of_fluid"
INCLUDE "p_error"
INCLUDE "equation" # all phi advection done on fluid mesh

INCLUDE_ROOT "navier_stokes"
# nonuniform
<<nonuniformcomment>>INCLUDE "momentum_flux_transient_constant_rho" R "<rho>" W "<vof_rho_advection_f[r=1]>"
<<nonuniformcomment>>INCLUDE "conservation_incompressible_transient_varying_rho" R "<rho>" W "<vof_rho_c>" R "<rho[r=1]>" W "<vof_rho_c[r=1]>" R "<mu>" W "<vof_mu_c>"
# uniform
<<uniformcomment>>INCLUDE "momentum_flux_transient_constant_rho"
<<uniformcomment>>INCLUDE "conservation_incompressible_transient_constant_rho"

#CELL_DERIVED <vof_phi_adjust[r=1]> "0.d0"

# fluid boundary conditions on nonslip walls
INCLUDE_ROOT "volume_of_fluid"
INCLUDE "walls_nonwetting" # NB: BC applied on fluid walls
INCLUDE_ROOT "navier_stokes"
INCLUDE "walls_p_set"

#-------------------------------------------------------------------
<<cartesiancomment>>NONE_OUTPUT <integrated volume> "cellsum(<vof_phi>*<cellvol>,<domain>)"
<<cylindricalcomment>>NONE_OUTPUT <integrated volume> "cellsum(<vof_phi>*<<radius_c>>*<cellvol>,<domain>)"

NONE_OUTPUT <centroid[l=1]> "cellsum(<cellvol>*<cellx[l=1]>*<vof_phi>,region=<domain>)/cellsum(<cellvol>*<vof_phi>,region=<domain>)"
NONE_OUTPUT <centroid[l=2]> "cellsum(<cellvol>*<cellx[l=2]>*<vof_phi>,region=<domain>)/cellsum(<cellvol>*<vof_phi>,region=<domain>)"
NONE_OUTPUT <stretch[l=1]> "sqrt(cellsum(<cellvol>*(<cellx[l=1]>-<centroid[l=1]>)^2*<vof_phi>,region=<domain>)/cellsum(<cellvol>*<vof_phi>,region=<domain>))"
NONE_OUTPUT <stretch[l=2]> "sqrt(cellsum(<cellvol>*(<cellx[l=2]>-<centroid[l=2]>)^2*<vof_phi>,region=<domain>)/cellsum(<cellvol>*<vof_phi>,region=<domain>))"

FACE_OUTPUT <u_f_vector[l=1,r=1]> "<u_f[r=1]>*<facenorm[l=1]>" ON <all faces>
FACE_OUTPUT <u_f_vector[l=2,r=1]> "<u_f[r=1]>*<facenorm[l=2]>" ON <all faces>
FACE_OUTPUT <u_f_vector[l=1,r=0]> "<u_f[r=0]>*<facenorm[l=1]>" ON <all faces>
FACE_OUTPUT <u_f_vector[l=2,r=0]> "<u_f[r=0]>*<facenorm[l=2]>" ON <all faces>

NONE_OUTPUT <u_f_max> "facemax(abs(<u_f>),region=<all faces>)"
NONE_OUTPUT <phi error> "sqrt(cellsum((<vof_phi>-<vof_phi_initial_saved>)**2*<cellvol>,region=<domain>)/cellsum(<cellvol>,region=<domain>))"

NONE_OUTPUT <vof_phi_max domain> "cellmax(<vof_phi>,region=<domain>)"
NONE_OUTPUT <vof_phi_min domain> "cellmin(<vof_phi>,region=<domain>)"
NONE_OUTPUT <vof_phi_max all cells> "cellmax(<vof_phi>,region=<all cells>)"
NONE_OUTPUT <vof_phi_min all cells> "cellmin(<vof_phi>,region=<all cells>)"
NONE_OUTPUT <vof_phi_adjust_max> "cellmax(<vof_phi_adjust[r=1]>,region=<all cells>)"
NONE_OUTPUT <vof_phi_adjust_min> "cellmin(<vof_phi_adjust[r=1]>,region=<all cells>)"
NONE_OUTPUT <vof_phi_error domain> "nonemax(abs(<vof_phi_max domain>-1.d0),abs(<vof_phi_min domain>))"
NONE_OUTPUT <vof_phi_error all cells> "nonemax(abs(<vof_phi_max all cells>-1.d0),abs(<vof_phi_min all cells>))"

# save maximum and minimum velocities for t > t_save say
NONE_CONSTANT <t_save> 20.d0
NONE_LOCAL <u_f_max_local> "facemax(abs(<u_f>),region=<all faces>)"
NONE_TRANSIENT <u_f_max_max> "0.d0" "noneif(<t>-<t_save>,nonemax(<u_f_max_local>,<u_f_max_max[r=1]>),<u_f_max_max[r=1]>)" output
NONE_TRANSIENT <u_f_max_max[r=1]> "" "<u_f_max_max>"
NONE_TRANSIENT <u_f_max_min> "1.d2" "noneif(<t>-<t_save>,nonemin(<u_f_max_local>,<u_f_max_min[r=1]>),<u_f_max_min[r=1]>)" output
NONE_TRANSIENT <u_f_max_min[r=1]> "" "<u_f_max_min>"

#-------------------------------------------------------------------
# specify outputs for some variables

VARIABLE <vof_F_c[l=1]> output
<<doubledomaincomment>>VARIABLE <vof_fs_phigrad_unit[l=1]> output

# nonuniform
<<nonuniformcomment>>VARIABLE <vof_rho_advection_f[r=1]> output
<<nonuniformcomment>>VARIABLE <vof_rho_c[r=1]> output
<<nonuniformcomment>>VARIABLE <vof_rho_c[r=0]> output
<<nonuniformcomment>>VARIABLE <vof_rho_f> output
<<nonuniformcomment>>VARIABLE <vof_mu_f> output

# by default surface tension changes are turned off after 20 newtsteps (via <vof_phi_interface>), delta function and properties after 30 newtsteps (via <vof_phi_lim>) and <vof_phi_adjust[r=1]> changes after 50
#VARIABLE <vof_phi_adjust[r=1]> newtstepmax=30
#VARIABLE <vof_phi_interface> newtstepmax=50
#VARIABLE <vof_phi_lim> newtstepmax=40
#-------------------------------------------------------------------
