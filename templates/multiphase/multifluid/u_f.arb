MARKDOWN
Here we setup the face flux velocity u_f for each phase, using the navier_stokes template file
END_MARKDOWN

# do the whole u_f thing, including defining the dynamic pressures, etc
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
# now use suffix notation, and include <u_f_vect_magnitude[r=1]>
    $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/u_f' ".
      "SUFFIX '<u[l=1]>' W '_$species' ".
      "SUFFIX '<ugrad_f[l=1]>' W '_$species' ".
      "SUFFIX '<u_f_vect[l=1]>' W '_$species' ".
      "SUFFIX '<mu_f>' W '_$species' ".
      "SUFFIX '<u_f_alpha_{vis}>' W '_$species' ".
      "SUFFIX '<u_f_alpha_{transient}>' W '_$species' ".
      "SUFFIX '<u_f_alpha_{adv}>' W '_$species' ".
      "SUFFIX '<u_f_{raw}>' W '_$species' ".
      "SUFFIX '<u_f_{raw}_magnitude>' W '_$species' ".
      "SUFFIX '<u_f_{correction}>' W '_$species' ".
      "SUFFIX '<u_f_{correction}[r=1]>' W '_$species' ".
      "SUFFIX '<u_f>' W '_$species' ".
      "SUFFIX '<u_f_vect_magnitude>' W '_$species' ".
      "SUFFIX '<u_f_vect_magnitude[r=1]>' W '_$species' ".
      "R '<rho_f>' W '<rho_$species>' ".
      "SUFFIX '<eps_p>' W '_$species' ".
      "SUFFIX '<dynamic_force_f_{correction}>' W '_$species' ".
      "SUFFIX '<dynamic_force_c_f[l=1]>' W '_$species' ".
      "SUFFIX '<dynamic_force_c[l=1]>' W '_$species' ".
      "SUFFIX '<dynamic_force_f>' W '_$species' ".
      "SUFFIX '<p>' W '_species0' ".
      "SUFFIX '<p_f>' W '_species0'\n";
#   $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/u_f' ".
#     "R '<u[' W '<u_$species"."[' ".
#     "R '<ugrad_f[' W '<ugrad_f_$species"."[' ".
#     "R '<u_f_vect[' W '<u_f_vect_$species"."[' ".
#     "R '<mu_f>' W '<mu_f_$species>' ".
#     "R '<u_f_alpha_{vis}>' W '<u_f_alpha_{vis}_$species>' ".
#     "R '<u_f_alpha_{transient}>' W '<u_f_alpha_{transient}_$species>' ".
#     "R '<u_f_alpha_{adv}>' W '<u_f_alpha_{adv}_$species>' ".
#     "R '<u_f_{raw}>' W '<u_f_{raw}_$species>' ".
#     "R '<u_f_{raw}_magnitude>' W '<u_f_{raw}_magnitude_$species>' ".
#     "R '<u_f_{correction}>' W '<u_f_{correction}_$species>' ".
#     "R '<u_f_{correction}[r=1]>' W '<u_f_{correction}_$species"."[r=1]>' ".
#     "R '<u_f>' W '<u_f_$species>' ".
#     "R '<rho_f>' W '<rho_$species>' ".
#     "R '<eps_p>' W '<eps_p_$species>' ".
#     "R '<dynamic_force_f_{correction}>' W '<dynamic_force_f_{correction}_$species>' ".
#     "R '<dynamic_force_c_f[' W '<dynamic_force_c_f_$species"."[' ".
#     "R '<dynamic_force_c[' W '<dynamic_force_c_$species"."[' ".
#     "R '<dynamic_force_f>' W '<dynamic_force_f_$species>' ".
#     "R '<p>' W '<p_species0>' ".
#     "R '<p_f>' W '<p_f_species0>'\n";
# redefine the viscosity u_f_alpha, recognising that the correction is in terms of phiu, rather than u
#   $return_string .= "VARIABLE <u_f_alpha_{vis}_$species> '<mu_f_$species>/(<facedx>^2*<phi_f_lim_$species>)'\n";
    $return_string .= "VARIABLE <u_f_alpha_{vis}_$species> '<mu_f_multiplier_$species>/(<facedx>^2)'\n";
  }
  return $return_string;
}}

# add on osmotic pressure contribution to dynamic force for the disperse species
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
    $return_string .= "INCLUDE_LOCAL 'single_species_dynamic_force' R '<<species>>' W '$species'\n";
  }
  return $return_string;
}}

GLOBAL_REPLACEMENTS D '<<ufmethod>>' W '0'

IF <<mixtureuf>>

  INCLUDE "mixture_u_f"

ELSE # species aware fancier method, with species0 having to be done first
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_LOCAL 'single_species_u_f' R '<<species>>' W '$species'\n";
    }
    return $return_string;
  }}

END_IF
