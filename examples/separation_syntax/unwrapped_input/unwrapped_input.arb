# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: src/free_surface_functions.f90
EXTERNALS "src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: separation_syntax.arb
#INCLUDE_WORKING "separation_syntax.arb"
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# the following is INCLUDED from ../separation_syntax.arb without any search/replace combinations
VERSION 0.42
#-------------------------------------------------------------------
# user-defined constants

#KERNEL_OPTIONS polynomialorder=2,polynomialaverageorder=2,polynomialcellorder=2

# setup basic cylindrical general replacements
#INCLUDE_ROOT "general"
#INCLUDE "cylindrical_reflect_r1z2"
# or, setup basic cartesian reflect general replacements
#GENERAL_REPLACEMENTS REPLACE "<<dim3comment>>" WITH "#" # comment out any references to the third dimension in any included files
#GENERAL_REPLACEMENTS REPLACE "<<reflect=1>>" WITH "reflect=1" # as the centreline is horizontal need to include reflect=2 when differentiating l=2 vector components
#GENERAL_REPLACEMENTS REPLACE "<<reflect=2>>" WITH "reflect=2" # as the centreline is horizontal need to include reflect=2 when differentiating l=2 vector components

MSH_FILE "quadrant.msh"
GLUE_FACES <west> reflect=1
GLUE_FACES <south> reflect=2
#GLUE_FACES <south> <north>

CONSTANT <radius_a> 0.6d0
CONSTANT <radius_b> 0.4d0
CELL_LOCAL <ls_initial> "1.d0 - sqrt((<cellx[l=1]>/<radius_a>)^2+(<cellx[l=2]>/<radius_b>)^2)"
# for reference a phi can be calculated from ls using a sinusoidal heaviside function
CELL_LOCAL <ls_initial_normalised> "<ls_initial>/<facedx>"
CONSTANT <ls_phi_max> 4.0d0
CELL_CONSTANT <vof_phi_initial1> "cellif(abs(<ls_initial_normalised>)-<ls_phi_max>,cellif(<ls_initial>,1.d0,0.d0),(sin(<ls_initial_normalised>*<pi>/(2.d0*<ls_phi_max>))+1.d0)/2.d0)" ON <all cells> output
CELL_CONSTANT <vof_phi> "<vof_phi_initial1>" ON <all cells> output

# separation notation for cellsum
# separation, minseparation and minimumseparation are equivalent, with default value of -1 meaning do not loop in increasing order of separation
# maxseparation and maximumseparation are equivalent, with default value of -1, meaning no limit
# if maxseparation >= 0, then minseparation will be set to 0
# if either minseparation and maxseparation are >= 0, then loop through region will be in increasing order of separation
# if noseparation is specified then other separation indices will be ignored and minseparation=maxseparation=-1
# minseparation=0 and maxseparation=-1 will loop through region in increasing order of separation
# minseparation=-1 or minseparation=0 and maxseparation=4 will loop through region in increasing order of separation until separation = 4
# minseparation=5 and maxseparation=-1 will loop through region in increasing order of separation from separation 5 and outwards
# minseparation=-1 and maxseparation=-1 (default) will loop through all cells in region in no particular order (most efficient way to loop through region though)
# region used in a separation loop must be an absolute region (ie, not <cellicells> etc), otherwise separation options will be silently ignored
# faceseparation means that a cell is considered to be adjacent to a previous cell if it shares a face - the alternative (and default) is nodeseparation, where cells are adjacent if they share a node
# the argument faceseparationflag=<some expression> is evaluated on each cell-separating face (faceseparation option is implied), with the loop only continuing if the flag evaluates as positive.  faceave[lastcell]() specified properties for the last cell in the loop.  Use faceave[othercell]() to access the next cell that could be in the loop.

#START_SKIP
CELL_CONSTANT <separation_test> "cellsum[minseparation=0,maxseparation=1](1.d0,region=<all cells>)" ON <all cells> output
CELL_CONSTANT <separation_test_larger> "cellsum[minseparation=0,maxseparation=3](1.d0,region=<all cells>)" ON <all cells> output
CELL_CONSTANT <separation_test_face> "cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>)" ON <all cells> output
CELL_CONSTANT <separation_test_face_nested> "cellsum[minseparation=0,maxseparation=1,faceseparation](cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>),region=<all cells>)" ON <all cells> output
CELL_CONSTANT <separation_test_face_vertical> "cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>,faceseparationflag=abs(<facenorm[l=2]>)-0.5d0)" ON <all cells> output
CELL_CONSTANT <separation_test_face_horizontal> "cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>,faceseparationflag=abs(<facenorm[l=1]>)-0.5d0)" ON <all cells> output
CELL_CONSTANT <separation_test_face_complex> "cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>,faceseparationflag=abs(facegrad(<cellx[l=1]>))-0.5d0)" ON <all cells> output
CELL_CONSTANT <separation_test_face_complex_reflect> "cellsum[minseparation=0,maxseparation=1,faceseparation](1.d0,region=<all cells>,faceseparationflag=abs(facegrad[reflect=1](<cellx[l=1]>))-0.5d0)" ON <all cells> output
#END_SKIP

CELL_CONSTANT <vertical_thickness> "cellsum[faceseparation](<vof_phi>*<celldx[l=2]>,region=<domain>,faceseparationflag=abs(<facenorm[l=2]>)-0.5d0)" ON <boundary cells> output
FACE_CONSTANT <vertical_thickness_new> "faceave[upcell](cellsum[faceseparation](<vof_phi>*<celldx[l=2]>,region=<domain>,faceseparationflag=abs(<facenorm[l=2]>)-0.5d0))" ON <north> output
FACE_CONSTANT <vertical_thickness_old> "cellsum(cellif(1.d-8-abs(<cellx[l=1]>-cellave[lastface](<facex[l=1]>)),<vof_phi>*<celldx[l=2]>,0.d0),region=<domain>)" ON <north> output
FACE_CONSTANT <vertical_delta> "faceave[upcell](cellsum[faceseparation]((1.d0-<vof_phi>)*<celldx[l=2]>,region=<domain>,faceseparationflag=facemin(abs(<facenorm[l=2]>)-0.5d0,1.d0-faceave[othercell](<vof_phi>))))" ON <north> output
FACE_CONSTANT <vertical_delta_number_of_cells> "faceave[upcell](cellsum[faceseparation](1.d0,region=<domain>,faceseparationflag=facemin(abs(<facenorm[l=2]>)-0.5d0,1.d0-faceave[othercell](<vof_phi>))))" ON <north> output
FACE_CONSTANT <vertical_delta2> "faceave[upcell](cellsum[faceseparation]((1.d0-<vof_phi>)*<celldx[l=2]>,region=<domain>,faceseparationflag=facemin(abs(<facenorm[l=2]>)-0.5d0,faceave[othercell](<vof_phi>)-faceave[lastcell](<vof_phi>)+1.d-8)))" ON <north> output
FACE_CONSTANT <vertical_delta2_number_of_cells> "faceave[upcell](cellsum[faceseparation](1.d0,region=<domain>,faceseparationflag=facemin(abs(<facenorm[l=2]>)-0.5d0,faceave[othercell](<vof_phi>)-faceave[lastcell](<vof_phi>)+1.d-8)))" ON <north> output

# test of referencing separation cell centre properties
CELL_CONSTANT <separation_loop_ave_separation_centre_icell> "cellsum[maxseparation=3,faceseparation](<icell>,region=<all cells>)/cellsum[maxseparation=3,faceseparation](1.d0,region=<all cells>)" ON <all cells> output
CELL_CONSTANT <icell output> "<icell>" ON <all cells> output
# INCLUDE FINISHED for ../separation_syntax.arb
#--------------------------------------------------------
##################################################################################
