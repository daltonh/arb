#(comment created during unwrap): new block = resources/test_suite_results/intel/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /home/daltonh/fortran/arb/testsuite/arb_master/src/free_surface_functions.f90
EXTERNALS "/home/daltonh/fortran/arb/testsuite/arb_master/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: 1d_fully_developed_flow.arb
   #(comment created during unwrap): new block = 1d_fully_developed_flow.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "1d_fully_developed_flow.arb"
   INFO_TITLE "Fully developed 1d flow between two plates"
   INFO_AUTHOR "Dalton Harvie"
   INFO_DATE "13/2/17"
   
   MSH_FILE "line.msh" # this is a vertical line, parallel with the y [l=2] axis
      #(comment created during unwrap): new block = ../../templates/fluid_properties/water.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE_TEMPLATE "fluid_properties/water"
      # Physical data for liquid water
      # The correlations used are accurate within the temperature range 0-150 degrees Celsius, at least
      
      CONSTANT <T_celsius> [degreesC] 25.d0
      CONSTANT <T_kelvin> [K] "<T_celsius>+273.15d0"
      CONSTANT <rho> [kg m-3] "(((((-2.8054253d-10*<T_celsius>+1.0556302d-7)*<T_celsius>-4.6170461d-5)*<T_celsius>-0.0079870401d0)*<T_celsius>+16.945176d0)*<T_celsius>+999.83952d0)/(1.d0+0.01687985d0*<T_celsius>)" # density; Eq. (16) of Kell (1975), J. Chem. Eng. Data 20: 97
      CONSTANT <mu> [Pa s] "1.d-3*(<T_celsius>+246.d0)/((0.05594d0*<T_celsius>+5.2842d0)*<T_celsius>+137.37d0)" # viscosity; Eq. (11) of Laliberte (2007), J. Chem. Eng. Data 52: 321
      CONSTANT <eps_fluid> [1] "10.d0**(1.d0/(1.d0+0.0012/(1.d-3*<rho>)**2)*((0.4117d0+366.6d0/<T_kelvin>-1.491d5/<T_kelvin>**2+9.190d6/<T_kelvin>**3)+(0.667d0-11.41d0/<T_kelvin>-3.526d4/<T_kelvin>**2)*log10(1.d-3*<rho>))+0.290d0+275.4d0/<T_kelvin>+0.3245d5/<T_kelvin>**2+log10(1.d-3*<rho>))+1.d0" # relative static permittivity; Eq. (2) of Marshall (2008), Nat. Preced., http://dx.doi.org/10.1038/npre.2008.2472.1
   
   CONSTANT <width> "facesum(<facex[l=2]>,region=<top>)-facesum(<facex[l=2]>,region=<bottom>)"
   CONSTANT <half_width> "<width>/2.d0"
   NONE_CONSTANT <dpdx[l=1]> -1.d0 # a negative pressure gradient drives flow in the positive x direction
   NONE_CONSTANT <p_magnitude> "abs(<dpdx[l=1]>)"
   NONE_CONSTANT <u_magnitude> "<half_width>^2*<p_magnitude>/(12.d0*<mu>)" # based on flow of newtonian fluid between two infinite flat plates
   
   CELL_UNKNOWN <u[l=1]> "1.d0" ON <allcells> magnitude=<u_magnitude>
   FACE_DERIVED <ugrad_f[l=2,1]> "facegrad[l=2,](<u[l=1]>)" ON <allfaces>
   
   # to invoke a carreau fluid, set this to the empty string, otherwise for a newtonian fluid set this to "#"
   
   INFO_TITLE+ ": Carreau shear-thinning fluid"
   
   # calculate the average strain rate using templates files
      #(comment created during unwrap): new block = ../../templates/navier_stokes/strain_rate_magnitude.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude"
      # here we calculate the 'magnitude of the strain rate tensor', as used for example in generalised non-Newtonian fluids
      # for the specific constants and form employed here refer to Bird, Stewart and Lightfoot (2002) p 241, where the strain rate tensor does not have a half multiplier, and the strain rate magnitude is defined as the square root of the second invariant of this strain rate tensor
      
      # the strain rate tensor is calculated from the stress tensor template using a few substitutions
         #(comment created during unwrap): new block = ../../templates/navier_stokes/total_stress.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "total_stress" 
         
         # total stress tensor
            #(comment created during unwrap): new block = ../../templates/navier_stokes/u_gradient_tensor.arb: sub_block = 0
            #(hash inserted during unwrap)INCLUDE "u_gradient_tensor"
            # a tensor of face centred gradients that respects any reflections
            # used in the total stress and boundary conditions now
            # as per conventional tensor notation, the first index is the derivative direction, and the second is the velocity direction
            FACE_DERIVED <ugrad_f[l=1,1]> "facegrad[l=1,](<u[l=1]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=1,2]> "facegrad[l=1,](<u[l=2]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=1,3]> "facegrad[l=1,](<u[l=3]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=2,1]> "facegrad[l=2,](<u[l=1]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=2,2]> "facegrad[l=2,](<u[l=2]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=2,3]> "facegrad[l=2,](<u[l=3]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=3,1]> "facegrad[l=3,](<u[l=1]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=3,2]> "facegrad[l=3,](<u[l=2]>)" ON <allfaces>
            FACE_DERIVED <ugrad_f[l=3,3]> "facegrad[l=3,](<u[l=3]>)" ON <allfaces>
         
         # if the numerical velocity divergence is to be included in the stress calculation replace this string with an empty character prior to calling this template
         
         # calculate the velocity divergence (numerical) on each face
         #FACE_DERIVED <udiv_f> "<ugrad_f[l=1,1]>+<ugrad_f[l=2,2]>+<ugrad_f[l=3,3]>" ON <allfaces>
         
         # deal with uniform/nonuniform viscosity, allowing for possibility of user setting <mu_f> directly
         # if you want to overwrite <mu_f>, just define it prior to calling this file and your replacement will overwrite the following
         # first define this local replacement string in the same scope of the definition statements below (ie, outside scope of if block)
            #(comment created during unwrap): new block = ../../templates/navier_stokes/total_stress.arb: sub_block = 1
            #(hash inserted during unwrap)IF   # this evaluates as true (1) if replacement string '<mu_f>' isn't defined, AND <<uniformviscosity>> is on (1)
            #(hash inserted during unwrap)# if we are here then we apply the uniform viscosity substitution, with 'S'='SUBSTITUTE' meaning to replace the value of this string in its previous (above code block here) definition
            #(hash inserted during unwrap)END_IF
         #{{ print "IN template total_stress\n".string_debug; }}
         
         # no both cartesian and cylindrical stresses don't include pressure
         # without the numerical velocity divergence
         FACE_LOCAL <gamma[l=1,1]> "-(-1.d0)*2.d0*<ugrad_f[l=1,1]>" ON <allfaces>
         FACE_LOCAL <gamma[l=2,2]> "-(-1.d0)*2.d0*<ugrad_f[l=2,2]>" ON <allfaces>
         FACE_LOCAL <gamma[l=3,3]> "-(-1.d0)*2.d0*<ugrad_f[l=3,3]>" ON <allfaces>
         # overwrite these if the numerical velocity divergence is to be included, see <<udivfcomment>> string replacement above
         # Note: "<udiv_f>/3.d0" is specifically replaced in strain_rate_magnitude template
         #FACE_LOCAL <gamma[l=1,1]> "-(-1.d0)*2.d0*(<ugrad_f[l=1,1]>-(0.d0))" ON <allfaces>
         #FACE_LOCAL <gamma[l=2,2]> "-(-1.d0)*2.d0*(<ugrad_f[l=2,2]>-(0.d0))" ON <allfaces>
         #FACE_LOCAL <gamma[l=3,3]> "-(-1.d0)*2.d0*(<ugrad_f[l=3,3]>-(0.d0))" ON <allfaces>
         FACE_LOCAL <gamma[l=1,2]> "-(-1.d0)*(<ugrad_f[l=1,2]>+<ugrad_f[l=2,1]>)" ON <allfaces>
         FACE_LOCAL <gamma[l=1,3]> "-(-1.d0)*(<ugrad_f[l=1,3]>+<ugrad_f[l=3,1]>)" ON <allfaces>
         FACE_LOCAL <gamma[l=2,3]> "-(-1.d0)*(<ugrad_f[l=2,3]>+<ugrad_f[l=3,2]>)" ON <allfaces>
         FACE_LOCAL <gamma[l=2,1]> "<gamma[l=1,2]>" ON <allfaces>
         FACE_LOCAL <gamma[l=3,1]> "<gamma[l=1,3]>" ON <allfaces>
         FACE_LOCAL <gamma[l=3,2]> "<gamma[l=2,3]>" ON <allfaces>
      
      # now calculate the double dot product on the faces, then average to the cells before square rooting
      CELL_DERIVED <gamma_magnitude> "sqrt(0.5d0*cellave(ddot(<gamma[l=:,:]>,<gamma[l=:,:]>)))" ON <allcells>
      # the cylindrical version includes another component based on the radial dimension, which is calculated directly from cell centred variables
      #CELL_DERIVED <gamma_magnitude> "sqrt(0.5d0*cellave(ddot(<gamma[l=:,:]>,<gamma[l=:,:]>))+2.d0*(<u[l=0]>/<cellx[l=0]>)**2)" ON <allcells>
   VARIABLE <gamma_magnitude> output
   FACE_DERIVED <gamma_magnitude_f> "sqrt(0.5d0*ddot(<gamma[l=:,:]>,<gamma[l=:,:]>))" ON <allfaces> output
   NONE_CONSTANT <mu_f> "<mu>" # will be overwritten for a carreau fluid
   
   # parameters for the carreau shear-thinning viscosity
   NONE_CONSTANT <carreau_relative_mu_infinity> 1.d-3
   NONE_CONSTANT <carreau_mu_infinity> [Pa.s] "<mu>*<carreau_relative_mu_infinity>" # set infinite shear-rate viscosity as a proportion of the zero-shear rate viscosity
   NONE_CONSTANT <carreau_lambda> [s] 1.d0 # time constant
   NONE_CONSTANT <carreau_n> 0.5d0 # power-law constant
   FACE_DERIVED <mu_f> "(1.d0+(<carreau_lambda>*<gamma_magnitude_f>)^2)^((<carreau_n>-1.d0)/2.d0)*(<mu>-<carreau_mu_infinity>) + <carreau_mu_infinity>" ON <allfaces> output
   NONE_CONSTANT <u_magnitude> "<u_magnitude>*<mu>/<carreau_mu_infinity>" # 
   
   FACE_LOCAL <tau[l=1,2]> "-<mu_f>*<ugrad_f[l=2,1]>" ON <allfaces>
   FACE_LOCAL <tau[l=2,1]> "<tau[l=1,2]>" ON <allfaces>
   FACE_DERIVED <J_f[l=1]> "dot(<facenorm[l=:]>,<tau[l=:,1]>)" ON <allfaces>
   CELL_EQUATION <momentum[l=1]> "celldiv(<J_f[l=1]>)+<dpdx[l=1]>" ON <domain> # momentum component
   FACE_EQUATION <u_topwall> "<u[l=1]>" ON <top>
   FACE_EQUATION <u_bottomwall> "<u[l=1]>" ON <bottom>
   
   NEWTSTEPMAX 50
   #INCLUDE_TEMPLATE "kernel_presets/kernel_1st_order_compact"
##################################################################################
