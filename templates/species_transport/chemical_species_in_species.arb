MARKDOWN
This for the transport of chemcial species <<chemical_species>> that is attached to (on) or within (in) a multifluid species <<species>>

Variables in this file end with the suffix <<chemical_species>>_[on|in]_<<species>> with the on/in choice reflecting whether the chemical species is contained on the surface of the (multifluid) species (on), or within its volume (in).

Where the chemical species is to be defined on the species is determined by the <<where>>=volume|surface can be previously set, but defaults to volume.
Alternatively, for a surface bound species call with the template chemical_species_on_species and directly with this template for a volume bound species.
END_MARKDOWN

# must be called with <<chemical_species>>, <<where>> and <<species>> defined
IF {{ return (!(string_examine('<<chemical_species>>'))) }} # this is 1 if the string <<chemical_species>> is not defined
  ERROR "the chemical species string has not been set in chemical_species_on_species template: <<chemical_species>>"
END_IF
IF {{ return (!(string_examine('<<species>>'))) }} # this is 1 if the string <<species>> is not defined
  ERROR "the multifluid species string has not been set in chemical_species_on_species template: <<species>>"
END_IF
REPLACEMENTS D "<<where>>" W "in"

# create an almalgim of the species names to simplify notation
REPLACEMENTS D '/species/' W '<<chemical_species>>_<<where>>_<<species>>'

# for now just use first order upwind advection, until fix advection_limiters to allow <c_ rather than <c replacement
REPLACEMENTS D '<<specieslimitedadvection>>' W '0'

REPLACEMENTS D "<c_" W "<c_" # define the scope of this to be outside the if statement

# volume species surface area of species
NONE_CONSTANT <A^_<<species>>> "<A_<<species>>>/<V_<<species>>>"

# also allowing influid? - not yet
IF {{ return (string_test('<<where>>','on')) }}
# on the surface

# FIXME
# define the equivalent volume bound concentration (whether using it or not)
  CELL_LOCAL <c^_/species/> "<c_/species/>/<phi_bounded_<<species>>>" ON <allcells> output
# define the equivalent surface bound concentration (whether using it or not)
  CELL_LOCAL <c^^_/species/> "<c_/species/>/(<A^_<<species>>>>*<phi_bounded_<<species>>>)" ON <allcells> output
  
# define the equivalent total concentration (whether using it or not)
  CELL_LOCAL <c_/species/> "<c^_/species/>*<phi_bounded_<<species>>>" ON <allcells> output
# define the equivalent surface bound concentration (whether using it or not)
  CELL_LOCAL <c^^_/species/> "<c_/species/>/(<A^_<<species>>>*<phi_bounded_<<species>>>)" ON <allcells> output
# include the transport equations, solving for the surface specific concentration unknown <c^^_chemical_species_on_species>
  REPLACEMENTS S "<c_" W "<c^^_" # from now on all variables are surface or volume specific
  INCLUDE "equations" R "<u_f>" W "<phiu_f_<<species>>>"

ELSE
# within the volume

# define the equivalent total concentration (whether using it or not)
  CELL_LOCAL <c_/species/> "<c^_/species/>*<phi_bounded_<<species>>>" ON <allcells> output
# define the equivalent surface bound concentration (whether using it or not)
  CELL_LOCAL <c^^_/species/> "<c_/species/>/(<A^_<<species>>>*<phi_bounded_<<species>>>)" ON <allcells> output
# include the transport equations, solving for the volume specific concentration unknown <c^_chemical_species_in_species>
  REPLACEMENTS S "<c_" W "<c^_"
  INCLUDE "equations" R "<u_f>" W "<phiu_f_<<species>>>"

END_IF

{{ print string_debug(); }}

# reform the flux and equations to be specific, noting that at this stage <c_ is being replaced
IF 1
# particle version, with diffusion using the diffusivity of the particle species <<species>>
  NONE_CONSTANT <D_<<species>>> [m^2/s] "<k_boltzmann>*<T>/(6.d0*<pi>*<mu_species0>*<a_<<species>>>)" # based on stokes drag
  NONE_CONSTANT <c_D_/species/> "<D_<<species>>>"
# FACE_DERIVED <c_j_f_/species/> "<c_f_/species/>*<phiu_f_<<species>>>-<c_D_/species/>*facegrad(<phi_pos_<<species>>>*<c_/species/>)" ON <allfaces> # this is the flux of species over each cell face, composed of an advection and diffusion component
  FACE_DERIVED <c_j_f_/species/> "<c_f_/species/>*<phiu_f_<<species>>>-<c_D_/species/>*<phi_f_pos_<<species>>>*facegrad(<c_/species/>)" ON <allfaces> # this is the flux of species over each cell face, composed of an advection and diffusion component
ELSE
# fluid version
  FACE_DERIVED <c_j_f_/species/> "<c_f_/species/>*<phiu_f_<<species>>>-<c_D_/species/>*<phi_f_pos_<<species>>>*facegrad(<c_/species/>)" ON <allfaces> # this is the flux of species over each cell face, composed of an advection and diffusion component
END_IF
# and reform the equation to solve
CELL_EQUATION <c_equation_/species/> "(<c_/species/>-<c_/species/[r=1]>*<phi_pos_<<species>>[r=1]>/<phi_bounded_<<species>>>)/<dt> + celldiv(<c_j_f_/species/>)/<phi_bounded_<<species>>> - <c_source_/species/>"

