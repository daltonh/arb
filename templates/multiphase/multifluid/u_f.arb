MARKDOWN
Here we setup the face flux velocity u_f for each phase, using the navier_stokes template file
END_MARKDOWN

# do the whole u_f thing, including defining the dynamic pressures, p_errors, etc
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/u_f' ".
      "R '<u[' W '<u_$species"."[' ".
      "R '<ugrad_f[' W '<ugrad_f_$species"."[' ".
      "R '<u_f_vect[' W '<u_f_vect_$species"."[' ".
      "R '<mu_f>' W '<mu_f_$species>' ".
      "R '<u_rf_{vis}>' W '<u_rf_{vis}_$species>' ".
      "R '<u_rf_{transient}>' W '<u_rf_{transient}_$species>' ".
      "R '<u_rf_{adv}>' W '<u_rf_{adv}_$species>' ".
      "R '<u_f_{raw}>' W '<u_f_{raw}_$species>' ".
      "R '<u_f_{correction}>' W '<phiu_f_{correction}_$species>' ".
      "R '<u_f_{correction}[r=1]>' W '<phiu_f_{correction}_$species"."[r=1]>' ".
      "R '<u_f>' W '<phiu_f_$species>' ".
      "R '<rho_f>' W '<rho_$species>' ".
      "R '<eps_p>' W '<eps_p_$species>' ".
      "R '<p_error>' W '<p_error_$species>' ".
      "R '<dynamic_force_c_f[' W '<dynamic_force_c_f_$species"."[' ".
      "R '<dynamic_force_c[' W '<dynamic_force_c_$species"."[' ".
      "R '<dynamic_force_f>' W '<dynamic_force_f_$species>' ".
      "R '<p>' W '<p_species0>' ".
      "R '<p_f>' W '<p_f_species0>'\n";
# redefine the viscosity u_rf, recognising that the correction is in terms of phiu, rather than u
    $return_string .= "VARIABLE <u_rf_{vis}_$species> '<mu_f_$species>/(<facedx>^2*<phi_f_lim_$species>)'\n";
  }
  return $return_string;
}}

# within the multifluid equations the dynamic force is weighted by phi, here phi_bounded
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    for my $l (string_eval('<<dimensions>>','list')) {
      $return_string .= "VARIABLE <dynamic_force_c_$species"."[l=$l]> '<phi_bounded_$species>*(<dynamic_force_c_$species"."[l=$l]>)'\n";
    }
    $return_string .= "VARIABLE <dynamic_force_f_$species> '<phi_f_bounded_$species>*(<dynamic_force_f_$species>)'\n";
  }
  return $return_string;
}}

IF 1 # species aware fancier method, with species0 having to be done first
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_LOCAL 'single_species_u_f' R '<<species>>' W '$species'\n";
    }
    return $return_string;
  }}
END_IF

{{ print string_debug(); }}
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "FACE_DERIVED <phi_f_adv_$species> 'faceave[advection](<phi_bounded_$species>,<u_f_{raw}_$species>,<adv_limiter>)' ON <allfaces>\n";
    $return_string .= "FACE_DERIVED <phiu_f_$species> '<phi_f_adv_$species>*<u_f_{raw}_$species>+faceif(facedelta(<domainfaces>),<phiu_f_{correction}_$species>,0.d0)' ON <allfaces>\n";
    $return_string .= "FACE_LOCAL <u_f_$species> '<u_f_{raw}_$species>' ON <allfaces>\n";
  }
  return $return_string;
}}

# add on osmotic pressure contribution to dynamic force for the disperse species
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
    $return_string .= "INCLUDE_LOCAL 'single_species_dynamic_force' R '<<species>>' W '$species'\n";
  }
  return $return_string;
}}
