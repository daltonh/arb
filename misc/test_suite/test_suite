#!/bin/bash
#
# file test_suite
#
# Copyright 2009-2015 Dalton Harvie (daltonh@unimelb.edu.au)
# 
# This file is part of arb finite volume solver, referred to as `arb'.
# 
# arb is a software package designed to solve arbitrary partial
# differential equations on unstructured meshes using the finite volume
# method.  Primarily it consists of fortran source code, perl source
# code and shell scripts.  arb replies on certain third party software
# to run, most notably the computer algebra system maxima
# <http://maxima.sourceforge.net/> which is released under the GNU GPL.
# 
# The copyright of arb is held by Dalton Harvie.
# 
# arb is released under the GNU GPL.  arb is free software: you can
# redistribute it and/or modify it under the terms of the GNU General
# Public License (version 3) as published by the Free Software Foundation.
# You should have received a copy of the GNU General Public Licence
# along with arb (see file licence/gpl.txt after unpacking).  If not,
# see <http://www.gnu.org/licences/>.
# 
# arb is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licence
# for more details.
# 
# For full details of arb's licence see the licence directory.
# 
# The current homepage for the arb finite volume solver project is
# <http://people.eng.unimelb.edu.au/daltonh/downloads/arb>.
#
#-------------------------------------------------------------------------
#
# a little script to run through and test all of the example/manual problems
# daltonh, 24/11/10

# usage: from the working directory run ./misc/test_suite/test_suite
#-------------------------------------------------------------------------------
# usage function
usage () {
  echo
  echo "HELP/USAGE: ./misc/test_suite/testsuite [options] [test_case1] [test_case2] [etc]";
  echo
  echo "This script will run through all of the test problems within the examples directory";
  echo "Run from the arb directory (as above)";
  echo "Alternatively, if any test_case's are specified, only they will be run";
  echo "To stop this script cleanly, do touch test_suite_stop within the arb directory (and touch stop after this to stop the current simulation asap)";
  echo
  echo "Possible options:";
  echo "  --clean|-c: remove previous results and run tests afresh";
  echo "  --refresh|-r: only run the tests that were previously unsuccessful (default)";
  echo "  --compiler-gnu: use the gfortran compiler";
  echo "  --compiler-intel: use the intel compiler";
  echo "  --compiler-both: use both compilers sequentially (default)";
  echo "  --help|-h: display this HELP INFO";
  echo;
  exit 1;
}
#-------------------------------------------------------------------------------
cwd=`pwd`;
examples_dir=$cwd'/examples';
#examples_dir=$cwd'/examples_test';
suitesparse_dir=$cwd'/src/contributed/suitesparse'
stopfile='test_suite_stop'
error=0;
REFRESH=1; # default is refresh is on
COMPILER="both"; # both compilers used by default
arb_options=""; # any additional options you want passed
#arb_options="--debugger-none";
unset TESTCASES;

if [ -e $stopfile ] ; then rm $stopfile ; fi;

# check for any options
for i in $*
do
  case $i in
    "--refresh"|"-r") REFRESH=1;; # only runs that were unsuccessful on the last run are repeated (default behaviour)
    "--clean"|"-c") REFRESH=0;; # rerun simulations whether or not they were successful or not previously
    "--compiler-gnu") COMPILER="gnu";;
    "--compiler-intel") COMPILER="intel";;
    "--compiler-both") COMPILER="both";;
    "--help"|"-h") usage;;
    *) echo "INFO: adding test case $i"; TESTCASES[${#TESTCASES[@]}]=$i;;
  esac
done ;

# check that examples are in the right location
if [ ! -d $examples_dir ] ; then
  echo "ERROR: examples directory $examples_dir does not exist";
  exit 1;
fi;

# check that suitesparse solver is in the right location
if [ ! -d $suitesparse_dir ] ; then
  echo "ERROR: suitesparse directory $suitesparse_dir does not exist - Are you running from an arb_dir?";
  exit 1;
fi;

# if no test cases have been specifically given, set to all within the examples directory
if [ -z "${TESTCASES[0]}" ] ; then
  cd $examples_dir;
  TESTCASES=( * );
  cd ..;
fi;
echo "INFO: attempting to run within the following directories (validity checked later): ${TESTCASES[@]}";

# set compilers based on COMPILER option
unset COMPILERS;
if [ $COMPILER = "both" ] ; then
echo "compiler = both"
  COMPILERS=( "gnu" "intel" );
else
  COMPILERS[0]=$COMPILER;
fi;
echo "INFO: using the following compilers: ${COMPILERS[@]}";

# download and make suitesparse solver
echo "INFO: attempting to make the suitesparse solver";
cd $suitesparse_dir;
make;
if [ $? -ne 0 ] ; then
  echo "ERROR: problem fetching/compiling the suitesparse solver";
  cd $cwd;
  exit 1 ;
else
  echo "INFO: suitesparse solver successfully compiled";
  cd $cwd;
fi ;

# run through each example problem
for dir_name in ${TESTCASES[@]} ; do
  subdir=$examples_dir/$dir_name;
  if [ ! -d $subdir ] ; then
    echo "INFO: skipping directory $subdir as it does not exist";
    continue;
  fi
  shopt -s nullglob # causes the glob to become null if matches nothing
  arbfiles=( ${subdir}/*.arb );
  if [ -z "${arbfiles}" -o -L $subdir ] ; then
    echo "INFO: skipping directory $subdir as it is a link to another directory or does not contain an arb input file";
    continue;
  fi # skip the directory if it doesn't contain an arb input file or is not a directory (could be a tutorial link for example)
  cd $subdir; # change to the subdir where the arb and msh files will be found
  for compiler in ${COMPILERS[@]} ; do # run with the chosen compilers
# make results directory within examples directories and copy over all of the outputs
    results_dir="resources/test_suite_results/$compiler";
    output_dir="${results_dir}/output";
    if [ ! -d $results_dir ] ; then mkdir -p $results_dir ; fi
    if [ $REFRESH -eq 1 -a -e $results_dir/SUCCESS ] ; then
      echo "INFO: skipping arb simulation of test case $subdir using $compiler compiler as successful results already exist";
      cd $cwd;
      continue;
    else
      echo "INFO: performing arb simulation of test case $subdir using $compiler compiler";
      rm -r $results_dir/* >/dev/null 2>/dev/null; # will remove old output directory, and other files
    fi
    local_log_file="$results_dir/test_suite.log";
    echo "INFO: results_dir = ${results_dir}" >>$local_log_file;
    echo "INFO: output_dir = ${output_dir}" >>$local_log_file;
    echo "INFO: subdir = ${subdir}" >>$local_log_file;
    rm fort.* >/dev/null 2>/dev/null; # just in case there are any debugging files left here from previous runs, remove
# if an arb file is present which matches the directory name then run this, otherwise run all arb files
    if [ -e "${dir_name}.arb" ] ; then
      $cwd/bin/arb $arb_options "${dir_name}.arb" --quiet --compiler-$compiler -o "${output_dir}" >>$local_log_file 2>>$local_log_file;
    else
      $cwd/bin/arb $arb_options *.arb --quiet --compiler-$compiler -o "${output_dir}" >>$local_log_file 2>>$local_log_file;
#     ./arb $arb_options ${arbfiles[*]} --quiet --compiler-$compiler -o "${output_dir}" >>$local_log_file 2>>$local_log_file;
    fi
    keyword=ERROR_IN_MAKE;
    if [ -e "${output_dir}/output.scr" ] ; then
      last_line=`tail -n 2 "${output_dir}/output.scr"`; # with change to quiet behaviour of arb, the SUCCESS statement is now on the second last line of output.scr
      keyword=`echo $last_line | cut -c 1-7`;
      if [[ ! "$keyword" == "SUCCESS" ]] ; then keyword="ERROR_IN_RUN"; fi
    fi
# also create unwrapped input directory and copy over unwrapped_input.arb
    if [ ! -d unwrapped_input ] ; then mkdir -p unwrapped_input ; fi
    cp "${output_dir}/setup_data/unwrapped_input.arb" unwrapped_input >/dev/null 2>/dev/null;
    cp "${output_dir}/setup_data/variable_list.arb" unwrapped_input >/dev/null 2>/dev/null;
    cp "${output_dir}/setup_data/region_list.arb" unwrapped_input >/dev/null 2>/dev/null;
    touch $results_dir/$keyword;
    if [[ "$keyword" == "SUCCESS" ]]; then
      echo "INFO: simulation $subdir using $compiler compiler was successful";
      echo "INFO TEST_SUITE: simulation $subdir using $compiler compiler was successful" >>$local_log_file;
    else
      echo "ERROR: simulation $subdir using $compiler compiler was not successful: $keyword";
      echo "ERROR TEST_SUITE: simulation $subdir using $compiler compiler was not successful: $keyword" >>$local_log_file;
      error=1;
    fi;
    fortfiles=( fort.* );
    if [ -n "$fortfiles" ]; then
      echo "ERROR: debugging files (ie fort.*) are being produced: you must have left a debugging flag on?: exiting";
      error=1;
      cd $cwd;
      break 2; # jump out of two loop levels
    fi;
    cd $cwd;
    if [ -e $stopfile ]; then
      echo "INFO: user has requested that test_suite program stops";
      error=1;
      break 2; # jump out of two loop levels
    fi;
  done;
done;

if [ $error -eq 0 ] ; then
  echo "SUCCESS: all simulations completed gracefully";
  exit 0;
else
  echo "ERROR: atleast one simulation did not finish successfully";
  exit 1;
fi
