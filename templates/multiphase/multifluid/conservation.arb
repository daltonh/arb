MARKDOWN
Conservation equations for both mass and momentum
END_MARKDOWN

# define cylindrical divergence modifier terms
REPLACEMENTS R "<<radius_top>>" W "" R "<<radius_bottom>>" W ""
REPLACEMENTS R "<<radius_top_azi>>" W "" R "<<radius_bottom_azi>>" W ""

IF <<cylindrical>>
  REPLACEMENTS S "<<radius_top>>" W "<<radius_f>>*" S "<<radius_bottom>>" W "/<<radius_c>>"
END_IF
# define constant azimuthal velocity divergence modifier terms
IF <<azimuthal>>
  REPLACEMENTS S "<<radius_top_azi>>" W "<<radius_f>>**2*" S "<<radius_bottom_azi>>" W "/<<radius_c>>**2"
END_IF

# now create conservation equations

# mass conservation (actually, volume conservation)
{{
  my $return_string='';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {

# find advection phi
    if (string_test('<<transientnavierstokescomment>>','')) {
# explicit
      $return_string .= "FACE_DERIVED <phi_f_adv_$species> 'faceave[advection](<phi_pos_$species"."[r=1]>,<u_f_$species>,<adv_limiter>)' ON <allfaces>\n";
# implicit
#     $return_string .= "FACE_DERIVED <phi_f_adv_$species> 'faceave[advection](<phi_pos_$species>,<u_f_$species>,<adv_limiter>)' ON <allfaces>\n";
    } else {
      $return_string .= "FACE_DERIVED <phi_f_adv_$species> 'faceave[advection](<phi_pos_$species>,<u_f_$species>,<adv_limiter>)' ON <allfaces>\n";
    }

# compile into flux
    $return_string .= "FACE_LOCAL <phiu_f_$species> '<phi_f_adv_$species>*<u_f_$species>' ON <allfaces>\n";

# continuity equation for each phase
    $return_string .= "CELL_EQUATION <continuity_$species> 'celldiv(<<radius_top>><phiu_f_$species>)<<radius_bottom>>' ON <domain>\n";
    if (string_test('<<transientnavierstokescomment>>','')) {
      $return_string .= "CELL_EQUATION <continuity_$species> '(<phi_$species>-<phi_$species"."[r=1]>)/<dt>+<continuity_$species>' ON <domain>\n";
    }
  }
  return $return_string;
}}

<<navierstokescomment>>INCLUDE_LOCAL "momentum_advection_flux" # calculate momentum advection flux for all species, only for non-stokes flow
INCLUDE_LOCAL "momentum_viscous_flux" # calculate momentum advection flux for all species

# momentum conservation
{{
  my $return_string='';
  for my $l (string_eval('<<dimensions>>','list')) {
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
# first add viscous stress flux (within divergence here)
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<J_viscous_f_$species"."[l=$l]>' ON <domain>\n";
# and add advection flux
      if (string_test('<<navierstokescomment>>','')) {
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<J_advection_f_$species"."[l=$l]>'\n";
      }
# now take divergence of both terms
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> 'celldiv(<<radius_top>>(<momentum_$species"."[l=$l]>))<<radius_bottom>>'\n";
      if (1) {
# newer method, where phi is removed from transient term
# now divide these viscous and advection terms through by phi_bounded
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '((<momentum_$species"."[l=$l]>)/<phi_bounded_$species>)'\n";
# and transient derivative based on phi_bounded, cancelling out from first term
        if (string_test('<<transientnavierstokescomment>>','')) {
# choice of using bounded or pos previous phi
#         $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<rho_$species>*(<u_$species"."[l=$l]>-<phi_bounded_$species"."[r=1]>*<u_$species"."[l=$l,r=1]>/<phi_bounded_$species".">)/<dt>'\n";
          $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<rho_$species>*(<u_$species"."[l=$l]>-<phi_pos_$species"."[r=1]>*<u_$species"."[l=$l,r=1]>/<phi_bounded_$species".">)/<dt>'\n";
        }
      } else {
# original method, where transient term is first assembled, and then divided by <phi_bounded_speciesi>
# and transient derivative based on phi_pos
        if (string_test('<<transientnavierstokescomment>>','')) {
          $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<rho_$species>*(<phi_pos_$species>*<u_$species"."[l=$l]>-<phi_pos_$species"."[r=1]>*<u_$species"."[l=$l,r=1]>)/<dt>'\n";
        }
# now divide these transient, viscous and advection terms through by phi_b
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '((<momentum_$species"."[l=$l]>)/<phi_bounded_$species>)'\n";
      }
# add dynamic forces
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>-<dynamic_force_c_$species"."[l=$l]>' ON <domain>\n";
    }
# now deal with drag terms
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
# now add drag with continuous phase
# was bug here with centring
#     $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<beta*j_f_$species"."_species0>*(<u_$species"."[l=$l]>-<u_species0[l=$l]>)'\n";
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=$l]> '<momentum_$species"."[l=$l]>+<beta*j_$species"."_species0>*(<u_$species"."[l=$l]>-<u_species0[l=$l]>)'\n";
# and opposite to continuous phase term
#     $return_string .= "CELL_EQUATION <momentum_species0[l=$l]> '<momentum_species0[l=$l]>+<beta*j_f_species0_$species>*(<u_species0[l=$l]>-<u_$species"."[l=$l]>)'\n";
      $return_string .= "CELL_EQUATION <momentum_species0[l=$l]> '<momentum_species0[l=$l]>+<beta*j_species0_$species>*(<u_species0[l=$l]>-<u_$species"."[l=$l]>)'\n";
    }
  }
  return $return_string;
}}

IF <<cylindrical>>
#  ERROR "hoop stress not done in conservation"
#END_IF
# add on hoop stress term separately for cylindrical coordinates
IF <<cylindrical>>
# perform a check that <<radialdim>> has been correctly defined
  IF {{ return (!( string_eval('<<radialdim>>') ge 1 && string_eval('<<radialdim>>') le 3)) }}
    ERROR 'This is a cylindrical coordinate simulation however the string <<radialdim>> has not been correctly defined'
  END_IF
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>+2.d0*<u_$species"."[l=<<radialdim>>]>*<mu_c_$species".">/(<phi_bounded_$species>*<cellx[l=<<radialdim>>]>**2)'\n";
      }
    return $return_string;
  }}
END_IF

#define momentum eqn for azimuthal component
IF 0#<<azimuthal>>
# perform a check that <<azimuthaldim>> has been correctly defined
  IF {{ return (!( string_eval('<<azimuthaldim>>') ge 1 && string_eval('<<azimuthaldim>>') le 3)) }}
    ERROR 'This is a cylindrical coordinate simulation with azimuthal flow however the string <<azimuthaldim>> has not been correctly defined'
  END_IF
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      #      $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '(celldiv(<<radius_top_azi>>(<J_viscous_f_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>+<rho_$species".">*<u_f_vect_$species"."[l=<<radialdim>>]>*<u_f_vect_$species"."[l=<<azimuthaldim>>]>/<facex[l=<<radialdim>>]>)'\n";
      #      $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>/<phi_bounded_$species>'\n";
      #      $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_f_vect_$species"."[l=<<azimuthaldim>>]>**2/(<phi_bounded_$species>*<facex[l=<<radialdim>>]>)'\n";
        $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '(celldiv(<<radius_top_azi>>(<J_viscous_f_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>+<rho_$species".">*<u_$species"."[l=<<radialdim>>]>*<u_$species"."[l=<<azimuthaldim>>]>/<cellx[l=<<radialdim>>]>)'\n";
        $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>/<phi_bounded_$species>'\n";
        $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_$species"."[l=<<azimuthaldim>>]>**2/(<phi_bounded_$species>*<cellx[l=<<radialdim>>]>)'\n";
      }
     return $return_string;
    }}

#VARIABLE <momentum[l=<<azimuthaldim>>]> "celldiv(<<radius_top_azi>><J_f[l=<<azimuthaldim>>]>)<<radius_bottom_azi>>+<rho>*<u_f_vect[l=<<radialdim>>]>*<u_f_vect[l=<<azimuthaldim>>]>/<facex[l=<<radialdim>>]>" ON <domain> # momentum component'
#VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> 'celldiv(<<radius_top_azi>>(<J_viscous_f_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>+<rho_$species".">*<u_f_vect_$species"."[l=<<radialdim>>]>*<u_f_vect_$species"."[l=<<azimuthaldim>>]>/<facex[l=<<radialdim>>]>'\n
#      VARIABLE <momentum[l=<<radialdim>>]> "<momentum[l=<<radialdim>>]>-<rho>*<u_f_vect[l=<<azimuthaldim>>]>**2/<facex[l=<<radialdim>>]>"
#VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_f_vect_$species"."[l=<<azimuthaldim>>]>**2/<facex[l=<<radialdim>>]>'\n
END_IF

IF <<azimuthal>>
# momentum conservation
# perform a check that <<azimuthaldim>> has been correctly defined
  IF {{ return (!( string_eval('<<azimuthaldim>>') ge 1 && string_eval('<<azimuthaldim>>') le 3)) }}
    ERROR 'This is a cylindrical coordinate simulation with azimuthal flow however the string <<azimuthaldim>> has not been correctly defined'
  END_IF
{{
  my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
# first add viscous stress flux (within divergence here)
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<J_viscous_f_$species"."[l=<<azimuthaldim>>]>' ON <domain>\n";
# and add advection flux
      if (string_test('<<navierstokescomment>>','')) {
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>'\n";
      }
# now take divergence of both terms
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> 'celldiv(<<radius_top_azi>>(<momentum_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>'\n";


      if (1) {

#        # now deal with centrifugal force term
#        $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<rho_$species".">*<u_$species"."[l=<<radialdim>>]>*<u_$species"."[l=<<azimuthaldim>>]>/<cellx[l=<<radialdim>>]>'\n";

# newer method, where phi is removed from transient term
# now divide these viscous and advection terms through by phi_bounded
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '((<momentum_$species"."[l=<<azimuthaldim>>]>)/<phi_bounded_$species>)'\n";

        # now deal with centrifugal force term
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<rho_$species".">*<u_$species"."[l=<<radialdim>>]>*<u_$species"."[l=<<azimuthaldim>>]>/<cellx[l=<<radialdim>>]>'\n";

# and transient derivative based on phi_bounded, cancelling out from first term
        if (string_test('<<transientnavierstokescomment>>','')) {
# choice of using bounded or pos previous phi
#         $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<rho_$species>*(<u_$species"."[l=<<azimuthaldim>>]>-<phi_bounded_$species"."[r=1]>*<u_$species"."[l=<<azimuthaldim>>,r=1]>/<phi_bounded_$species".">)/<dt>'\n";
          $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<rho_$species>*(<u_$species"."[l=<<azimuthaldim>>]>-<phi_pos_$species"."[r=1]>*<u_$species"."[l=<<azimuthaldim>>,r=1]>/<phi_bounded_$species".">)/<dt>'\n";
        }
      } else {
# original method, where transient term is first assembled, and then divided by <phi_bounded_speciesi>
# and transient derivative based on phi_pos
        if (string_test('<<transientnavierstokescomment>>','')) {
          $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<rho_$species>*(<phi_pos_$species>*<u_$species"."[l=<<azimuthaldim>>]>-<phi_pos_$species"."[r=1]>*<u_$species"."[l=<<azimuthaldim>>,r=1]>)/<dt>'\n";
        }
# now divide these transient, viscous and advection terms through by phi_b
        $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '((<momentum_$species"."[l=<<azimuthaldim>>]>)/<phi_bounded_$species>)'\n";
      }
# add dynamic forces
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>-<dynamic_force_c_$species"."[l=<<azimuthaldim>>]>' ON <domain>\n";
    }
# now deal with drag terms
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
# now add drag with continuous phase
# was bug here with centring
#     $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<beta*j_f_$species"."_species0>*(<u_$species"."[l=<<azimuthaldim>>]>-<u_species0[l=<<azimuthaldim>>]>)'\n";
      $return_string .= "CELL_EQUATION <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>+<beta*j_$species"."_species0>*(<u_$species"."[l=<<azimuthaldim>>]>-<u_species0[l=<<azimuthaldim>>]>)'\n";
# and opposite to continuous phase term
#     $return_string .= "CELL_EQUATION <momentum_species0[l=<<azimuthaldim>>]> '<momentum_species0[l=<<azimuthaldim>>]>+<beta*j_f_species0_$species>*(<u_species0[l=<<azimuthaldim>>]>-<u_$species"."[l=<<azimuthaldim>>]>)'\n";
      $return_string .= "CELL_EQUATION <momentum_species0[l=<<azimuthaldim>>]> '<momentum_species0[l=<<azimuthaldim>>]>+<beta*j_species0_$species>*(<u_species0[l=<<azimuthaldim>>]>-<u_$species"."[l=<<azimuthaldim>>]>)'\n";
    }




  return $return_string;
}}

{{
  my $return_string='';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    #      $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '(celldiv(<<radius_top_azi>>(<J_viscous_f_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>+<rho_$species".">*<u_f_vect_$species"."[l=<<radialdim>>]>*<u_f_vect_$species"."[l=<<azimuthaldim>>]>/<facex[l=<<radialdim>>]>)'\n";
    #      $return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>/<phi_bounded_$species>'\n";
    #      $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_f_vect_$species"."[l=<<azimuthaldim>>]>**2/(<phi_bounded_$species>*<facex[l=<<radialdim>>]>)'\n";
      #$return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '(celldiv(<<radius_top_azi>>(<J_viscous_f_$species"."[l=<<azimuthaldim>>]>+<J_advection_f_$species"."[l=<<azimuthaldim>>]>))<<radius_bottom_azi>>+<rho_$species".">*<u_$species"."[l=<<radialdim>>]>*<u_$species"."[l=<<azimuthaldim>>]>/<cellx[l=<<radialdim>>]>)'\n";
      #$return_string .= "VARIABLE <momentum_$species"."[l=<<azimuthaldim>>]> '<momentum_$species"."[l=<<azimuthaldim>>]>/<phi_bounded_$species>'\n";

#Centrifugal force term
#      $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_$species"."[l=<<azimuthaldim>>]>**2/(<phi_bounded_$species>*<cellx[l=<<radialdim>>]>)'\n";
       $return_string .= "VARIABLE <momentum_$species"."[l=<<radialdim>>]> '<momentum_$species"."[l=<<radialdim>>]>-<rho_$species".">*<u_$species"."[l=<<azimuthaldim>>]>**2/(<cellx[l=<<radialdim>>]>)'\n";
    }
   return $return_string;
  }}
END_IF
