# this file calculates all level set quantities for the positive level-set side of the interface, for the calculation of mod(grad(<ls>)) and mod(grad(<ls_advected>))
# all variables used here include `_pos' in their name, which is replaced by `_neg' when used on the other side of the interface

# calculate mod(grad(<ls_advected>)), taking into account requested discretisation orders
# this is the pseudo advection velocity that points away from the interface
FACE_DERIVED <ls_u_advected_pos> "<<sign>>(faceif(<ls_reinitialisation_order_f>,facegrad(<ls_advected>),facegrad[adjacentcells](<ls_advected>)))" ON <allfaces>
# this is the face averaged <ls> value that will be used in the cell divergences
FACE_DERIVED <ls_f_advected_pos> "faceave[advection](<ls_advected>,<ls_u_advected_pos>,<ls_reinitialisation_order>)" ON <allfaces>
#CELL_LOCAL <ls_grad_dot_advected_pos> "<<sign>>(celldiv(<ls_f_advected_pos>*<ls_u_advected_pos>)-<ls_advected>*celldiv(<ls_u_advected_pos>))"
# and this is mod(grad(<ls_advected>))
# faster?
CELL_LOCAL <ls_grad_dot_advected_pos> "<<sign>>(celldiv((<ls_f_advected_pos>-faceave[lastcell](<ls_advected>))*<ls_u_advected_pos>))"

# define an implicit <ls> function on the positive side of the interface which is anchored at the interface to the ls_advect values
CELL_DERIVED <ls_pos> "cellif(<<sign>><ls_sign>,<ls>,<ls_advected>)" ON <allcells> nooutput

# the exact above three steps are repeated for <ls_pos> to find mod(grad(<ls_pos>))
FACE_DERIVED <ls_u_pos> "<<sign>>(faceif(<ls_reinitialisation_order_f>,facegrad(<ls_pos>),facegrad[adjacentcells](<ls_pos>)))" ON <allfaces>
FACE_DERIVED <ls_f_pos> "faceave[advection](<ls_pos>,<ls_u_pos>,<ls_reinitialisation_order>)" ON <allfaces>
#CELL_LOCAL <ls_grad_dot_pos> "<<sign>>(celldiv(<ls_f_pos>*<ls_u_pos>)-<ls_pos>*celldiv(<ls_u_pos>))" output,elementdata
CELL_LOCAL <ls_grad_dot_pos> "<<sign>>(celldiv((<ls_f_pos>-faceave[lastcell](<ls_pos>))*<ls_u_pos>))"

# also calculate the minimum pseudo velocity out of the cell (ie, -max(velocity into the cell)).  If this is positive then no ls velocity is directed into the cell and if upwinding is used then the equations will become degenerate.  Currently no decent solution to keep simulation progressing.
CELL_OUTPUT <ls_u_min_pos> "facemin(<ls_u_pos>*<facefromcelldirection>,region=<celljfaces>)" ON <domain> elementdata
