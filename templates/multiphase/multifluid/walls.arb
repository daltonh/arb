MARKDOWN
Boundary conditions for walls
END_MARKDOWN

REPLACEMENTS R '<region>' W '<walls>'
IF 1
# v0.59 way
# noting that <u_f> is equal to the normal component of <u[l=:]> on boundary faces
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noflux' R '<u_f>' W '<u_f_$species>' R '<equation>' W '<walls noflux $species>'\n";
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noslip' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<equation1>' W '<walls noslip equation1 $species>' R '<equation2>' W '<walls noslip equation2 $species>'\n";
# not working
#     $return_string .= "INCLUDE_LOCAL 'single_species_p_extrapolation_rhie_chow' R '<equation>' W '<walls p_extrapolation $species>' R '<<species>>' W '$species'\n";
# this works
#     $return_string .= "INCLUDE_LOCAL 'single_species_p_extrapolation_zero_dynamic' R '<equation>' W '<walls p_extrapolation $species>' R '<<species>>' W '$species'\n";
# checking this now
      $return_string .= "INCLUDE_LOCAL 'single_species_p_extrapolation_zero_perror' R '<equation>' W '<walls p_extrapolation $species>' R '<<species>>' W '$species'\n";
    }
    return $return_string;
  }}
ELSE_IF 0
# here setting <u_f_species> to be zero, and also dynamic_force_f to be zero
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noflux' R '<u_f>' W '<u_f_$species>' R '<equation>' W '<walls noflux $species>'\n";
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noslip' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<equation1>' W '<walls noslip equation1 $species>' R '<equation2>' W '<walls noslip equation2 $species>'\n";
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/p_extrapolation' R '<dynamic_force_f>' W '<dynamic_force_f_$species>' R '<equation>' W '<walls p_extrapolation $species>'\n";
    }
    return $return_string;
  }}
ELSE
# here setting <u_f_species>*<phi_f_species> to be zero, and also applying force balance to bc dynamic force
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "FACE_DERIVED <walls noflux type $species> 'faceif(<phi_$species>-<phi_tol>,1.d0,-1.d0)' ON <walls> newtstepmax=10,output\n";
      $return_string .= "FACE_EQUATION <walls noflux $species> 'faceif(<walls noflux type $species>,<u_f_$species>,<phi_$species>)' ON <walls>\n";

#     $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noflux' R '<u_f>' W '<phiu_f_$species>' R '<equation>' W '<walls noflux $species>'\n";
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/noslip' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<equation1>' W '<walls noslip equation1 $species>' R '<equation2>' W '<walls noslip equation2 $species>'\n";
      $return_string .= "FACE_EQUATION <walls p_extrapolation $species> '-<dynamic_force_f_$species>' ON <walls>\n";
#     if ($species eq 'species0') {
#       for my $species2 (string_eval('<<multifluid_disperse_species_list>>','list')) {
#         $return_string .= "FACE_EQUATION <walls p_extrapolation $species> '<walls p_extrapolation species0>+<beta*_species0_$species2>*(<u_f_species0>-<u_f_$species2>)'\n";
#       }
#     } else {
#       $return_string .= "FACE_EQUATION <walls p_extrapolation $species> '<walls p_extrapolation $species>+<beta*_$species"."_species0>*(<u_f_$species>-<u_f_species0>)'\n";
#     }
    }
    return $return_string;
  }}
END_IF
