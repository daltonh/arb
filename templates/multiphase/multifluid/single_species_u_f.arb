MARKDOWN
Here we calculate the correction velocity, using the `species` algorithm
END_MARKDOWN

# use this to debug
# produces a correction velocity sum equation
REPLACEMENTS D '<<debug>>' W '0'

# first compile the local summary variable, A
# add bits in sections
FACE_LOCAL <u_f_{correction}_A_<<species>>> '<C_{Rhie-Chow}>*<dynamic_force_f_{correction}_<<species>>>' ON <correctionfaces>
<<transientnavierstokescomment>>FACE_LOCAL <u_f_{correction}_A_<<species>>> '<u_f_{correction}_A_<<species>>>+<u_f_alpha_{transient}_<<species>>>*<u_f_{correction}_<<species>>[r=1]>'

IF 1
# species method, valid for many solid phases, but with no drag between solid phases
# species0 u_f is calculated first, and then the other solid phase u_f's are calculated from this
  {{
    my $return_string='';
    if (string_test('<<species>>','species0')) {
      my $top = "<u_f_{correction}_A_species0>";
      my $bottom = "<u_f_alpha_species0>";
      for my $i (string_eval('<<multifluid_disperse_species_list>>','list')) {
        $top .= "+<beta^_f_species0_$i>*<u_f_{correction}_A_$i>/(<u_f_alpha_$i>+<beta^_f_$i"."_species0>)";
        $bottom .= "+<beta^_f_species0_$i>*<u_f_alpha_$i>/(<u_f_alpha_$i>+<beta^_f_$i"."_species0>)";
      }
      $return_string .= "FACE_DERIVED <u_f_{correction}_species0> '($top)/($bottom)' ON <correctionfaces>\n";
    } else {
      $return_string .= "FACE_DERIVED <u_f_{correction}_<<species>>> '(<u_f_{correction}_A_<<species>>>+<beta^_f_<<species>>_species0>*<u_f_{correction}_species0>)/(<u_f_alpha_<<species>>>+<beta^_f_<<species>>_species0>)' ON <correctionfaces>\n";
    }
    return $return_string;
  }}
ELSE
# test method, valid for a single solid phase only - should be no reason to use this over the above more general method above
# both species0 and species1 u_f's are calculated independently
# WARNING: this doesn't work for more than one disperse phase
  FACE_LOCAL <u_f_{correction}_determinant> "<u_f_alpha_species0>*<u_f_alpha_species1>+<u_f_alpha_species0>*<beta^_f_species1_species0>+<u_f_alpha_species1>*<beta^_f_species0_species1>" ON <correctionfaces>
  IF {{ return string_test('<<species>>','species0') }}
    FACE_DERIVED <u_f_{correction}_<<species>>> "(<u_f_{correction}_A_species0>*<u_f_alpha_species1>+<u_f_{correction}_A_species0>*<beta^_f_species1_species0>+<u_f_{correction}_A_species1>*<beta^_f_species0_species1>)/<u_f_{correction}_determinant>" ON <correctionfaces>
  ELSE
    FACE_DERIVED <u_f_{correction}_<<species>>> "(<u_f_{correction}_A_species1>*<u_f_alpha_species0>+<u_f_{correction}_A_species0>*<beta^_f_species1_species0>+<u_f_{correction}_A_species1>*<beta^_f_species0_species1>)/<u_f_{correction}_determinant>" ON <correctionfaces>
  END_IF
END_IF

IF <<debug>>
  FACE_OUTPUT <u_f_{correction}_equation_<<species>>> "<u_f_alpha_{transient}_<<species>>>*(<u_f_{correction}_<<species>>>-<u_f_{correction}_<<species>>[r=1]>)" ON <correctionfaces>
  <<navierstokescomment>>VARIABLE <u_f_{correction}_equation_<<species>>> "<u_f_{correction}_equation_<<species>>>+<u_f_alpha_{adv}_<<species>>>*<u_f_{correction}_<<species>>>"
  VARIABLE <u_f_{correction}_equation_<<species>>> "<u_f_{correction}_equation_<<species>>>+<u_f_alpha_{vis}_<<species>>>*<u_f_{correction}_<<species>>>"
  {{
    my $return_string='';
    for my $j (string_eval('<<multifluid_species_list>>','list')) {
      if (string_test('<<species>>',$j)) { next; }
      $return_string .= "VARIABLE <u_f_{correction}_equation_<<species>>> '<u_f_{correction}_equation_<<species>>>+<beta^_f_<<species>>_$j>*(<u_f_{correction}_<<species>>>-<u_f_{correction}_$j>)'\n";
    }
    return $return_string;
  }}
  VARIABLE <u_f_{correction}_equation_<<species>>> "<u_f_{correction}_equation_<<species>>>-<C_{Rhie-Chow}>*<dynamic_force_f_{correction}_<<species>>>"
END_IF

