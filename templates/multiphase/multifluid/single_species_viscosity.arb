MARKDOWN
Here we find <mu_f_species> for each species
END_MARKDOWN

INCLUDE "default_replacement_strings"

# in this file jackson98 = version2, zhang97 = balls

IF {{ return ( string_test('<<stress_method>>','version4') || string_test('<<stress_method>>','version4_species') ) }}
# version4, based on mixture velocities, with call-out to single_species_collision_viscosity_version4 template

# you can pass a <<viscosity_method>> through this file to single_species_collision_viscosity_version4

  IF {{ return string_test('<<species>>','species0') }}
# this should be the viscosity increase within the fluid (same as each solid too) due to the presence of the particles, but without particle particle interactions
# einstein relationship applied to continuous phase, based on total solids present
    CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*(1.d0-<phi_bounded_<<species>>>))" ON <allcells>
    IF 0
      FACE_DERIVED <mu_f_<<species>>> "faceave[adjacentcellsevenweighting](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
    ELSE_IF 0
      FACE_DERIVED <mu_f_<<species>>> "faceif(facedelta(<boundaries>),faceave[downcell](<mu_c_<<species>>>),faceave[harmonic](<mu_c_<<species>>>))" ON <allfaces> output # used in stress
    ELSE
      FACE_DERIVED <mu_f_<<species>>> "faceave[harmonic](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
    END_IF
# note that the correction viscosity is actually viscosity divided by volume fraction
    FACE_LOCAL <mu_f_correction_<<species>>> "<mu_f_<<species>>>/(<phi_bounded_<<species>>>)" ON <allfaces> # used in rhie-chow
# ELSE_IF {{ return string_test('<<stress_method>>','version4') }}
  ELSE
    INCLUDE_LOCAL "single_species_collision_viscosity_version4" # calculate <mu^_col_c_mixture>, <mu^_sid1_c_mixture> and <mu^_sid2_c_mixture>, using <<viscosity_method>>
# hack to check whether boundary viscosity is causing the problem
    IF 0
      FACE_DERIVED <mu^_col_f_mixture>  "faceave[adjacentcellsevenweighting](<mu^_col_c_mixture>)" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid1_f_mixture> "faceave[adjacentcellsevenweighting](<mu^_sid1_c_mixture>)" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid2_f_mixture> "faceave[adjacentcellsevenweighting](<mu^_sid2_c_mixture>)" ON <allfaces> output # used in stress
# note that the correction viscosity is actually viscosity divided by volume fraction
# so multiply a sum of the mu^ viscosities by mu_0 and phi_s
      FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*(<mu^_col_f_mixture>+<mu^_sid1_f_mixture>+<mu^_sid2_f_mixture>)*(1.d0-<phi_f_bounded_species0>)" ON <allfaces> # used in rhie-chow
    ELSE_IF 0
      FACE_DERIVED <mu^_col_f_mixture> "faceif(facedelta(<boundaries>),faceave[downcell](<mu^_col_c_mixture>),faceave[harmonic](<mu^_col_c_mixture>))" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid1_f_mixture> "faceif(facedelta(<boundaries>),faceave[downcell](<mu^_sid1_c_mixture>),faceave[harmonic](<mu^_sid1_c_mixture>))" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid2_f_mixture> "faceif(facedelta(<boundaries>),faceave[downcell](<mu^_sid2_c_mixture>),faceave[harmonic](<mu^_sid2_c_mixture>))" ON <allfaces> output # used in stress
      FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*(<mu^_col_f_mixture>+<mu^_sid1_f_mixture>+<mu^_sid2_f_mixture>)*(1.d0-<phi_f_bounded_species0>)" ON <allfaces> # used in rhie-chow
    ELSE_IF 0
      FACE_DERIVED <mu^_col_f_mixture> "faceave[harmonic](<mu^_col_c_mixture>)" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid1_f_mixture> "faceave[harmonic](<mu^_sid1_c_mixture>)" ON <allfaces> output # used in stress
      FACE_DERIVED <mu^_sid2_f_mixture> "faceave[harmonic](<mu^_sid2_c_mixture>)" ON <allfaces> output # used in stress
      FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*(<mu^_col_f_mixture>+<mu^_sid1_f_mixture>+<mu^_sid2_f_mixture>)*(1.d0-<phi_f_bounded_species0>)" ON <allfaces> # used in rhie-chow
    ELSE
      FACE_DERIVED <mu_col_f_<<species>>> "faceave[harmonic](<mu^_col_c_mixture>*<phi_bounded_<<species>>>*(1.d0-<phi_bounded_species0>))" ON <allfaces> output # used in stress
      FACE_DERIVED <mu_sid1_f_<<species>>> "faceave[harmonic](<mu^_sid1_c_mixture>*<phi_bounded_<<species>>>*(1.d0-<phi_bounded_species0>))" ON <allfaces> output # used in stress
      FACE_DERIVED <mu_sid2_f_<<species>>> "faceave[harmonic](<mu^_sid2_c_mixture>*<phi_bounded_<<species>>>*(1.d0-<phi_bounded_species0>))" ON <allfaces> output # used in stress
#     FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*(<mu_col_f_<<species>>>+<mu_sid1_f_<<species>>>+<mu_sid2_f_<<species>>>)/<phi_f_bounded_<<species>>>" ON <allfaces> # used in rhie-chow
#     FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*(<mu_col_f_<<species>>>+<mu_sid1_f_<<species>>>+<mu_sid2_f_<<species>>>)/<phi_f_bounded_harmonic_<<species>>>" ON <allfaces> # used in rhie-chow
#     FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*faceave[adjacentcells]((<mu^_col_c_mixture>+<mu^_sid1_c_mixture>+<mu^_sid2_c_mixture>)*<phi_bounded_<<species>>>)" ON <allfaces> # used in rhie-chow
# correction viscosity should only be from col
#     FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*faceave[adjacentcells](<mu^_col_c_mixture>*<phi_bounded_<<species>>>)" ON <allfaces> # used in rhie-chow
      FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>*faceave[harmonic](<mu^_col_c_mixture>*<phi_bounded_<<species>>>)" ON <allfaces> # used in rhie-chow
    END_IF
# ELSE
#   ERROR "single_species_viscosity cannot handle stress_method = version4_species yet"
  END_IF

# hack to check if varying <mu_f_correction_<<species>>> is causing problems
# FACE_LOCAL <mu_f_correction_<<species>>> "<mu_species0>" ON <allfaces> # used in rhie-chow

ELSE_IF {{ return string_test('<<stress_method>>','version1') }}
# split stress between phases using the simplest possible consistent partitioning
# here mu is not species specific, so is roughly proportional (or more) to phi
# the multiplier used in the u_f_{correction} calculation is the viscosity/phi, which has a conventional viscosity magnitude as phi -> 0

# viscosity methods for version1
  #REPLACEMENTS D "<<viscosity_method>>" W "einstein"
  REPLACEMENTS D "<<viscosity_method>>" W "morrisboulay99"
  #REPLACEMENTS D "<<viscosity_method>>" W "thomas65
  #REPLACEMENTS D "<<viscosity_method>>" W "quadratic" # for <<stress_method>> = version3
  #REPLACEMENTS D "<<viscosity_method>>" W "kriegerdougherty"

  IF {{ return string_test('<<species>>','species0') }}
  # for the fluid use a multiplier of mu
    CELL_DERIVED <mu_c_multiplier_<<species>>> [Pa.s] "<mu_species0>" ON <allcells>
  ELSE
  # different functions using this simple partitioning only affect the solid viscosity

    IF {{ return string_test('<<viscosity_method>>','einstein')}}
  # simplest einstein relationship
      CELL_DERIVED <mu_c_multiplier_<<species>>> [Pa.s] "3.5d0*<mu_species0>" ON <allcells>

    ELSE
  # methods that have a maximum total solids magnitude, and can be expressed as a function of total solid volume fraction
      NONE_CONSTANT <mu_phi_max_allsolids> "<phi_max_allsolids>"
      NONE_CONSTANT <mu_phi_tol> "<phi_tol>"
      CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output
      CELL_LOCAL <mu_c_multiplier_<<species>>> [Pa.s] "<mu_c_multiplier_allsolids>" ON <allcells>

      IF {{ return string_test('<<viscosity_method>>','morrisboulay99')}}
        NONE_CONSTANT <mu_K_s> 0.1d0
        CELL_DERIVED <mu_c_multiplier_allsolids> [Pa.s] "<mu_species0>*(1.d0+2.5d0/(1.d0-<mu_phi_norm_allsolids>)+<mu_K_s>*<mu_phi_norm_allsolids>/(<mu_phi_max_allsolids>*(1.d0-<mu_phi_norm_allsolids>)**2))" ON <allcells> output
      ELSE_IF {{ return string_test('<<viscosity_method>>','kriegerdougherty')}}
      	NONE_CONSTANT <mu_phi_max_allsolids> "<phi_max_allsolids>"
        NONE_CONSTANT <mu_phi_tol> "<phi_tol>"
        CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output # here <mu_phi_max_allsolids> is used to scale across the range
      	NONE_CONSTANT <n> "-2.5d0*<mu_phi_max_allsolids>"
        CELL_DERIVED <mu_c_multiplier_<<species>>> [Pa.s] "<mu_species0>*((1.d0-(1.d0-<mu_phi_norm_allsolids>)**<n>)/(<mu_phi_max_allsolids>*<mu_phi_norm_allsolids>*(1.d0-<mu_phi_norm_allsolids>)**<n>) + 1.d0)" ON <allcells> output

      ELSE
        ERROR "in single_species_viscosity: viscosity_method = <<viscosity_method>> not coded yet or unknown"
      END_IF
    END_IF

  END_IF

  # now construct viscosity and correction viscosity (multiplier) for faces (which tends to a finite value at phi->0 - ie, a non-specific viscosity)
  CELL_LOCAL <mu_c_<<species>>> "<mu_c_multiplier_<<species>>>*<phi_bounded_<<species>>>" ON <allcells> output
  FACE_DERIVED <mu_f_<<species>>> "faceave[harmonic](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
  FACE_DERIVED <mu_f_correction_<<species>>> "faceave[adjacentcells](<mu_c_multiplier_<<species>>>)" ON <allfaces> output # used in rhie-chow

ELSE # version2 or version3 methods, ie, phase specific

# viscosity methods for versions 2 and 3
  #REPLACEMENTS D "<<viscosity_method>>" W "einstein"
  REPLACEMENTS D "<<viscosity_method>>" W "morrisboulay99"
  #REPLACEMENTS D "<<viscosity_method>>" W "thomas65
  #REPLACEMENTS D "<<viscosity_method>>" W "quadratic" # for <<stress_method>> = version3
  #REPLACEMENTS D "<<viscosity_method>>" W "kriegerdougherty"

  IF {{ return string_test('<<stress_method>>','version3') }}

# no alternative viscosity_methods yet

    IF {{ return string_test('<<species>>','species0') }}
# this should be the viscosity increase within the fluid (same as each solid too) due to the presence of the particles, but without particle particle interactions
# einstein relationship applied to continuous phase, based on total solids present
      CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*(1.d0-<phi_bounded_<<species>>>))" ON <allcells>
    ELSE
# for each phase the viscosity is made from a single phase (dilute) component and an interaction (collisional) component
# each solution phase made from einstein viscosity, plus collision contributions from each solid phase (including itself)
# the single phase is the same as for the fluid phase
      CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_c_species0>" ON <allcells> # note, einstein relationship based on total solid volume fraction

# now add on collisional contributions, with a term for each possible pair of species interactions
# for now we base each pair interaction solely on a mixture interaction viscosity

# chose method
# quadratic method, minus the einstein dilute equation leaves a single quadratic coefficient, independent of particle radius
      IF {{ return string_test('<<viscosity_method>>','quadratic')}}
        NONE_CONSTANT <mu^_collision_coefficient2> [1] 6.d0 # 2nd order in phi coefficient for mixture viscosity
        NONE_CONSTANT <mu^_collision_mixture> [Pa.s] "<mu_species0>*<mu^_collision_coefficient2>" # default collision viscosity between two phases which can be overwritten for particular combinations

      ELSE_IF {{ return string_test('<<viscosity_method>>','polynomial')}}
# polynomial method
# here based on taylor expansion of kriegerdougherty using various phi_max's, and then removing the dilute component
# set polynomial order to be used (needs to be consistent with coefficients below)
# actually for high phi should be increasing this order above 6...
        REPLACEMENTS R "<<polynomial_max_order>>" W "6"
        IF 0
# from maxima with phi_max = 0.603:
# 592.5530492518616*phi^10+340.0518569582417*phi^9+194.1058561885225*phi^8+110.0636673821255*phi^7+
# 61.88195005260762*phi^6+34.40474764353966*phi^5+18.83437388021282*phi^4+10.07842702142503*phi^3+
# 5.197968490878939*phi^2+2.5*phi+1.0
          NONE_CONSTANT <mu^_collision_coefficient2> [1] 5.197968490878939d0
          NONE_CONSTANT <mu^_collision_coefficient3> [1] 10.07842702142503d0
          NONE_CONSTANT <mu^_collision_coefficient4> [1] 18.83437388021282d0
          NONE_CONSTANT <mu^_collision_coefficient5> [1] 34.40474764353966d0
          NONE_CONSTANT <mu^_collision_coefficient6> [1] 61.88195005260762d0
        ELSE
# from maxima with phi_max = 0.68:
# 276.2964187022961*phi^10+175.5902473995901*phi^9+110.7847746479888*phi^8+69.2723188603516*phi^7+
# 42.82288802276281*phi^6+26.07722136311526*phi^5+15.55483379554244*phi^4+9.001946366782008*phi^3+
# 4.963235294117647*phi^2+2.5*phi+1.0
          NONE_CONSTANT <mu^_collision_coefficient2> [1] 4.963235294117647d0
          NONE_CONSTANT <mu^_collision_coefficient3> [1] 9.001946366782008d0
          NONE_CONSTANT <mu^_collision_coefficient4> [1] 15.55483379554244d0
          NONE_CONSTANT <mu^_collision_coefficient5> [1] 26.07722136311526d0
          NONE_CONSTANT <mu^_collision_coefficient6> [1] 42.82288802276281d0
        END_IF
        CELL_DERIVED <mu_phi_bounded_allsolids> "1.d0-<phi_bounded_species0>" ON <allcells>
        CELL_DERIVED <mu^_collision_mixture> "0.d0" ON <allcells>
        {{ my $return_string = '';
          for my $n ( 2 .. string_eval('<<polynomial_max_order>>') ) {
            $return_string .= "VARIABLE <mu^_collision_mixture> '<mu^_collision_mixture>+(<mu^_collision_coefficient".$n.">*<mu_phi_bounded_allsolids>**(".scalar($n-2)."))'\n";
          }
          return $return_string;
        }}
        VARIABLE <mu^_collision_mixture> "(<mu^_collision_mixture>)*<mu_species0>"

      ELSE_IF {{ return string_test('<<viscosity_method>>','kriegerdougherty')}}
# kriegerdougherty direct
        CELL_DERIVED <mu_phi_bounded_allsolids> "1.d0-<phi_bounded_species0>" ON <allcells>
        CELL_LOCAL <mu_phi_max_allsolids> "0.603d0" ON <allcells> # this could be changed to be a function of local phi
        CELL_DERIVED <mu^_collision_mixture> "<mu_species0>*((1.d0-<mu_phi_bounded_allsolids>/<mu_phi_max_allsolids>)**(-2.5d0*<mu_phi_max_allsolids>)-(1.d0+2.5d0*<mu_phi_bounded_allsolids>))/(<mu_phi_bounded_allsolids>**2)" ON <allcells>

      ELSE_IF {{ return string_test('<<viscosity_method>>','morrisboulay99')}}
# morrisboulay99, except for the dilute contribution which is not quite the same but has been removed
        CELL_DERIVED <mu_phi_bounded_allsolids> "1.d0-<phi_bounded_species0>" ON <allcells>
        CELL_LOCAL <mu_phi_max_allsolids> "0.68d0" ON <allcells> # this could be changed to be a function of local phi
        NONE_CONSTANT <mu_K_s> 0.1d0 # multiplier in single_species_sid_pressure needs to be set correspondingly
        CELL_DERIVED <mu^_collision_mixture> "<mu_species0>*<mu_K_s>/((<mu_phi_max_allsolids>*(1.d0-<mu_phi_bounded_allsolids>/<mu_phi_max_allsolids>))**2)" ON <allcells>

      ELSE
        ERROR "viscosity_method = <<viscosity_method>> not known for stress_method = version3"
      END_IF

# calculate collisional viscosity contribution, expressed on a phase specific basis for both phases (ie, mu_collisional => mu^*phi1*phi2)
        {{ my $return_string = '';
          for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
            $return_string .= "CELL_DERIVED <mu^_collision_<<species>>_$species> '<mu^_collision_mixture>' ON <allcells>\n";
          }
          return $return_string;
        }}

# now add collisional contributions, noting that viscosity has been divided by phi_i under stress method 2 and 3
      {{ my $return_string = '';
        for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
          $return_string .= "VARIABLE <mu_c_<<species>>> '(<mu_c_<<species>>>)+(<mu^_collision_<<species>>_$species>*<phi_bounded_$species>)'\n";
        }
        return $return_string;
      }}
    END_IF

# in version2 the viscous stress divergence is phase specific, so the viscosity for each phase is roughly a constant as phi -> 0
# the multiplier used in the u_f_{correction} calculation is equal to the viscosity

  ELSE # version2 methods

    IF {{ return string_test('<<species>>','species0') }}
  # define the fluid stress, which is in version2 a mixture stress

      IF {{ return string_test('<<viscosity_method>>','einsteinsingle')}}
  # simplest einstein relationship, for a single phase
        CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*<phi_bounded_<<species>>>)" ON <allcells>
      ELSE_IF {{ return string_test('<<viscosity_method>>','einstein')}}
  # for more than one solid use fluid phi to calculate total
        CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*(1.d0-<phi_bounded_species0>))" ON <allcells>
      ELSE
    # methods that have a maximum total solids magnitude, and can be expressed as a function of total solid volume fraction
        NONE_CONSTANT <mu_phi_max_allsolids> "<phi_max_allsolids>"
        NONE_CONSTANT <mu_phi_tol> "<phi_tol>"

        IF {{ return string_test('<<viscosity_method>>','morrisboulay99')}}
          NONE_CONSTANT <mu_K_s> 0.1d0
          CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output # here <mu_phi_max_allsolids> is used to scale across the range
          CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*<mu_phi_norm_allsolids>/(1.d0-<mu_phi_norm_allsolids>)+<mu_K_s>*(<mu_phi_norm_allsolids>/(1.d0-<mu_phi_norm_allsolids>))**2)" ON <allcells> output
        ELSE_IF {{ return string_test('<<viscosity_method>>','kriegerdougherty')}}
          CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output # here <mu_phi_max_allsolids> is used to scale across the range
          CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*((<mu_phi_norm_allsolids>/(1.d0-<mu_phi_norm_allsolids>))**(2.5d0*<mu_phi_max_allsolids>))" ON <allcells> output
        ELSE_IF {{ return string_test('<<viscosity_method>>','thomas65')}}
          CELL_DERIVED <mu_phi_bounded_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)" output # here <mu_phi_max_allsolids> is used as a cut-off
          CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*<mu_phi_bounded_allsolids>+10.05d0*(<mu_phi_bounded_allsolids>)**2 + 0.00273d0*exp(16.6d0*<mu_phi_bounded_allsolids>))" ON <allcells> output
        ELSE
          ERROR "in single_species_viscosity: viscosity_method = <<viscosity_method>> not coded yet or unknown"
        END_IF
      END_IF

    ELSE
  # for these methods use the same viscosity across phases
      IF {{ return string_test('<<stress_method>>','zhang97') }}
  # only fluid viscosity applied to solid phases, zhang97 = balls
        CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>" ON <allcells> output
      ELSE
  # mixture viscosity applied to all phases, version2 = jackson98
        CELL_LOCAL <mu_c_<<species>>> [Pa.s] "<mu_c_species0>" ON <allcells> output
  # could also do drew76, no viscosity applied to solid phases...
      END_IF

    END_IF

  END_IF

# now construct viscosity on faces for use in stress tensor, as well as viscosity for use in u_f rhiechow interpolation (correction)
# note that for version2 the multiplier is actually just the viscosity - bad notation! - changed to correction viscosity
  FACE_DERIVED <mu_f_<<species>>> "faceave[harmonic](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
  FACE_LOCAL <mu_f_correction_<<species>>> "<mu_f_<<species>>>" ON <allfaces> # used in rhie-chow

END_IF
