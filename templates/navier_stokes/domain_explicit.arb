# this is the stokes equations equivalent of the domain file

# as <u[l=:]> is now a derived, the initial velocity must be explicitly set for <u[r=1,l=:]>
<<dim1comment>>VARIABLE <u[r=1,l=1]> "0.d0" ""
<<dim2comment>>VARIABLE <u[r=1,l=2]> "0.d0" "" 
<<dim3comment>>VARIABLE <u[r=1,l=3]> "0.d0" "" 

# include only the pressure variable as an unknown, with the velocity calculated later
INCLUDE "unknowns"
<<dim1comment>>VARIABLE <u[l=1]> CANCEL # these are now deriveds
<<dim2comment>>VARIABLE <u[l=2]> CANCEL 
<<dim3comment>>VARIABLE <u[l=3]> CANCEL 

# the stress is calculated completely explicitly
INCLUDE "total_stress" R "<u[l" W "<u[r=1,l" R "DERIVED" W "TRANSIENT" R "<ugrad_f[l" W "<ugrad_f[r=1,l" R "<tau[" W "<tau[r=1,"
# the last fancy replacement targets setting just the initial values of the velocity gradient to zero - actually not necessary or a good idea if initial velocity field is nonzero
#INCLUDE "total_stress" R "<u[l" W "<u[r=1,l" R "DERIVED" W "TRANSIENT" R "<ugrad_f[l" W "<ugrad_f[r=1,l" R "<tau[" W "<tau[r=1," R ']> "facegrad' W ']> "0.d0" "facegrad'

# calculate p_error and dynamic_forces
INCLUDE "p_error"

# calculate the momentum fluxes as transients
# TODO: this file will be able to also handle the navier-stokes equations once an explicit <u_f> is saved
<<navierstokescomment>>ERROR "the template file domain_explicit cannot handle the navier-stokes equations yet"
<<navierstokescomment>>INCLUDE "advection_flux"
INCLUDE "momentum_flux" R "<J_f[l" W "<J_f[r=1,l" R "DERIVED" W "TRANSIENT" R "<tau[" W "<tau[r=1,"

# this is an explicit update of the velocity
<<dim1comment>>CELL_LOCAL <u_explicit[l=1]> "<u[r=1,l=1]>-(<dt>/<rho>)*(celldiv(<J_f[r=1,l=1]>)-<dynamic_force_c[l=1]>)" ON <domain>
<<dim2comment>>CELL_LOCAL <u_explicit[l=2]> "<u[r=1,l=2]>-(<dt>/<rho>)*(celldiv(<J_f[r=1,l=2]>)-<dynamic_force_c[l=2]>)" ON <domain>
<<dim3comment>>CELL_LOCAL <u_explicit[l=3]> "<u[r=1,l=3]>-(<dt>/<rho>)*(celldiv(<J_f[r=1,l=3]>)-<dynamic_force_c[l=3]>)" ON <domain>

# within the domain, update the velocity explicitly
# on the walls, set the velocity to zero
# at any remaining boundaries, set the velocity to be that of the neighbouring domain cell
<<dim1comment>>CELL_DERIVED <u[l=1]> "cellif(celldelta(<domain>),<u_explicit[l=1]>,cellif(facedelta(<walls>),0.d0,cellave(faceave[downcell](<u_explicit[l=1]>))))" ON <allcells>
<<dim2comment>>CELL_DERIVED <u[l=2]> "cellif(celldelta(<domain>),<u_explicit[l=2]>,cellif(facedelta(<walls>),0.d0,cellave(faceave[downcell](<u_explicit[l=2]>))))" ON <allcells>
<<dim3comment>>CELL_DERIVED <u[l=3]> "cellif(celldelta(<domain>),<u_explicit[l=3]>,cellif(facedelta(<walls>),0.d0,cellave(faceave[downcell](<u_explicit[l=3]>))))" ON <allcells>

# now just use previous file to calculate interpolated face centred velocity fluxes
INCLUDE "u_f"

# previous idea based on simpler transient timestep that 
# # there are too many changes to u_f to warrant inclusion, so just bring in the following
# <<dim1comment>>FACE_LOCAL <u_f_vect[l=1]> "faceave[<<reflect=1>>](<u[l=1]>)"
# <<dim2comment>>FACE_LOCAL <u_f_vect[l=2]> "faceave[<<reflect=2>>](<u[l=2]>)"
# <<dim3comment>>FACE_LOCAL <u_f_vect[l=3]> "faceave[<<reflect=3>>](<u[l=3]>)"
# FACE_LOCAL <u_f_{raw}> "dot(<u_f_vect[l=:]>,<facenorm[l=:]>)" ON <allfaces> # volume (velocity) transport

# # note that as <dt> is limited by the explicit timestep constraint anyway, this condition also ensures that the correction velocity scales with the viscous term
# FACE_LOCAL <u_f_{correction}> "-<C_{Rhie-Chow}>*<dt>*<p_error>/<rho>" ON <domainfaces>
# CONSTANT <C_{Rhie-Chow}> 5.d0 # increase this for the explicit method from 1.d0
# # final face velocity
# FACE_DERIVED <u_f> "<u_f_{raw}>+faceif(facedelta(<domainfaces>),<u_f_{correction}>,0.d0)" ON <allfaces> # volume (velocity) transport

# include just the continuity equation
INCLUDE "conservation"
<<dim1comment>>VARIABLE <momentum[l=1]> CANCEL
<<dim2comment>>VARIABLE <momentum[l=2]> CANCEL
<<dim3comment>>VARIABLE <momentum[l=3]> CANCEL

# for walls use the following BC to be consistent with the implicit version
# FACE_EQUATION <p_walls> "<dynamic_force_f>" ON <walls>

# timestep has to be modified to include the explicit viscous stability condition
CONSTANT <c_mu_explicit> 0.10d0 # multiplier for explicit viscous term stability timestep constraint - this is a conservative value
# based on celldxmax
#CONSTANT <celldxmaxmin> "cellmin(<celldxmax>,region=<domain>)" # minimum of the maximum cell dimensions
#CONSTANT <dt_mu_explicit> "<c_mu_explicit>*<rho>*<celldxmaxmin>^2/<mu>" stepoutput
# based on facedx, upon which <u_mf_{vis}> is also based
# defining these as locals to avoid lousy substitution message - alternative is to cancel <dt> and <dt_initial> and redefine here, or reorder (requires another include though)
NONE_LOCAL <facedxmin> "facemin(<facedx>,region=<domainfaces>)" # minimum of non-zero <facedx>'s
NONE_LOCAL <dt_mu_explicit> "<c_mu_explicit>*<rho>*<facedxmin>^2/<mu>" stepoutput
CONSTANT <dt_initial> [] "<dt_mu_explicit>" stepoutput
#CONSTANT <CFL_initial> 0.25d0
#CONSTANT <dt_CFL> "<CFL_initial>*<celldxmaxmin>/<u_av>" stepoutput # initial timestep based on cell dimension, expecting a velocity of magnitude <u_av>
#CONSTANT <dt_initial> [] "nonemin(<dt_CFL>,<dt_mu_explicit>)" stepoutput
