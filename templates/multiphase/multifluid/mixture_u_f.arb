MARKDOWN
Here we create a better estimate of the correction velocity, using ingredients however from the navier_stokes u_f file, done with replacements

In this version we applied a correction to all velocity components based on a mixture equation, and then corrections to each phase based on algebraic slip equations.
END_MARKDOWN

# use this to debug
REPLACEMENTS D '<<debug>>' W '1'
REPLACEMENTS R '<<domainfaces>>' W '<domainfaces>'

IF <<debug>>
  OVERRIDE_OPTIONS output
END_IF

# cancel the previous correction velocities so that they can be calculated in the correct order
{{
  my $return_string='';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "VARIABLE <u_f_{correction}_$species> CANCEL\n";
    $return_string .= "VARIABLE <u_f_$species> CANCEL\n";
  }
  return $return_string;
}}

IF 1 # chose to calculate this regardless of whether it is used or not - for output purposes
  # find total pressure and DeltaA based on total pressure
  CELL_LOCAL <p_total> "<p_species0>" ON <allcells>
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
      $return_string .= "VARIABLE <p_total> '<p_total>+<p_$species>'\n";
    }
    return $return_string;
  }}
END_IF

IF 0
  # find total pressure and DeltaA based on total pressure
  # TODO: wrap both of these in a template, called with <<species>> = total and then <<species>> = $species
  FACE_DERIVED <p_f_total> "<p_total>" ON <allfaces> output
  CELL_LOCAL <celldivgrad_p_total[l=<<i>>]> "celldivgrad[l=<<i>>](<p_f_total>)" ON <allcells> output
  FACE_DERIVED <u_f_DeltaA_total> "-facegrad[adjacentcells](<p_total>)+faceave[adjacentcells](dot(<celldivgrad_p_total[l=:]>,cellave[lastface](<facedxunit[l=:]>)))" ON <allfaces> output

  # now find DeltaA (slip) for each disperse species
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
      $return_string .= "FACE_DERIVED <p_f_$species> '<p_$species>' ON <allfaces> output\n";
      $return_string .= "CELL_LOCAL <celldivgrad_p_$species"."[l=<<i>>]> 'celldivgrad[l=<<i>>](<p_$species>)' ON <allcells> output\n";
      $return_string .= "FACE_DERIVED <u_f_DeltaA_$species> '-facegrad[adjacentcells](<p_$species>)+faceave[adjacentcells](dot(<celldivgrad_p_$species"."[l=:]>,cellave[lastface](<facedxunit[l=:]>)))' ON <<domainfaces>> output\n";
    }
    return $return_string;
  }}
ELSE
# now find DeltaA (slip) for each species
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      if (0) { # try limiting p_f to between adjacent values - no stability improvement really
        $return_string .= "FACE_DERIVED <p_f_arith_$species> '<p_$species>' ON <allfaces> output\n";
        $return_string .= "FACE_DERIVED <p_f_max_$species> 'cellmax(<p_$species>,region=<adjacentfaceicells>)' ON <allfaces> output\n";
        $return_string .= "FACE_DERIVED <p_f_min_$species> 'cellmin(<p_$species>,region=<adjacentfaceicells>)' ON <allfaces> output\n";
        $return_string .= "FACE_DERIVED <p_f_$species> 'faceif(<p_f_arith_$species>-<p_f_max_$species>,<p_f_max_$species>,faceif(<p_f_min_$species>-<p_f_arith_$species>,<p_f_min_$species>,<p_f_arith_$species>))' ON <allfaces> output\n";
      } elsif (0) { # fluid pressure normally, but base solid pressures on phi_f
        if ($species eq 'species0') {
          $return_string .= "FACE_DERIVED <p_f_$species> '<p_$species>' ON <allfaces> output\n";
        } else {
          if (1) {
# use averaged multiplier
            $return_string .= "FACE_DERIVED <p_f_$species> '<phi_f_bounded_$species>*<p_osmotic_multiplier_$species>' ON <allfaces> output\n";
          } else {
# calculate csllimited directly
            $return_string .= "FACE_DERIVED <p_osmotic_phi_f_norm_$species> 'facemin(<phi_f_pos_$species>,<p_osmotic_phi_max_$species>-<p_osmotic_phi_tol>)/<p_osmotic_phi_max_$species>' ON <allfaces> output\n";
            $return_string .= "FACE_DERIVED <p_osmotic_Z_f_$species> [Pa] '(1.d0+<p_osmotic_phi_f_norm_$species>+<p_osmotic_phi_f_norm_$species>^2-<p_osmotic_phi_f_norm_$species>^3)/((1.d0-<p_osmotic_phi_f_norm_$species>)^3)' ON <allfaces>\n";
            $return_string .= "FACE_DERIVED <p_f_$species> [Pa] '<phi_f_$species>*<k_boltzmann>*<T>*<p_osmotic_Z_f_$species>/<V_$species>' ON <allfaces> output\n";
          }
        }
      } else { # standard way
        $return_string .= "FACE_DERIVED <p_f_$species> '<p_$species>' ON <allfaces> output\n";
      }
      if ($species eq 'species0' || 1) { # change this to 1 to always use no phi weighting
# no weighting by phi for species0
        $return_string .= "CELL_LOCAL <celldivgrad_p_$species"."[l=<<i>>]> 'celldivgrad[l=<<i>>](<p_$species>)' ON <allcells> output\n";
        $return_string .= "FACE_DERIVED <u_f_DeltaA_$species> '-facegrad[adjacentcells](<p_$species>)+faceave[adjacentcells](dot(<celldivgrad_p_$species"."[l=:]>,cellave[lastface](<facedxunit[l=:]>)))' ON <<domainfaces>> output\n";
      } else {
# weighted by phi for disperse species
        $return_string .= "CELL_LOCAL <celldivgrad_p_dphi_$species"."[l=<<i>>]> 'celldivgrad[l=<<i>>](<p_$species>)/<phi_bounded_$species>' ON <allcells> output\n";
#       $return_string .= "FACE_DERIVED <u_f_DeltaA_$species> '-facegrad[adjacentcells](<p_$species>)+<phi_f_bounded_harmonic_$species>*faceave[adjacentcells](dot(<celldivgrad_p_dphi_$species"."[l=:]>,cellave[lastface](<facedxunit[l=:]>)))' ON <<domainfaces>> output\n";
        $return_string .= "FACE_DERIVED <u_f_DeltaA_$species> '-facegrad[adjacentcells](<p_$species>)+<phi_f_bounded_adjacent_$species>*faceave[adjacentcells](dot(<celldivgrad_p_dphi_$species"."[l=:]>,cellave[lastface](<facedxunit[l=:]>)))' ON <<domainfaces>> output\n";
      }
    }
    return $return_string;
  }}
  FACE_DERIVED <u_f_DeltaA_total> "0.d0" ON <<domainfaces>>
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "VARIABLE <u_f_DeltaA_total> '(<u_f_DeltaA_total>)+<u_f_DeltaA_$species>'\n";
    }
    return $return_string;
  }}
END_IF

# calculate alpha and alpha_{transient} mixture coefficients
FACE_DERIVED <u_f_alpha_mixture> '0.d0' ON <<domainfaces>> output
FACE_DERIVED <u_f_alpha_{transient}_mixture> '0.d0' ON <<domainfaces>> output
{{
  my $return_string='';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "VARIABLE <u_f_alpha_mixture> '<u_f_alpha_mixture>+<phi_f_bounded_$species>*<u_rf_{vis}_$species>'\n";
    if (string_eval('<<transientnavierstokes>>')) {
      $return_string .= "VARIABLE <u_f_alpha_mixture> '<u_f_alpha_mixture>+<phi_f_bounded_$species>*<u_rf_{transient}_$species>'\n";
      $return_string .= "VARIABLE <u_f_alpha_{transient}_mixture> '<u_f_alpha_{transient}_mixture>+<phi_f_bounded_$species>*<u_rf_{transient}_$species>'\n";
    }
    if (string_test('<<navierstokescomment>>','')) {
      $return_string .= "VARIABLE <u_f_alpha_mixture> '<u_f_alpha_mixture>+<phi_f_bounded_$species>*<u_rf_{adv}_$species>'\n";
    }
  }
  return $return_string;
}}

# calculate mixture correction velocity
FACE_DERIVED <u_f_{correction}_mixture> "(<C_{Rhie-Chow}>*<u_f_DeltaA_total>+<u_f_alpha_{transient}_mixture>*<u_f_{correction}_mixture[r=1]>)/<u_f_alpha_mixture>" ON <<domainfaces>> output
FACE_TRANSIENT <u_f_{correction}_mixture[r=1]> "0.d0" "<u_f_{correction}_mixture>" ON <<domainfaces>>

GENERAL_REPLACEMENTS D "<<phiufcorrection>>" W "0"
IF {{ return (!(string_eval('<<phiufcorrection>>'))) }}
# non phiuf way
  # calculate the slip correction velocities (slip relative to fluid velocities) for the disperse phases
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
#     $return_string .= "FACE_DERIVED <u_f_phidbeta^_$species> 'faceave[adjacentcells](<phi_bounded_species0>/<beta^_$species"."_species0>)' ON <<domainfaces>>\n";
#     $return_string .= "FACE_DERIVED <u_f_phidbeta^_$species> 'faceave[harmonic](<phi_bounded_species0>/<beta^_$species"."_species0>)' ON <<domainfaces>>\n";
#     $return_string .= "FACE_DERIVED <phiu_f_slip_{correction}_$species> '<u_f_DeltaA_$species>*<u_f_phidbeta^_$species>' ON <<domainfaces>>\n";
#     $return_string .= "FACE_DERIVED <u_f_phidbeta^_r_$species> 'faceave[adjacent](<beta^_$species"."_species0>/<phi_bounded_species0>)' ON <<domainfaces>>\n";
      $return_string .= "FACE_DERIVED <u_f_phidbeta^_r_$species> 'faceave[harmonic](<beta^_$species"."_species0>/<phi_bounded_species0>)' ON <<domainfaces>>\n";
      $return_string .= "FACE_DERIVED <phiu_f_slip_{correction}_$species> '<u_f_DeltaA_$species>/<u_f_phidbeta^_r_$species>' ON <<domainfaces>>\n";
      $return_string .= "FACE_DERIVED <u_f_slip_{correction}_$species> '<phiu_f_slip_{correction}_$species>/<phi_f_bounded_harmonic_$species>' ON <<domainfaces>>\n";
#     $return_string .= "FACE_DERIVED <u_f_slip_{correction}_$species> '<phiu_f_slip_{correction}_$species>/<phi_f_bounded_adjacent_$species>' ON <<domainfaces>>\n";
  # trialling smaller correction velocity
  #   $return_string .= "FACE_DERIVED <u_f_slip_{correction}_$species> '<phiu_f_slip_{correction}_$species>' ON <<domainfaces>>\n";
    }
    return $return_string;
  }}

  # calculate the fluid and disperse phase correction velocities
  FACE_DERIVED <u_f_{correction}_species0> "<u_f_{correction}_mixture>" ON <<domainfaces>>
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
  # smaller correction velocity
  #   $return_string .= "VARIABLE <u_f_{correction}_species0> '(<u_f_{correction}_species0>)-<phi_f_bounded_harmonic_$species>*<u_f_slip_{correction}_$species>'\n";
      $return_string .= "VARIABLE <u_f_{correction}_species0> '(<u_f_{correction}_species0>)-<phiu_f_slip_{correction}_$species>'\n";
      $return_string .= "FACE_DERIVED <u_f_{correction}_$species> '(<u_f_{correction}_species0>)+<u_f_slip_{correction}_$species>' ON <<domainfaces>>\n";
    }
    return $return_string;
  }}

ELSE
# trying to apply phi*u correction
# # firstly all phases get mixture correction
# {{
#   my $return_string='';
#   for my $species (string_eval('<<multifluid_species_list>>','list')) {
#     $return_string .= "FACE_DERIVED <u_f_$species> '<u_f_{raw}_$species>+faceif(facedelta(<domainfaces>),<u_f_{correction}_mixture>,0.d0)' ON <allfaces>\n";
#   }
#   return $return_string;
# }}

# now to calculate the individual phase phiu corrections which are added separately
# disperse phase slip phiu corrections
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
      $return_string .= "FACE_DERIVED <u_f_phidbeta^_$species> 'faceave[adjacentcells](<phi_bounded_species0>/<beta^_$species"."_species0>)' ON <<domainfaces>>\n";
      $return_string .= "FACE_DERIVED <phiu_f_slip_{correction}_$species> '<u_f_DeltaA_$species>*<u_f_phidbeta^_$species>' ON <<domainfaces>>\n";
    }
    return $return_string;
  }}
# fluid phase phiu correction
  FACE_DERIVED <phiu_f_{correction}_species0> '0.d0' ON <<domainfaces>>
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
      $return_string .= "VARIABLE <phiu_f_{correction}_species0> '<phiu_f_{correction}_species0>+<phiu_f_slip_{correction}_$species>'\n";
    }
    return $return_string;
  }}
  VARIABLE <phiu_f_{correction}_species0> '-<phi_f_bounded_species0>*(<phiu_f_{correction}_species0>)'
# disperse phase phiu corrections
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
      $return_string .= "FACE_DERIVED <phiu_f_{correction}_$species> '<phiu_f_slip_{correction}_$species>+<phi_f_bounded_harmonic_$species>*<phiu_f_{correction}_species0>/<phi_f_bounded_species0>' ON <<domainfaces>>\n";
    }
    return $return_string;
  }}

# define the mixture correction velocities for all phases to also be applied to u_f
  {{
    my $return_string='';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "FACE_DERIVED <u_f_{correction}_$species> '<u_f_{correction}_mixture>' ON <<domainfaces>>\n";
    }
    return $return_string;
  }}
END_IF

# redefine final velocity for all species
{{
  my $return_string='';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "FACE_DERIVED <u_f_$species> '<u_f_{raw}_$species>+faceif(facedelta(<domainfaces>),<u_f_{correction}_$species>,0.d0)' ON <allfaces>\n";
  }
  return $return_string;
}}

IF <<debug>>
  INCLUDE "u_f_vector"
  INCLUDE "u_f_vector" R '<<component>>' W '_{raw}'
  INCLUDE "u_f_vector" R '<<component>>' W '_{correction}' R '<allfaces>' W '<<domainfaces>>'

  IF {{ return (!(string_eval('<<phiufcorrection>>'))) }}
    {{
      my $return_string='';
      for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
        $return_string .= "FACE_OUTPUT <u_f_slip_{correction}_visualise_$species"."[l=<<i>>]> '<u_f_slip_{correction}_$species>*<facenorm[l=<<i>>]>' ON <<domainfaces>>\n";
        $return_string .= "FACE_OUTPUT <phiu_f_slip_{correction}_visualise_$species"."[l=<<i>>]> '<phiu_f_slip_{correction}_$species>*<facenorm[l=<<i>>]>' ON <<domainfaces>>\n";
      }
      return $return_string;
    }}
  ELSE
    {{
      my $return_string='';
      for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
        $return_string .= "FACE_OUTPUT <phiu_f_slip_{correction}_visualise_$species"."[l=<<i>>]> '<phiu_f_slip_{correction}_$species>*<facenorm[l=<<i>>]>' ON <<domainfaces>>\n";
      }
      for my $species (string_eval('<<multifluid_species_list>>','list')) {
        $return_string .= "FACE_OUTPUT <phiu_f_{correction}_visualise_$species"."[l=<<i>>]> '<phiu_f_{correction}_$species>*<facenorm[l=<<i>>]>' ON <<domainfaces>>\n";
      }
      return $return_string;
    }}
  END_IF
  FACE_OUTPUT <u_f_{correction}_visualise_mixture[l=<<i>>]> '<u_f_{correction}_mixture>*<facenorm[l=<<i>>]>' ON <<domainfaces>>

# turn some species specific outputs on
# at the same time, expand the region of the velocity correction related variables to be <<domainfaces>> rather than <domainfaces> to enable visualisation
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "VARIABLE <phiu_f_$species> output\n";
      $return_string .= "VARIABLE <u_f_{raw}_$species> output\n";
      $return_string .= "VARIABLE <u_f_{correction}_$species> ON <<domainfaces>> output\n";
      $return_string .= "VARIABLE <phi_f_bounded_$species> output\n";
      $return_string .= "VARIABLE <phi_f_bounded_adjacent_$species> output\n";
      $return_string .= "VARIABLE <phi_bounded_$species> output\n";
      $return_string .= "VARIABLE <phi_f_adv_$species> output\n";
      $return_string .= "VARIABLE <u_f_$species> output\n";
      $return_string .= "VARIABLE <u_rf_{vis}_$species> ON <<domainfaces>> output\n";
      $return_string .= "VARIABLE <u_rf_{adv}_$species> ON <<domainfaces>> output\n";
      $return_string .= "VARIABLE <dynamic_force_f_$species> ON <<domainfaces>> output\n";
    }
    return $return_string;
  }}

  IF <<transientnavierstokes>>
    {{
      my $return_string = '';
      for my $species (string_eval('<<multifluid_species_list>>','list')) {
        $return_string .= "VARIABLE <u_f_{correction}_$species"."[r=1]> ON <<domainfaces>> output\n";
        $return_string .= "VARIABLE <u_rf_{transient}_$species> ON <<domainfaces>> output\n";
        $return_string .= "VARIABLE <u_$species"."[l=1,r=1]> output\n";
      }
      return $return_string;
    }}
  END_IF
END_IF

IF <<debug>>
  OVERRIDE_OPTIONS
END_IF
