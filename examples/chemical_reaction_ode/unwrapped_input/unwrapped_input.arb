# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: src/free_surface_functions.f90
EXTERNALS "src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: chemical_reaction_ode.arb
#(hash added during unwrap)INCLUDE_WORKING "chemical_reaction_ode.arb"
#(comment generated during unwrap) not adding new include_path .., as it is already on the top of include_path array = ..
   #(comment generated during unwrap)++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   #(comment generated during unwrap) the following is INCLUDED from /home/daltonh/fortran/arb/testsuite/arb_master/build/../chemical_reaction_ode.arb without any search/replace combinations
   # this file introduces the basics of solving a transient problem
   # it is 0D, hence, there is no distribution of quantities throughout space, and hence, there is no msh file is used and all variables are 'NONE' centred
   
   # to run this simulation you need to:
   # 1) cp this file to the working directory, ie, from the simulation working directory:
   #   cp examples/chemical_reaction_ode/chemical_reaction_ode.arb .
   # 2) run it using
   #   ./arb chemical_reaction_ode.arb
   # if all goes well you should get a message saying 'SUCCESS'
   # 3) view the 0D results using plot or plot_step.  For the former type
   #   ./plot
   # and then check some boxes to see various outputs as a function of time <t>
   
   VERSION 0.50 # the version of syntax used in this file
   
   # the following strings describe the simulation and are passed to the output files
   INFO_TITLE "Example first-order chemical reaction"
   INFO_DESCRIPTION "Demonstrates how to solve 0D transient problems:  In this case a chemical reaction A + B <-> AB with forward and reverse kinetic constants k_a and k_d"
   INFO_AUTHOR "Dalton Harvie"
   INFO_DATE "8/3/15" # interpreted as the last modification date
   
   TRANSIENT_SIMULATION # tell arb that we will be stepping forwards (probably in time).  We can actually omit this keyword as arb will guess that it is a transient simulation as TRANSIENT variables are defined below.  During a transient simulation arb updates a variable <timestep> as we progress, solving for every unknown at each timestep.
   
   # now to set up the equations to solve
   NONE_UNKNOWN <c_AB> "0.d0" magnitude=<c_B> # only one unknown and one equation here.  The expression for this unknown is its initial value (as this is a transient simulation).  Also, <c_AB> needs a characteristic magnitude for the solver to be able to solve it - this can be set by: a) specifying a value (ie magnitude=10.d0); b) allowing the initial value to set the magnitude (which is the default behaviour); or c) using a none centred constant to set the magnitude.  The default behaviour, which is to calculate the value based on the variable's initial value won't work for this simulation as the initial value of this variable is 0, and which gives no indication of how large this variable will become.  Instead here we set the magnitude of <c_AB> to the intial concentration of B which is stored as the none-centred variable <c_B>.
   NONE_DERIVED <c_A> "<c_A_0>-<c_AB>" # using a mass balance <c_A> can be expressed in terms of <c_AB>, so write it as a derived (deriveds are just a way to store commonly used functions of the unknowns).  An alternative for this problem would be to have <c_A> as a second unknown, with a corresponding second equation expressing this mass balance - that is, <c_A>-<c_A_0>-<c_AB> as an equation to solve (ie, make equal to zero)
   NONE_CONSTANT <c_A_0> 1.d0 # initial concentration of <c_A>, set as a constant
   NONE_CONSTANT <c_B> 10.d0 # for this reaction we assume that the concentration of B is a constant, regardless of the amount of AB that has formed.
   NONE_DERIVED <r_1> "<k_a>*<c_A>*<c_B>-<k_d>*<c_AB>" # this is the net forward rate of the reaction.  All variable types are evaluated as a group, in the order that they are defined.  So, in this file the derived <c_A> would be the first derived to be evaluated, followed by <r_1>.  So, if <r_1> depends on <c_A> (as it does here), its definition must go below that of <c_A>.  Note that each type of variable is evaluated as a separate group - that is, all constants are evaluated as a group, all deriveds are evaluated as a group, all equations are evaluated as a group etc.  So a constant that appears in <r_1> doesn't necessarily have to appear before the expression for <r_1>, as constants are evaluated (as a group) before the deriveds.
   NONE_CONSTANT <k_a> 1.d0 # constants that are equal to numerical values can appear anywhere within the file
   NONE_CONSTANT <k_d> 1.d-1 # 1.d-1 is the same as 1.e-1 notation, but specifies double precision variables.  Using double precision notation isn't really necessary, but is good practice in my opinion.
   NONE_EQUATION <c_1 equation> "(<c_AB>-<c_AB[r=1]>)/<dt>-<r_1>" # finally, this is the equation to solve.  Note that in this file we have one unknown (<c_AB>) and one equation (this one) - that is the same number of unknowns as equations.  This is the number one rule of performing simulations, that the number of unknowns equals the number of equations.
   
   # now we set up a simple timestepping procedure, which uses a constant timestep
   NONE_CONSTANT <dt> 0.01d0 # a constant timestep is implied (in this case, a very large one that produces poor accuracy results)
   NONE_TRANSIENT <c_AB[r=1]> "0.d0" "<c_AB>" # to calculate the derivative of AB at each point in time, we'll have to remember the concentration at the previous timestep, so store it in a transient variable that is updated at the start of each timestep.  You can think of transient variables as constants that are evaluated once (at the start of) every timestep.  Hence, computationally they are quite cheap to calculate, and do not depend on the current unknown variables that we are trying to find (if they do refer to unknown or derived variables, then these will be the values from the previous timestep).
   NONE_TRANSIENT <t> "0.d0" "<t[r=1]>+<dt>" # although time (<t>) doesn't appear in the single equation, we want to calculate it for plotting purposes.
   NONE_TRANSIENT <t[r=1]> "<t>-<dt>" "<t>" # and to calculate time, it is necessary to store the time of the previous timestep so that we can use it in the update process for <t>.  Note that any expression, including those for the transient variables, cannot refer to themselves.  Here this is the only reason why we need to store the previous time value, so that we can use it in the update to <t> as given above.
   # an alternative to the above two lines would just be to calculate <t> based on the current <timestep>, as in "<dt>*<timestep>", however this doesn't generalise to dynamic timestepping where <dt> varies.
   
   TIMESTEPMAX 100 # specify the maximum number of timesteps to complete.  There are much nicer ways of telling a simulation to stop (eg, at a specific time), but this is the simplest one.
   
   # now for comparison purposes output we'll also output the analytical solution to this problem
   NONE_CONSTANT <c_1> "<k_a>*<c_A_0>*<c_B>" # constants can be defined using expressions (of other constants) as well as directly as numerical values.
   NONE_CONSTANT <c_2> "<k_a>*<c_B>-<k_d>"
   NONE_OUTPUT <c_AB_analytical> "<c_1>/<c_2>*( 1.d0 - exp(-<c_2>*<t>) )" # output variables are only evaluated when output files are written, and are handy for expressing simlation results in terms of things that we might be measureing or are interested in.
   #(comment generated during unwrap) INCLUDE finished for ../chemical_reaction_ode.arb
   #(comment generated during unwrap)--------------------------------------------------------
##################################################################################
