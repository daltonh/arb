MARKDOWN
Setup things needed for transient flow
This file works for either dynamic or constant timestepping
Designed to be called by either transient_constant_setup (linked to transient_setup) or transient_dynamic_setup
String replacements default to constant timestepping, or if dynamic timestepping is specified, explicit dynamic timestepping
Choice can be made by performing replacements when calling
END_MARKDOWN

# first set global replacements strings that specify a transient simulation, and overwrite what is specified in default_string_replacements
GENERAL_OPTIONS transientsimulation
GLOBAL_REPLACEMENTS R "<<transientnavierstokes>>" W "1" R "<<transientnavierstokescomment>>" W "" R "<<steadystatenavierstokescomment>>" W "#"

# <dt_initial> is used to set the intial timestep during dynamic timestepping or constant timestep otherwise

CONSTANT <t_end> [] 1.d2 # time for simulation to stop
CONSTANT <celldxave> "cellsum(<celldxmax>,region=<domain>)/cellsum(1.d0,region=<domain>)" # average cell dimension
CONSTANT <CFL_initial> 1.d-2 # enter a CFL number to set the initial timestep (roughly) - depending on the geometry of cells and non-uniformity of mesh, this may significantly underestimate the actual CFL that results - ie, you may need to choose a smaller number 
CONSTANT <dt_initial> [] "<CFL_initial>*<celldxave>/<u_av>" # initial timestep based on cell dimension, expecting a velocity of magnitude <u_av>
CONSTANT <CFL_out> 10.d0 # one way of entering the time between output is based on how many times a cell should be flushed between output, based on the average inlet velocity
CONSTANT <dt_out> [] "<CFL_out>*<celldxave>/<u_av>" # initial timestep based on cell dimension, expecting a velocity of magnitude <u_av>
#CONSTANT <dt_out> [] "<t_end>/50.d0" # time between output

# the default is for constant as opposed to dynamic timestepping
# change this by calling with <<dynamictimestep>> = 1
REPLACEMENTS D "<<dynamictimestep>>" W "0"

#---------------------------------------------------------------------------------------------------------
# dynamic timestepping
IF <<dynamictimestep>>

# dynamic timestep constants
  CONSTANT <dt_increase> 1.2d0
  CONSTANT <dt_max> "<dt_initial>*1.d4"
  CONSTANT <dt_min> "<dt_initial>*1.d-3"
  CONSTANT <CFL_max> 0.25d0

# by default there is an explicit newtstep timestep limitation that changes the timestep based on the number of newtsteps required to converge the last iteration
# to remove this restraint set <<newtsteptimestepping>> = 0
  REPLACEMENTS D "<<newtsteptimestep>>" W "1"
  IF <<newtsteptimestep>>
    CONSTANT <dt_decrease> 0.7d0
    CONSTANT <newtstepdtlimiterlow> 4.d0 # explicitly calculated timestep is only increased if <newtstep[r=1]> is <= than this value
    CONSTANT <newtstepdtlimiterhigh> 8.d0 # explicitly calculated timestep is decreased if <newtstep[r=1]> is > than this value
    NONE_TRANSIENT <newtstep[r=1]> "0.d0" "<newtstep>" # we save the previous timestep <newtstep> for the above explicit timestep calculation
    NONE_TRANSIENT <dt_newtstep_increase[r=1]> "1.d0" "noneif(<newtstep[r=1]>-<newtstepdtlimiterhigh>,<dt_decrease>,noneif(<newtstep[r=1]>-<newtstepdtlimiterlow>,1.d0,<dt_increase>))" # apply this to the previous timestep to keep newtstep roughly between high/low ranges
  ELSE
    NONE_LOCAL <dt_newtstep_increase[r=1]> "<dt_increase>" # placeholder for nonnewtsteplimited timestepping
  END_IF

  NONE_TRANSIENT <dt[r=1]> "<dt_initial>" "<dt>" stepoutput
  FACE_TRANSIENT <u_f[r=1]> "0.d0" "<u_f>" ON <allfaces> # don't actually need this for implicit timestepping, but it is used in input files for some of the problems for output, so in the interests of not breaking things...

# the default is for explicit timestepping, but implicit can also be enabled by reversing the following strings
  REPLACEMENTS D "<<implicittimestep>>" W "0"

  IF <<implicittimestep>>
# implicit
# note, a newtstepmax may be applied to <dt_target> within u_f.arb (unfortunately this must be done after <u_f> derived has been calculated, hence, newtstepmax can't be applied here)
    INCLUDE "CFL_number"
# straight minimum
# advantage of straight minimum is that provided convergence is achieved the CFL constraint will be rigorously obeyed
    NONE_LOCAL <dt_target> "nonemax(nonemin(nonemin(<dt_newtstep_increase[r=1]>*<dt[r=1]>,<CFL_max>/cellmax(<CFL local/dt>,default=<tiny>,region=<domain>)),<dt_max>),<dt_min>)"
# harmonically averaged, for smoother convergence than the straight minimum which can bounce around
# disadvantage of the particular harmonic function used is for a factor of two (see below) the dt could be up to twice what the CFL criterion dictates, but using a factor of one can unreasonably decrease timestep below the CFL limit for many timestep combinations
#   NONE_LOCAL <dt_explicit_target> "nonemax(nonemin(<dt_newtstep_increase[r=1]>*<dt[r=1]>,<dt_max>),<dt_min>)" stepoutput
#   NONE_LOCAL <dt_CFL_target> "nonemax(<CFL_max>/cellmax(<CFL local/dt>,default=<tiny>,region=<domain>),<dt_min>)" stepoutput
# using two factor here which really doesn't respect dt_increase and CFL_max values correctly, but performs best when both timescales are about the same - ie, more thought required
#   NONE_LOCAL <dt_target> "2.d0/(1.d0/<dt_explicit_target>+1.d0/<dt_CFL_target>)" stepoutput

    NONE_UNKNOWN <dt[r=0]> "<dt_initial>" stepoutput,input,output,timesteprewind
    NONE_DERIVED <t[r=0]> "<t[r=1]>+<dt[r=0]>" timesteprewind,input,output
    NONE_TRANSIENT <t[r=1]> "-<dt[r=0]>" "<t>" timesteprewind,input,output # time at last step
    NONE_EQUATION <dt implicit equation> "<dt>-<dt_target>"

# this causes <dt_target> to be made constant after a certain number of newtsteps
# this is enacted in u_f.arb
    GENERAL_REPLACEMENTS D "<<implicittimestepnewtstep>>" W "1"

  ELSE
# explicit
# use CFL_number template, but make the calculation explicit - ie, based on r=1 values
    INCLUDE "CFL_number" R "<CFL local/dt>" W "<CFL local/dt[r=1]>" R "<u_f>" W "<u_f[r=1]>" R "<CFL local>" W "<CFL local[r=1]>" R "<dt>" W "<dt[r=1]>" R "NONE_OUTPUT <CFL>" W 'NONE_TRANSIENT <CFL[r=1]> ""'
#   NONE_TRANSIENT <CFL[r=1]> "" "cellmax(<CFL local[r=1]>,region=<domain>)" output,stepoutput
    NONE_TRANSIENT <CFL[r=1]> output,stepoutput
    NONE_TRANSIENT <dt[r=0]> "<dt_initial>" "nonemax(nonemin(nonemin(<dt_newtstep_increase[r=1]>,<CFL_max>/nonemax(<CFL[r=1]>,<tiny>))*<dt[r=1]>,<dt_max>),<dt_min>)" stepoutput,input,output,timesteprewind
    NONE_TRANSIENT <t[r=0]> "0.d0" "<t[r=1]>+<dt[r=0]>" timesteprewind,input,output # time
    NONE_TRANSIENT <t[r=1]> "<t>-<dt[r=0]>" "<t>" timesteprewind,input,output # time at last step

  END_IF

#---------------------------------------------------------------------------------------------------------
ELSE
# constant timestep
  NONE_CONSTANT <dt> "<dt_initial>"
  NONE_TRANSIENT <t[r=0]> "0.d0" "<t[r=1]>+<dt[r=0]>" # time
  NONE_TRANSIENT <t[r=1]> "<t>-<dt[r=0]>" "<t>" # time at last step
END_IF
#---------------------------------------------------------------------------------------------------------

NONE_CONDITION <output test> "<t>-<t_out>-<dt_out>+<dt>*1.d-10" outputcondition # this will be true (>0.) whenever we are <dt_out> from last output
NONE_OUTPUT <t_out> "<t>" stepoutputnoupdate,timesteprewind # this will record the time of the last output
NONE_CONDITION <stop test> "<t>-<t_end>" stopcondition # when this becomes true (>0.) the simulation stops

# the initial values are blank, which means they will be set equal to the r=0 components, which when updated will mean that they will be set to the initial values for the r=0 components
CELL_TRANSIENT <u[l=<<i>>,r=1]> "" "<u[l=<<i>>]>" ON <allcells>

