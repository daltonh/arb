#(comment created during unwrap): new block = resources/test_suite_results/gnu/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /home/daltonh/fortran/arb/testsuite/arb_master/src/free_surface_functions.f90
EXTERNALS "/home/daltonh/fortran/arb/testsuite/arb_master/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: asymptote_sensor.arb
   #(comment created during unwrap): new block = asymptote_sensor.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "asymptote_sensor.arb"
   # arb finite volume solver
   # Copyright 2009-2011 Dalton Harvie (daltonh@unimelb.edu.au)
   #
   # arb is released under the GNU GPL.  For full details see the license directory.
   #
   #-------------------------------------------------------------------
   # file equations.in
   VERSION 0.50
   #----------------------------------------------------------------------------
   
   # variable definition reference:
   # REGION_LIST <region_1> <region_2> ... <region_n> # comments: line has the ordered names of any regions
   # (CELL_|FACE_)REGION_CONSTANT <name> [multiplier*units] numerical_value_for_region_1 .. value_for_region_n options # comments: sets a constant that varies with region
   # (CELL_|FACE_|NONE_|)CONSTANT <name> [multiplier*units] numerical_value ON <region> options # comments: sets a constant specific to one region or no regions and has the form
   # (CELL_|FACE_|NONE|)CONSTANT <name> [units] "expression (involving only constants)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)TRANSIENT <name> [units] "expression (initial value, optional, evaluated in descending relstep order)" "expression (evaluated in ascending relstep order)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)NEWTIENT <name> [units] "expression (initial value, optional, evaluated in descending relstep order)" "expression (evaluated in ascending relstep order)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)DERIVED <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)UNKNOWN <name> [units] "expression (initial value, optional)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)EQUATION <name> [units] "expression (equation equaling zero)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)OUTPUT <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)CONDITION <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)LOCAL <name> [units] "expression" ON <region> options # comments
   
   # options include (with p=perl and f=fortran indicating which piece of code needs to know the option):
   #p  derivative/noderivative - for DERIVED, EQUATION, LOCAL : do or do not calculate Jacobian derivatives for this variable
   #p  positive/negative/nocheck - for DERIVED, UNKNOWN, EQUATION, LOCAL : check at each iteration that variable is positive/negative
   #f  output/nooutput - for ALL : output compound to msh files
   #f  componentoutput/nocomponentoutput - for ALL : output just this component to msh files
   #f  stepoutput/stepoutputnoupdate/nostepoutput - for ALL : output compound to step file.  The noupdate one does not update the variable when the step file is written (needed for recording when output occurred for example).
   #f  componentstepoutput/componentstepoutputnoupdate/nocomponentstepoutput - for ALL : output just this component to step files
   #f  input/noinput - for CONSTANT, TRANSIENT, UNKNOWN : read in compound from msh files - only these 3 variable types can be read in
   #f  componentinput/nocomponentinput - for CONSTANT, TRANSIENT, UNKNOWN : read in just this component from msh files - only these 3 variable types can be read in
   #f  elementdata,elementnodedata,elementnodelimiteddata - for CELL centred var : data type when writing this compound (unless gmesh overide is specified) (also same for components with prefix component)
   #p  outputcondition,stopcondition,convergencecondition,bellcondition - for CONDITION, type of condition, can have multiple conditions for the one variable
   #f  magnitude=value - for EQUATION, UNKNOWN specifies the initial variable magnitude to be used (rather than being based on the initial variable values) - a negative number will cause the magnitude to be set based upon the initial values (which is the default)
   #f  dynamicmagnitude/staticmagnitude - for EQUATION, UNKNOWN, adjust magnitude of variable dynamically as the simulation progresses, or keep it constant at the initial magnitude
   #f  dynamicmagnitudemultiplier=value - for EQUATION, UNKNOWN, multiplier to use when adjusting magnitude of variable dynamically (=>1.d0, with 1.d0 equivalent to static magnitudes, and large values placing no restriction on the change in magnitude from one newton iteration to the next)
   #   clearoptions - remove all previously (to the left and above the clearoptions word) user-specified options for this variable
   
   # physical data
   CONSTANT <tend> [] 1.d+2 # time for simulation to stop
   
   # numerical data
   CONSTANT <dt> [] 1.d-2 # constant timestep
   
   # transient bits
   TRANSIENT_SIMULATION
   NONE_TRANSIENT <t[r=0]> "0.d0" "<t[r=1]>+<dt>" # time
   NONE_TRANSIENT <t[r=1]> "<t>-<dt>" "<t>" # time at last step
   NONE_TRANSIENT <t[r=2]> "<t[r=1]>-<dt>" "<t[r=1]>" # time at last step
   NONE_CONDITION <time based stop condition> "<t>-<tend>" stopcondition # when this becomes true (>0.) the simulation stops
   
   # position and velocity, with approximate treatment of bounce
   NONE_CONSTANT <z_horizontal_asymptote> 2.d0 stepoutput
   NONE_DERIVED <z> [m] "<z_horizontal_asymptote>-1.d0/(<t>+1.d0)" stepoutput # a mock profile with a horizontal asymptote
   
   #(hash inserted during unwrap)INCLUDE_TEMPLATE "general"
   
   # trigger_create_asymptote_expression
   #
   # usage:
   #
   # user input variables:
   # <var_tracked>
   #     an asymptote in the <var_tracked> time series will be monitored
   #
   # template variables:
   # {<asymptote}_timestep_bin_width>
   #     the mean of <var_tracked> is evaluated over a bin of this width, in units of timesteps
   # {<asymptote}_tolerance>
   #     tolerance for defining when an asymmptote occurs, a smaller number is more strict. tolerance is a measure of how close  {<asymptote}_mean[r=1]>/{<asymptote}_mean[r=0]> must be to 1.0 in order to cause a sign change in <asymptote_expression>
   # {<asymptote}_expression>
   #     changes sign when an asymptote has been reached
   # {<asymptote}_progress>
   #     use to monitor how close the system is to reaching the asymptote condition {<asymptote}_tolerance>
   #
   # example:
   # here we create an asymptote expression
      #(comment created during unwrap): new block = ../../templates/general/trigger_create_asymptote_expression.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "trigger_create_asymptote_expression" 
      
      NONE_CONSTANT <z_asymptote_timestep_bin_width> 100.0 #N; or number of bins for mean test
      NONE_DERIVED <z_asymptote_check> "noneif(abs(mod(<timestep>,<z_asymptote_timestep_bin_width>)-1.d0),0,1)" #return 1 if timestep is N+1,2N+1,3N+1 etc. 
      NONE_DERIVED <z_asymptote_total> "noneif(<z_asymptote_check>,0.d0+<z>,<z_asymptote_total[r=1]>+<z>)" #add end-of-current-timestep <var_tracked> to the running total
      NONE_TRANSIENT <z_asymptote_total[r=1]> "0.d0" "<z_asymptote_total>"
      NONE_DERIVED <z_asymptote_mean> "noneif(<z_asymptote_check>,<z_asymptote_total[r=1]>/<z_asymptote_timestep_bin_width>,<z_asymptote_mean[r=1]>)" stepoutput
      NONE_TRANSIENT <z_asymptote_mean[r=1]> "0.d0" "<z_asymptote_mean>"
      NONE_DERIVED <z_asymptote_measure> "abs(noneif(<z_asymptote_check>,noneif(<z_asymptote_mean[r=0]>,<z_asymptote_mean[r=1]>/<z_asymptote_mean[r=0]>,2.d0),0.d0)-1.d0)" #ratio of means; <asymptote_mean[r=1]> is the mean over the period {<timestep>-2N-1 to <timestep>-N-1}, <asymptote_mean[r=0]> is the mean over the period {<timestep>-N-1 to <timestep>-1}; where N is the bin width
      NONE_CONSTANT <z_asymptote_tolerance> 0.01 stepoutput #how close must <asymptote_mean[r=1]>/<asymptote_mean[r=0]> be to 1.0 in order to cause a sign change in <asymptote_expression>
      NONE_CONDITION <z_asymptote_expression> "<z_asymptote_tolerance>-<z_asymptote_measure>" stopcondition # stop condition added for v0.58, not sure if this was what was wanted
      
      # track the minimum of <asymptote_measure>
      #INCLUDE "series_nonemin" R "<var_tracked>" W "<asymptote_measure>" R "<var" W "<asymptote_measure"
      # after v0.57 order of replacements is from last to first, consistent with the order on a line and within the file
         #(comment created during unwrap): new block = ../../templates/general/series_nonemin.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "series_nonemin" 
         
         NONE_LOCAL <z_asymptote_measure_decrement> "<z_asymptote_measure_min[r=1]>-<z_asymptote_measure>"
         NONE_DERIVED <z_asymptote_measure_min> "noneif(<z_asymptote_measure_decrement>,<z_asymptote_measure_min[r=1]>-<z_asymptote_measure_decrement>,<z_asymptote_measure_min[r=1]>)" stepoutput # decrement the var_min value only if we need to
         NONE_TRANSIENT <z_asymptote_measure_min[r=1]> "<z_asymptote_measure>" "<z_asymptote_measure_min>" input,output
      # just rename <asymptote_measure_min> to <asymptote_progress>
      VARIABLE <z_asymptote_measure_min> nooutput,nostepoutput
      NONE_DERIVED <z_asymptote_progress> "<z_asymptote_measure_min>" stepoutput
      
   VARIABLE <z_asymptote_timestep_bin_width> 300.0 # (default is 100 <timestep> bin width)
   VARIABLE <z_asymptote_tolerance> 0.001 # (default is 0.01 tolerance)
   
   # here we create a trigger and link it to the asymptote created above
      #(comment created during unwrap): new block = ../../templates/general/trigger_create.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "trigger_create" 
      
      NONE_DERIVED <trigger> "noneif(<z_asymptote_expression>,1.d0,0.d0)"
      NONE_TRANSIENT <trigger[r=1]> "0.d0" "<trigger>"
      
      # if <trigger> changes sign over the course of the timestep, then increment <trigger_logical>
      NONE_DERIVED <trigger_logical> "cellif(abs(<trigger>-<trigger[r=1]>)-1e-10,<trigger_logical[r=1]>+1.d0,<trigger_logical[r=1]>)"
      NONE_TRANSIENT <trigger_logical[r=1]> "0.d0" "<trigger_logical>"
   NONE_CONDITION <z_asymptote_based_stop_condition> "<trigger_logical>" stopcondition
   VARIABLE <trigger_logical> stepoutput
##################################################################################
