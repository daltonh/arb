MARKDOWN
Boundary conditions for an inlet, outlet or walls.  Choose which by setting '<region' equal to either <inlet, <outlet or <walls.

To give the region another (or specific) name, do a secondary subsequent substitution when calling, as in

```arb
INCLUDE_TEMPLATE "multifluid/boundary_equations R '<inlet' W '<inlet1' R '<region' W '<inlet'
```

IE, replace <region with <inlet first, and then replace <inlet with <inlet1.
END_MARKDOWN

# if not otherwise specified, default to inlet boundary conditions
REPLACEMENTS D '<region' W '<inlet'

# set the default boundary condition methods here for methods that do not change for the boundary type of species being considered
# otherwise specify the methods individually when calling the navier-stokes boundary_equations template below
# individual methods can be specified when calling this file to overwrite any of these default (D) methods
# eg INCLUDE 'boundary_equations' R '<<boundarynormalmethod>>' W 'zerodynamic'
REPLACEMENTS D '<<boundarytangentmethod>>' W 'noslip' D '<<boundarymethodvariable>>' W 'dynamicforce'

# problem is these will break if phi_f_adv is zero as u_f on the boundary is no longer in an equation?
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {

# since we're using the navier-stokes template, have to replace all fluid variables with their species specific equivalents
    $return_string .= "REPLACEMENTS R '<dynamic_force_f>' W '<dynamic_force_f_$species>' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<u_f>' W '<u_f_$species>' R '<ugrad_f[' W '<ugrad_f_$species"."[' R '<p_f>' W '<p_f_$species>' R 'u_av_calc>' W 'u_av_calc_$species>' R 'equation>' W 'equation_$species>' R 'pextrapolation>' W 'pextrapolation_$species>' R 'slip1>' W 'slip1_$species>' R 'slip2>' W 'slip2_$species>' R 'developed>' W 'developed_$species>' R 'gradp>' W 'gradp_$species>' R '<p_error>' W '<p_error_$species>' R '<u[' W '<u_$species"."[' R '<u_f_{correction}' W '<u_f_{correction}_$species'\n";

    if ($species eq 'species0') {
      if (string_test('<region','<outlet')) {
# outlet for fluid, set the fluid pressure to zero in one cell, and a uniform dynamic_force across the rest
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'onefacepressure' R '<region p>' W '0'\n";
      } elsif (string_test('<region','<inlet')) {
# inlet for fluid, set the fluid pressure to zero in one cell, and a uniform dynamic_force across the rest
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'flowrate' R '<region u>' W '<u_av_$species>'\n";
      } else {
# walls for fluid, set noslip and noflux (zero velocity), and use zero dynamic extrapolation
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'rhiechow' D '<<boundarymethod>>' W 'noflux'\n";
      }
    } else {
      if (string_test('<region','<outlet')) {
# outlet for disperse phase, set the gradient normal to the port to be zero, overwriting the existing <outlet flowrate equation>
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'pressure'\n";
        $return_string .= "VARIABLE <outlet flowrate equation_$species> 'facegrad[adjacentcells](<phi_$species>)'\n";
      } elsif (string_test('<region','<inlet')) {
# inlet for disperse phase, set the volume fraction as a uniform value fluid pressure to zero in one cell, and a uniform dynamic_force across the rest
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'pressure'\n";
        $return_string .= "VARIABLE <inlet flowrate equation_$species> '<phi_f_$species>-<phi_in_$species>'\n";
      } else {
# walls for disperse phase, set noslip and noflux (zero velocity), and use zero dynamic extrapolation
        $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/boundary_equations' D '<<boundarynormalmethod>>' W 'rhiechow' D '<<boundarymethod>>' W 'noflux'\n";
      }
    }
  }
  return $return_string;
}}
