# total stress tensor
INCLUDE "u_gradient_tensor"

# if the numerical velocity divergence is to be included in the stress calculation replace this string with an empty character prior to calling this template
REPLACEMENTS DEFAULT "<<udivfcomment>>" W "#"
# calculate the velocity divergence (numerical) on each face
<<udivfcomment>>FACE_DERIVED <udiv_f> "<ugrad_f[l=1,1]>+<ugrad_f[l=2,2]>+<ugrad_f[l=3,3]>" ON <allfaces> # any component not in <<dimensions>> will be assigned to an empty vector and simplified out using maxima

# deal with uniform/nonuniform viscosity, allowing for possibility of user setting <mu_f> directly
# if you want to overwrite <mu_f>, just define it prior to calling this file and your replacement will overwrite the following
REPLACEMENTS R "<<mu_f>>" W "<mu_f>" # first define this local replacement string in the same scope of the definition statements below (ie, outside scope of if block)
IF {{ return ( !(string_examine('<mu_f>')) && string_eval('<<uniformviscosity>>') ) }}  # this evaluates as true (1) if replacement string '<mu_f>' isn't defined, AND <<uniformviscosity>> is on (1)
  REPLACEMENTS S "<<mu_f>>" W "<mu>" # if we are here then we apply the uniform viscosity substitution, with 'S'='SUBSTITUTE' meaning to replace the value of this string in its previous (above code block here) definition
END_IF
#{{ print "IN template total_stress\n".string_debug; }}

# no both cartesian and cylindrical stresses don't include pressure
# first define without the numerical velocity divergence
FACE_LOCAL <tau[l=<<i>>,<<j>>]> "-<<mu_f>>*(<ugrad_f[l=<<i>>,<<j>>]>+<ugrad_f[l=<<j>>,<<i>>]>)" ON <allfaces> # note, maxima will simplify diagonal components
# overwrite the diagonal elements if the numerical velocity divergence is to be included, see <<udivfcomment>> string replacement above
# Note: "<udiv_f>/3.d0" is specifically replaced in strain_rate_magnitude template
<<udivfcomment>>FACE_LOCAL <tau[l=<<i>>,<<i>>]> "-<<mu_f>>*2.d0*(<ugrad_f[l=<<i>>,<<i>>]>-<udiv_f>/3.d0)" ON <allfaces> # note, previous symmetric components were less efficient

IF 0#<<azimuthal>>
  IF 0
    VARIABLE <tau[l=<<radialdim>>,<<azimuthaldim>>]> "<tau[l=<<radialdim>>,<<azimuthaldim>>]>+<<mu_f>>*<u_f_vect[l=<<azimuthaldim>>]>/<facex[l=<<radialdim>>]>"
    VARIABLE <tau[l=<<azimuthaldim>>,<<radialdim>>]> "<tau[l=<<radialdim>>,<<azimuthaldim>>]>"
  ELSE
    VARIABLE <tau[l=<<radialdim>>,<<azimuthaldim>>]> "-<<mu_f>>*<facex[l=<<radialdim>>]>*facegrad[l=<<radialdim>>,<<reflect=1>>](<u[l=<<azimuthaldim>>]>/<cellx[l=<<radialdim>>]>)" OUTPUT
    VARIABLE <tau[l=<<azimuthaldim>>,<<radialdim>>]> "<tau[l=<<radialdim>>,<<azimuthaldim>>]>"  OUTPUT
  END_IF
  VARIABLE <tau[l=<<azimuthaldim>>,<<azimuthaldim>>]> "-<<mu_f>>*2.d0*<u_f_vect[l=<<radialdim>>]>/<facex[l=<<radialdim>>]>"
END_IF

{{ print "DEBUGGING: string =\n".string_debug();}}
