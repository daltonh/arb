# the idea here is to calculate velocity gradients need solid objects using vof information

# does not handle reflection yet

# evaluate a velocity gradient under the assumption that the velocity is zero at the closest reconstructed interface point
CONSTANT <celldxave> "cellsum(<celldxmax>,region=<domain>)/cellsum(1.d0,region=<domain>)" # average cell dimension, same as in navier_stokes/transient_all_setup
NONE_CONSTANT <d_min_multiplier> 1.d-5 # if this is too large then instabilities arise around the interface.  Set to 1.d-3 or lower based on cell size.
#NONE_CONSTANT <d_min> "<a_lengthscale>*<d_min_multiplier>" # based on domain size - not a good idea as instabilities can arise as mesh is refined and this number stays static
NONE_CONSTANT <d_min> "<celldxave>*<d_min_multiplier>" # based on a cell size
FACE_CONSTANT_REGION <interface_mask_f> "associatedwith(<interface_mask>)" ON <all faces>
#FACE_CONSTANT <interface_mask_f_indicator> "1.d0" ON <interface_mask_f>
#FACE_CONSTANT <interface_mask_f_check> "<interface_mask_f_indicator>-cellmax(celldelta(<interface_mask>),region=<adjacentfaceicells>)" ON <all faces>
FACE_CONSTANT <vof_d_f> "cellsum(cellif(celldelta(<interface_mask>),<vof_d>+dot(<phigrad_unit[l=:]>,<cellx[l=:]>)-dot(<phigrad_unit[l=:]>,cellave[lastface](<facex[l=:]>)),0.d0),region=<adjacentfaceicells>)/cellsum(celldelta(<interface_mask>),region=<adjacentfaceicells>)" ON <interface_mask_f>
# making these local in the interests of memory
<<dim1comment>>FACE_LOCAL <phigrad_f[l=1]> "cellsum(celldelta(<interface_mask>)*<phigrad[l=1]>,region=<adjacentfaceicells>)/cellsum(celldelta(<interface_mask>),region=<adjacentfaceicells>)" ON <interface_mask_f>
<<dim2comment>>FACE_LOCAL <phigrad_f[l=2]> "cellsum(celldelta(<interface_mask>)*<phigrad[l=2]>,region=<adjacentfaceicells>)/cellsum(celldelta(<interface_mask>),region=<adjacentfaceicells>)" ON <interface_mask_f>
<<dim3comment>>FACE_LOCAL <phigrad_f[l=3]> "cellsum(celldelta(<interface_mask>)*<phigrad[l=3]>,region=<adjacentfaceicells>)/cellsum(celldelta(<interface_mask>),region=<adjacentfaceicells>)" ON <interface_mask_f>
FACE_CONSTANT <phigrad_f_mag> "sqrt(dot(<phigrad_f[l=:]>,<phigrad_f[l=:]>))" ON <interface_mask_f> output

#<<dim1comment>>FACE_CONSTANT <phigrad_unit_f[l=1]> "<phigrad_f[l=1]>/facemax(<phigrad_f_mag>,default=<tinyish>)" ON <interface_mask_f>
#<<dim2comment>>FACE_CONSTANT <phigrad_unit_f[l=2]> "<phigrad_f[l=2]>/facemax(<phigrad_f_mag>,default=<tinyish>)" ON <interface_mask_f>
#<<dim3comment>>FACE_CONSTANT <phigrad_unit_f[l=3]> "<phigrad_f[l=3]>/facemax(<phigrad_f_mag>,default=<tinyish>)" ON <interface_mask_f>
# in the extremely unlikely event that the resulting averaged vector has no length, grab the unit vector from one of the adjacent cells
<<dim1comment>>FACE_LOCAL <phigrad_unit_f[l=1]> "faceif(<phigrad_f_mag>-<tinyish>,<phigrad_f[l=1]>/<phigrad_f_mag>,faceave[upcell](<phigrad_unit[l=1]>))" ON <interface_mask_f>
<<dim2comment>>FACE_LOCAL <phigrad_unit_f[l=2]> "faceif(<phigrad_f_mag>-<tinyish>,<phigrad_f[l=2]>/<phigrad_f_mag>,faceave[upcell](<phigrad_unit[l=2]>))" ON <interface_mask_f>
<<dim3comment>>FACE_LOCAL <phigrad_unit_f[l=3]> "faceif(<phigrad_f_mag>-<tinyish>,<phigrad_f[l=3]>/<phigrad_f_mag>,faceave[upcell](<phigrad_unit[l=3]>))" ON <interface_mask_f>

# save this vector which is actually the multiplier used to form the vof u gradients
<<dim1comment>>FACE_CONSTANT <phigrad_unit_div_limited_vof_d_f[l=1]> "<phigrad_unit_f[l=1]>/facemax(-<vof_d_f>,<d_min>)" ON <interface_mask_f>
<<dim2comment>>FACE_CONSTANT <phigrad_unit_div_limited_vof_d_f[l=2]> "<phigrad_unit_f[l=2]>/facemax(-<vof_d_f>,<d_min>)" ON <interface_mask_f>
<<dim3comment>>FACE_CONSTANT <phigrad_unit_div_limited_vof_d_f[l=3]> "<phigrad_unit_f[l=3]>/facemax(-<vof_d_f>,<d_min>)" ON <interface_mask_f>

<<dim1comment>>               FACE_LOCAL <ugrad_vof_f[l=1,1]> "<phigrad_unit_div_limited_vof_d_f[l=1]>*<u_f_vect[l=1]>" ON <interface_mask_f> componentoutput
<<dim1comment>><<dim2comment>>FACE_LOCAL <ugrad_vof_f[l=1,2]> "<phigrad_unit_div_limited_vof_d_f[l=1]>*<u_f_vect[l=2]>" ON <interface_mask_f> componentoutput
<<dim1comment>><<dim3comment>>FACE_LOCAL <ugrad_vof_f[l=1,3]> "<phigrad_unit_div_limited_vof_d_f[l=1]>*<u_f_vect[l=3]>" ON <interface_mask_f> componentoutput
<<dim2comment>><<dim1comment>>FACE_LOCAL <ugrad_vof_f[l=2,1]> "<phigrad_unit_div_limited_vof_d_f[l=2]>*<u_f_vect[l=1]>" ON <interface_mask_f> componentoutput
<<dim2comment>>               FACE_LOCAL <ugrad_vof_f[l=2,2]> "<phigrad_unit_div_limited_vof_d_f[l=2]>*<u_f_vect[l=2]>" ON <interface_mask_f> componentoutput
<<dim2comment>><<dim3comment>>FACE_LOCAL <ugrad_vof_f[l=2,3]> "<phigrad_unit_div_limited_vof_d_f[l=2]>*<u_f_vect[l=3]>" ON <interface_mask_f> componentoutput
<<dim3comment>><<dim1comment>>FACE_LOCAL <ugrad_vof_f[l=3,1]> "<phigrad_unit_div_limited_vof_d_f[l=3]>*<u_f_vect[l=1]>" ON <interface_mask_f> componentoutput
<<dim3comment>><<dim2comment>>FACE_LOCAL <ugrad_vof_f[l=3,2]> "<phigrad_unit_div_limited_vof_d_f[l=3]>*<u_f_vect[l=2]>" ON <interface_mask_f> componentoutput
<<dim3comment>>               FACE_LOCAL <ugrad_vof_f[l=3,3]> "<phigrad_unit_div_limited_vof_d_f[l=3]>*<u_f_vect[l=3]>" ON <interface_mask_f> componentoutput

<<dim1comment>>               FACE_LOCAL <ugrad_facegrad_f[l=1,1]> "facegrad[l=1,<<reflect=1>>](<u[l=1]>)" ON <all faces>
<<dim1comment>><<dim2comment>>FACE_LOCAL <ugrad_facegrad_f[l=1,2]> "facegrad[l=1,<<reflect=2>>](<u[l=2]>)" ON <all faces>
<<dim1comment>><<dim3comment>>FACE_LOCAL <ugrad_facegrad_f[l=1,3]> "facegrad[l=1,<<reflect=3>>](<u[l=3]>)" ON <all faces>
<<dim2comment>><<dim1comment>>FACE_LOCAL <ugrad_facegrad_f[l=2,1]> "facegrad[l=2,<<reflect=1>>](<u[l=1]>)" ON <all faces>
<<dim2comment>>               FACE_LOCAL <ugrad_facegrad_f[l=2,2]> "facegrad[l=2,<<reflect=2>>](<u[l=2]>)" ON <all faces>
<<dim2comment>><<dim3comment>>FACE_LOCAL <ugrad_facegrad_f[l=2,3]> "facegrad[l=2,<<reflect=3>>](<u[l=3]>)" ON <all faces>
<<dim3comment>><<dim1comment>>FACE_LOCAL <ugrad_facegrad_f[l=3,1]> "facegrad[l=3,<<reflect=1>>](<u[l=1]>)" ON <all faces>
<<dim3comment>><<dim2comment>>FACE_LOCAL <ugrad_facegrad_f[l=3,2]> "facegrad[l=3,<<reflect=2>>](<u[l=2]>)" ON <all faces>
<<dim3comment>>               FACE_LOCAL <ugrad_facegrad_f[l=3,3]> "facegrad[l=3,<<reflect=3>>](<u[l=3]>)" ON <all faces>

<<dim1comment>>               FACE_DERIVED <ugrad_f[l=1,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=1,1]>,<ugrad_facegrad_f[l=1,1]>)" ON <all faces>
<<dim1comment>><<dim2comment>>FACE_DERIVED <ugrad_f[l=1,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=1,2]>,<ugrad_facegrad_f[l=1,2]>)" ON <all faces>
<<dim1comment>><<dim3comment>>FACE_DERIVED <ugrad_f[l=1,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=1,3]>,<ugrad_facegrad_f[l=1,3]>)" ON <all faces>
<<dim2comment>><<dim1comment>>FACE_DERIVED <ugrad_f[l=2,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=2,1]>,<ugrad_facegrad_f[l=2,1]>)" ON <all faces>
<<dim2comment>>               FACE_DERIVED <ugrad_f[l=2,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=2,2]>,<ugrad_facegrad_f[l=2,2]>)" ON <all faces>
<<dim2comment>><<dim3comment>>FACE_DERIVED <ugrad_f[l=2,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=2,3]>,<ugrad_facegrad_f[l=2,3]>)" ON <all faces>
<<dim3comment>><<dim1comment>>FACE_DERIVED <ugrad_f[l=3,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=3,1]>,<ugrad_facegrad_f[l=3,1]>)" ON <all faces>
<<dim3comment>><<dim2comment>>FACE_DERIVED <ugrad_f[l=3,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=3,2]>,<ugrad_facegrad_f[l=3,2]>)" ON <all faces>
<<dim3comment>>               FACE_DERIVED <ugrad_f[l=3,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f[l=3,3]>,<ugrad_facegrad_f[l=3,3]>)" ON <all faces>

# the idea in the following is to use a weighted linear combination of the vof and facegrad ugrad's
#NONE_CONSTANT <ugrad_vof_f_weighting_multiplier> 1.0d4  
#FACE_CONSTANT <ugrad_vof_f_weighting> "facemin(facemax(1.d0+<vof_d_f>/(<facedx>*<ugrad_vof_f_weighting_multiplier>),0.d0),1.d0)" ON <interface_mask_f>
#<<dim1comment>>               FACE_DERIVED <ugrad_f[l=1,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=1,1]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=1,1]>,<ugrad_facegrad_f[l=1,1]>)" ON <all faces>
#<<dim1comment>><<dim2comment>>FACE_DERIVED <ugrad_f[l=1,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=1,2]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=1,2]>,<ugrad_facegrad_f[l=1,2]>)" ON <all faces>
#<<dim1comment>><<dim3comment>>FACE_DERIVED <ugrad_f[l=1,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=1,3]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=1,3]>,<ugrad_facegrad_f[l=1,3]>)" ON <all faces>
#<<dim2comment>><<dim1comment>>FACE_DERIVED <ugrad_f[l=2,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=2,1]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=2,1]>,<ugrad_facegrad_f[l=2,1]>)" ON <all faces>
#<<dim2comment>>               FACE_DERIVED <ugrad_f[l=2,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=2,2]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=2,2]>,<ugrad_facegrad_f[l=2,2]>)" ON <all faces>
#<<dim2comment>><<dim3comment>>FACE_DERIVED <ugrad_f[l=2,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=2,3]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=2,3]>,<ugrad_facegrad_f[l=2,3]>)" ON <all faces>
#<<dim3comment>><<dim1comment>>FACE_DERIVED <ugrad_f[l=3,1]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=3,1]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=3,1]>,<ugrad_facegrad_f[l=3,1]>)" ON <all faces>
#<<dim3comment>><<dim2comment>>FACE_DERIVED <ugrad_f[l=3,2]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=3,2]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=3,2]>,<ugrad_facegrad_f[l=3,2]>)" ON <all faces>
#<<dim3comment>>               FACE_DERIVED <ugrad_f[l=3,3]> "faceif(facedelta(<interface_mask_f>),<ugrad_vof_f_weighting>*<ugrad_vof_f[l=3,3]>+(1.d0-<ugrad_vof_f_weighting>)*<ugrad_facegrad_f[l=3,3]>,<ugrad_facegrad_f[l=3,3]>)" ON <all faces>

# the following are for output only
<<dim1comment>>FACE_LOCAL <vof_d_vect_f[l=1]> "<phigrad_unit_f[l=1]>*<vof_d_f>" ON <interface_mask_f>
<<dim2comment>>FACE_LOCAL <vof_d_vect_f[l=2]> "<phigrad_unit_f[l=2]>*<vof_d_f>" ON <interface_mask_f>
<<dim3comment>>FACE_LOCAL <vof_d_vect_f[l=3]> "<phigrad_unit_f[l=3]>*<vof_d_f>" ON <interface_mask_f>
<<dim1comment>>CELL_LOCAL <vof_d_vect[l=1]> "<phigrad_unit[l=1]>*<vof_d>" ON <interface_mask>
<<dim2comment>>CELL_LOCAL <vof_d_vect[l=2]> "<phigrad_unit[l=2]>*<vof_d>" ON <interface_mask>
<<dim3comment>>CELL_LOCAL <vof_d_vect[l=3]> "<phigrad_unit[l=3]>*<vof_d>" ON <interface_mask>

