MARKDOWN
Here we setup the viscous stresses for each phase, including the velocity gradients, using the navier_stokes template file
END_MARKDOWN

#REPLACEMENTS D "<<stress_method>>" W "version1" # the gamma used in each phase is specific to that phase, but stress is not specific to phase (see conservation template)
REPLACEMENTS D "<<stress_method>>" W "version2" # the gamma used in each phase is a function of all velocities
#REPLACEMENTS D "<<stress_method>>" W "version3" # the gamma used in each phase is specific to that phase, but stress is specific to phase (see conservation template)

IF {{ return (string_test('<<stress_method>>','version1') || string_test('<<stress_method>>','version3')) }}
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/total_stress' ".
        "R '<u[' W '<u_$species"."[' R '<ugrad_f[' W '<ugrad_f_$species"."[' ".
        "R '<tau[' W '<tau_$species"."[' R '<mu_f>' W '<mu_f_$species>'".
        "R '<u_f_vect[' W '<u_f_vect_$species"."['\n".
        "INCLUDE\n"
    }
    return $return_string;
  }}
ELSE
# version2
# first assemble mixture averaged velocity
# calculate velocity gradients for all species at the same time - time about variable type
  {{
    my $return_string = '';
    $return_string .= "CELL_DERIVED <u_mixture[l=<<i>>]> '0.d0' ON <allcells>\n";
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "VARIABLE <u_mixture[l=<<i>>]> '<u_mixture[l=<<i>>]>+<phi_pos_$species>*<u_$species"."[l=<<i>>]>'\n";
      $return_string .= "FACE_DERIVED <ugrad_f_$species"."[l=<<i>>,<<j>>]> 'facegrad[l=<<i>>,<<reflect=<<j>>>>](<u_$species"."[l=<<j>>]>)' ON <allfaces>\n";
    }
    return $return_string;
  }}
  
# calculate the fluid species0 viscous stress, which for all methods is now based on the mixture (volume) averaged velocity and mixture viscosity (and hence mixture stress)
  FACE_LOCAL <ugrad_f_mixture[l=<<i>>,<<j>>]> "facegrad[l=<<i>>,<<reflect=<<j>>>>](<u_mixture[l=<<j>>]>)" ON <allfaces>
  FACE_DERIVED <tau_species0[l=<<i>>,<<j>>]> "-<mu_f_species0>*(<ugrad_f_mixture[l=<<i>>,<<j>>]>+<ugrad_f_mixture[l=<<j>>,<<i>>]>)" ON <allfaces> # note, maxima will simplify diagonal components

# and the solid phases stresses
# here equal to the fluid stress which is based on mixture averaged velocities and a mixture viscosity, version2 = jackson98
# note, only species0 viscosity used
  IF {{ return (string_test('<<stress_method>>','version2') || string_test('<<stress_method>>','jackson98')) }}
    {{ my $return_string = '';
      for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
        $return_string .= "FACE_DERIVED <tau_$species"."[l=<<i>>,<<j>>]> '<tau_species0[l=<<i>>,<<j>>]>' ON <allfaces>\n";
      }
      return $return_string;
    }}
  ELSE # balls = zhang97
# here equal to the fluid stress based on fluid velocities and fluid viscosity
    {{ my $return_string = '';
      for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
        $return_string .= "FACE_DERIVED <tau_$species"."[l=<<i>>,<<j>>]> '-<mu_f_$species0>*(<ugrad_f_$species"."[l=<<i>>,<<j>>]>+<ugrad_f_$species"."[l=<<j>>,<<i>>]>)' ON <allfaces>\n";
      }
      return $return_string;
    }}
  END_IF
END_IF
