#!/usr/bin/env ruby

# convert_units
# (C) Copyright Christian Biscombe 2017-2018

abort "ERROR: Ruby 1.9.3 or newer required (Ruby #{RUBY_VERSION} installed)" if RUBY_VERSION < '1.9.3'

require 'optparse'
require_relative '../lib/units'

PROGNAME = 'convert_units'
VERSION = '1.7'
DATE = '2018-04-27'
INFO = <<-INFO.gsub(/^\s+/, '')
  #{PROGNAME} v. #{VERSION} (#{DATE})
  Performs unit conversions.
  (C) Copyright Christian Biscombe 2017-2018
INFO

# Command-line options
BANNER = <<-BANNER.gsub(/^\s+/, '')
  #{INFO}
  Usage: #{PROGNAME} [options] <input_string> [output_units]
  Terminate option list with '--' if entering negative input values (e.g. temperatures)
BANNER
options = {}
options[:format] = '%g' # default format for numerical output
OPTIONS = OptionParser.new do |opt|
  opt.banner = BANNER
  opt.on('-a', '--arb', 'Output in arb format (implies -d)') { options[:arb] = true; options[:double_precision] = true }
  opt.on('-d', '--double-precision', "Use d for exponents (only alters output; doesn't affect numerical precision)") { options[:double_precision] = true }
  opt.on('-f', '--format <format>', 'Format string for numerical output (default %g)') { |f| options[:format] = f }
  opt.on('-l', '--list', 'List all recognised units and their abbreviations') { Units.list; exit if ARGV.empty? }
  opt.on('-s', '--sig-figs', 'Output with same number of significant figures as input (overrides -f)') { options[:sig_figs] = true }
  opt.on('-t', '--tdiff', 'Interpret input temperature as temperature difference rather than reference to an absolute temperature') { options[:tdiff] = true }
  opt.on('-v', '--version', 'Print version information') { puts INFO; exit if ARGV.empty? }
end
begin 
  OPTIONS.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => msg
  warn OPTIONS
  abort "ERROR: #{msg}"
end

if ARGV.empty?
  warn OPTIONS
  abort "ERROR: no input"
end

# Do unit conversion
begin
  value_out, units_out = Units.convert(ARGV[0], ARGV[1].to_s, options)
rescue => msg
  abort "ERROR: #{msg}"
end

# Print result
puts options[:arb] ? "[#{units_out}] #{value_out}" : "#{value_out} #{units_out}"
