MARKDOWN
Here we find <mu_f_species> for each species
END_MARKDOWN

#REPLACEMENTS D "<<viscosity_method>>" W "einstein"
REPLACEMENTS D "<<viscosity_method>>" W "morrisboulay99"
#REPLACEMENTS D "<<viscosity_method>>" W "thomas65"

#REPLACEMENTS D "<<stressmethod>>" W "version1" # method, with phi inside viscous stress divergence
REPLACEMENTS D "<<stressmethod>>" W "version2" # as per jackson98 and zhang97, have phi outside of stress divergence, version2 default = zhang97 = jackson98 = balls
# in this file jackson98 = version2, zhang97 = balls

IF {{ return string_test('<<stressmethod>>','version1') }}
# split stress between phases using the simplest possible consistent partitioning
# here mu is not species specific, so is roughly proportional (or more) to phi
# the multiplier used in the u_f_{correction} calculation is the viscosity/phi, which has a conventional viscosity magnitude as phi -> 0

  IF {{ return string_test('<<species>>','species0') }}
  # for the fluid use a multiplier of mu
    CELL_DERIVED <mu_c_multiplier_<<species>>> [Pa.s] "<mu_species0>" ON <allcells>
  ELSE
  # different functions using this simple partitioning only affect the solid viscosity

    IF {{ return string_test('<<viscosity_method>>','einstein')}}
  # simplest einstein relationship
      CELL_DERIVED <mu_c_multiplier_<<species>>> [Pa.s] "3.5d0*<mu_species0>" ON <allcells>

    ELSE
  # methods that have a maximum total solids magnitude, and can be expressed as a function of total solid volume fraction
      NONE_CONSTANT <mu_phi_max_allsolids> "<phi_max_allsolids>"
      NONE_CONSTANT <mu_phi_tol> "<phi_tol>"
      CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output
      CELL_LOCAL <mu_c_multiplier_<<species>>> [Pa.s] "<mu_c_multiplier_allsolids>" ON <allcells>

      IF {{ return string_test('<<viscosity_method>>','morrisboulay99')}}
        NONE_CONSTANT <mu_K_s> 0.1d0
        CELL_DERIVED <mu_c_multiplier_allsolids> [Pa.s] "<mu_species0>*(1.d0+2.5d0/(1.d0-<mu_phi_norm_allsolids>)+<mu_K_s>*<mu_phi_norm_allsolids>/(<mu_phi_max_allsolids>*(1.d0-<mu_phi_norm_allsolids>)**2))" ON <allcells> output
      ELSE
        ERROR "in single_species_viscosity: viscosity_method = <<viscosity_method>> not coded yet or unknown"
      END_IF
    END_IF

  END_IF

  # now construct viscosity and multiplier for faces
  CELL_LOCAL <mu_c_<<species>>> "<mu_c_multiplier_<<species>>>*<phi_bounded_<<species>>>" ON <allcells> output
  FACE_DERIVED <mu_f_<<species>>> "faceave[harmonic](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
  FACE_DERIVED <mu_f_multiplier_<<species>>> "faceave[adjacentcells](<mu_c_multiplier_<<species>>>)" ON <allfaces> output # used in rhie-chow

ELSE
# in version2 the viscous stress divergence is phase specific, so the viscosity for each phase is roughly a constant as phi -> 0
# the multiplier used in the u_f_{correction} calculation is equal to the viscosity

  IF {{ return string_test('<<species>>','species0') }}
# define the fluid stress, which is in version2 a mixture stress

    IF {{ return string_test('<<viscosity_method>>','einstein')}}
  # simplest einstein relationship
      CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+<phi_bounded_<<species>>>)" ON <allcells>

    ELSE
  # methods that have a maximum total solids magnitude, and can be expressed as a function of total solid volume fraction
      NONE_CONSTANT <mu_phi_max_allsolids> "<phi_max_allsolids>"
      NONE_CONSTANT <mu_phi_tol> "<phi_tol>"

      IF {{ return string_test('<<viscosity_method>>','morrisboulay99')}}
        NONE_CONSTANT <mu_K_s> 0.1d0
        CELL_DERIVED <mu_phi_norm_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)/<mu_phi_max_allsolids>" output # here <mu_phi_max_allsolids> is used to scale across the range
        CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*<mu_phi_norm_allsolids>/(1.d0-<mu_phi_norm_allsolids>)+<mu_K_s>*(<mu_phi_norm_allsolids>/(1.d0-<mu_phi_norm_allsolids>))**2)" ON <allcells> output
      ELSE_IF {{ return string_test('<<viscosity_method>>','thomas65')}}
        CELL_DERIVED <mu_phi_bounded_allsolids> "cellmin(1.d0-<phi_pos_species0>,<mu_phi_max_allsolids>-<mu_phi_tol>)" output # here <mu_phi_max_allsolids> is used as a cut-off
        CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>*(1.d0+2.5d0*<mu_phi_bounded_allsolids>+10.05d0*(<mu_phi_bounded_allsolids>)**2 + 0.00273d0*exp(16.6d0*<mu_phi_bounded_allsolids>)" ON <allcells> output
      ELSE
        ERROR "in single_species_viscosity: viscosity_method = <<viscosity_method>> not coded yet or unknown"
      END_IF
    END_IF

  ELSE
# for these methods use the same viscosity across phases
    IF {{ return string_test('<<stressmethod>>','zhang97') }}
# only fluid viscosity applied to solid phases, zhang97 = balls
      CELL_DERIVED <mu_c_<<species>>> [Pa.s] "<mu_species0>" ON <allcells> output
    ELSE
# mixture viscosity applied to all phases, version2 = jackson98
      CELL_LOCAL <mu_c_<<species>>> [Pa.s] "<mu_c_species0>" ON <allcells> output
# could also do drew76, no viscosity applied to solid phases...
    END_IF

  END_IF

  # now construct viscosity and multiplier for faces
  FACE_DERIVED <mu_f_<<species>>> "faceave[harmonic](<mu_c_<<species>>>)" ON <allfaces> output # used in stress
  FACE_LOCAL <mu_f_multiplier_<<species>>> "<mu_f_<<species>>>" ON <allfaces> # used in rhie-chow

END_IF
