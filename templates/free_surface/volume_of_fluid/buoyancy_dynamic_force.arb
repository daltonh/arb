# setup buoyancy
# requires <gravity[l=:]> to be already set as either dimensional or non-dimensional gravitational vector
# in dimensional setup <gravity[l=:]> is the gravitational vector
# in non-dimensional setup <gravity[l=:]> is the \vect{g}/(|g|*Fr^2)

# include buoyancy in dynamic forces
# now uses selfreferencing to just add buoyancy contribution to existing dynamic forces
<<dim1comment>>VARIABLE <dynamic_force_c[l=1]> "<dynamic_force_c[l=1]>+<gravity[l=1]>*<vof_rho_c>"
<<dim2comment>>VARIABLE <dynamic_force_c[l=2]> "<dynamic_force_c[l=2]>+<gravity[l=2]>*<vof_rho_c>"
<<dim3comment>>VARIABLE <dynamic_force_c[l=3]> "<dynamic_force_c[l=3]>+<gravity[l=3]>*<vof_rho_c>"

# face centred component
# dxunit method
<<dynamicforcefdxunitcomment>>VARIABLE <dynamic_force_f> "<dynamic_force_f>+dot(<gravity[l=:]>,<facedxunit[l=:]>)*<vof_rho_f>"
# facegrad method
<<dynamicforceffacegradcomment>>VARIABLE <dynamic_force_f> "<dynamic_force_f>+dot(<gravity[l=:]>,<facenorm[l=:]>)*<vof_rho_f>"
# adjacentcells method
<<dynamicforcefadjacentcellscomment>>VARIABLE <dynamic_force_f> "<dynamic_force_f>+dot(<gravity[l=:]>,<facenorm[l=:]>)*<vof_rho_f>"
