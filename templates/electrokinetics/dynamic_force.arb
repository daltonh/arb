MARKDOWN
This increments the dynamic forces calculated for the navier_stokes equations to include the electrical forcing terms
dynamic force is included in the navier-stokes conservation equations, so they don't need any other modification
<U_f> should also be defined previously
END_MARKDOWN

<<dim1comment>>VARIABLE <dynamic_force_c[l=1]> "<dynamic_force_c[l=1]>-<BK^2/Re^2>*<rho_e pos>*celldivgrad[l=1](<U_f>)"
<<dim2comment>>VARIABLE <dynamic_force_c[l=2]> "<dynamic_force_c[l=2]>-<BK^2/Re^2>*<rho_e pos>*celldivgrad[l=2](<U_f>)"
<<dim3comment>>VARIABLE <dynamic_force_c[l=3]> "<dynamic_force_c[l=3]>-<BK^2/Re^2>*<rho_e pos>*celldivgrad[l=3](<U_f>)"

# method of incrementing <dynamic_force_f> needs to be consistent with the method chosen in navier_stokes/dynamic_force
# use the strings set in navier_stokes/dynamic_force to define this method

IF {{ return string_test('<<dynamic_force_f_method>>','dxunit'); }}
# dxunit method
  VARIABLE <dynamic_force_f> "<dynamic_force_f>-<BK^2/Re^2>*<rho_e_hf>*facegrad[dxunit](<U>)"
ELSE_IF {{ return string_test('<<dynamic_force_f_method>>','facegrad'); }}
# facegrad method
  VARIABLE <dynamic_force_f> "<dynamic_force_f>-<BK^2/Re^2>*<rho_e_hf>*facegrad(<U>)" ON <allfaces>
ELSE_IF {{ return string_test('<<dynamic_force_f_method>>','facegradadjacentcells'); }}
# facegradadjacentcells method
  VARIABLE <dynamic_force_f> "<dynamic_force_f>-<BK^2/Re^2>*<rho_e_hf>*facegrad[adjacentcells](<U>)"
ELSE
  ERROR 'No valid dynamicforcefmethod is chosen in the electrokinetics/dynamic_force template file: string currently set as <<dynamic_force_f_method>>'
END_IF
