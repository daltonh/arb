MARKDOWN
SlipLift Saffman
Originally coded by Nilanka
END_MARKDOWN

REPLACEMENTS D "<<slip_lift_method>>" W "saffman"
#REPLACEMENTS D "<<slip_lift_method>>" W "moraga"
#REPLACEMENTS D "<<slip_lift_method>>" W "saffmannew"

REPLACEMENTS D "<<slip_lift_dynamic_force>>" W "0" # apply using the dynamic force, rather than extra force
REPLACEMENTS D "<<slip_lift_face_based>>" W "0" # calculate at the faces, and then average to the cells

# calculate the slip velocity for this phase for all methods
INCLUDE_TEMPLATE "multiphase/multifluid/slip_velocities"

IF <<cylindrical>>
  ERROR "single_species_slip_lift not cylindrical compatible"
END_IF

NONE_CONSTANT <particle_force_slip_lift_multiplier> 1.d0

IF {{ return (string_test('<<slip_lift_method>>','saffman')) }}

  IF <<slip_lift_face_based>>
    FACE_DERIVED <gamma_f_species0[l=<<i>>,<<j>>]> "<ugrad_f_species0[l=<<i>>,<<j>>]>+<ugrad_f_species0[l=<<j>>,<<i>>]>" ON <allfaces> output
    FACE_DERIVED <gamma_magnitude_f_species0> "mag(<gamma_f_species0[l=:,:]>)" ON <allfaces> output
    FACE_DERIVED <particle_force_alpha6_f_allsolids> "(3*6.46/(4*<pi>))*sqrt(<mu_species0>*<rho_species0>/facemax(<gamma_magnitude_f_species0>,1.d-20))" ON <allfaces> output
    FACE_LOCAL <particle_force_alpha6_f_<<species>>> "<particle_force_alpha6_f_allsolids>/<a_<<species>>>" ON <allfaces>
    FACE_LOCAL <u_f_slip_<<species>>[l=<<i>>]> "<u_f_vect_<<species>>[l=<<i>>]>-<u_f_vect_species0[l=<<i>>]>" ON <allfaces> output
    FACE_DERIVED <particle_force_f_lift_slip_vect_<<species>>[l=<<i>>]> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_f_<<species>>>*dot(<u_f_slip_<<species>>[l=:]>,<gamma_f_species0[l=:,<<i>>]>)" ON <allfaces> output
    FACE_DERIVED <particle_force_f_lift_slip_<<species>>> "dot(<particle_force_f_lift_slip_vect_<<species>>[l=:]>,<facenorm[l=:]>)" ON <allfaces> output
    CELL_DERIVED <particle_force_lift_slip_<<species>>[l=<<i>>]> "<particle_force_f_lift_slip_vect_<<species>>[l=<<i>>]>" ON <allcells> output

  ELSE
# otherwise calculate at the cell and face centres separately
    # calculate strain rate magnitude for the fluid phase
    INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["

    IF 1 # Saffmans Lift
      CELL_DERIVED <particle_force_alpha6_allsolids> "(3*6.46/(4*<pi>))*sqrt(<mu_species0>*<rho_species0>/cellmax(<gamma_magnitude_species0>,1.d-20))" ON <allcells> output # should be x sqrt(2)?
      CELL_LOCAL <particle_force_alpha6_<<species>>> "<particle_force_alpha6_allsolids>/<a_<<species>>>" ON <allcells>
    ELSE
      ERROR "no other slip lifts coded up yet"
    END_IF

    CELL_DERIVED <particle_force_lift_slip_<<species>>[l=<<i>>]> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_<<species>>>*dot(<gamma_species0[l=<<i>>,:]>,<u_slip_<<species>>[l=:]>)" ON <allcells> output

  # calculate force all at faces, normal component
  # required for dynamic force treatment
    IF <<slip_lift_dynamic_force>>
      FACE_LOCAL <gamma_f_species0[l=<<i>>,<<j>>]> "<ugrad_f_species0[l=<<i>>,<<j>>]>+<ugrad_f_species0[l=<<j>>,<<i>>]>" ON <allfaces> output
      FACE_LOCAL <u_f_slip_<<species>>[l=<<i>>]> "<u_f_vect_<<species>>[l=<<i>>]>-<u_f_vect_species0[l=<<i>>]>" ON <allfaces> output
      FACE_DERIVED <particle_force_f_lift_slip_<<species>>> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_<<species>>>*ddot(<gamma_f_species0[l=:,:]>,<u_f_slip_<<species>>[l=:]>*<facenorm[l=:]>)" ON <allfaces> output
      FACE_OUTPUT <particle_force_f_lift_slip_visualise_<<species>>[l=<<i>>]> "<particle_force_f_lift_slip_<<species>>>*<facenorm[l=<<i>>]>" ON <allfaces> output
    END_IF
  END_IF

ELSE
# these methods are based on the curl of v instead of the strain rate tensor

  IF <<slip_lift_dynamic_force>>
    ERROR "the slip_lift_method = <<slip_lift_method>> is not compatible with dynamic force yet in single_species_slip_lift"
  END_IF

# calculate the curl of the fluid velocity field
  BLOCK # place this code in a block as it involves 3D vectors always, because of curl
  # not sure if this is working - not validated
    REPLACEMENTS R '<<dimensions>>' W '1,2,3'
    FACE_LOCAL <omega_f_fluid[l=<<i>>]> "<omega_f_fluid[l=<<i>>]> + permutation(<<i>>,<<j>>,<<k>>)*<ugrad_f_fluid[l=<<j>>,<<k>>]>" ON <allfaces> output # omega = nabla cross u_fluid = curl of u_fluid
    CELL_LOCAL <omega_fluid[l=<<i>>]> "<omega_f_fluid[l=<<i>>]>" ON <allcells> output
    CELL_LOCAL <omega_mag> "mag(<omega_fluid[l=:]>)" ON <allcells> output
    CELL_OUTPUT <particle_force_Re_p_<<species>>> "<rho_fluid>*mag(<u_slip_<<species>>[l=:]>)*2.d0*<a_<<species>>>/<mu_fluid>" ON <allcells>
    CELL_DERIVED <particle_force_Re_omega_<<species>>> "<rho_fluid>*<omega_mag>*(2.d0*<a_<<species>>>)**2/<mu_fluid>" ON <allcells>
    CELL_OUTPUT <particle_force_phi_<<species>>> "<particle_force_Re_p_<<species>>>*<particle_force_Re_omega_<<species>>>" ON <allcells> 
    
    IF {{ return (string_test('<<slip_lift_method>>','moraga')) }}
      NONE_CONSTANT <particle_force_lift_coefficient_<<species>>> 0.0767 # for low Re_p*Re_omega
    ELSE_IF {{ return (string_test('<<slip_lift_method>>','saffmannew')) }}
      CELL_LOCAL <particle_force_lift_coefficient_<<species>>> "3.d0*6.46/(2.d0*<pi>*sqrt(<particle_force_Re_omega_<<species>>>))" ON <allcells> # saffman 
    ELSE
      ERROR "slip_lift_method = <<slip_lift_method>> not known in single_species_slip_lift template"
    END_IF

    CELL_DERIVED <particle_force_lift_slip_<<species>>[l=<<i>>]> "-<particle_force_slip_lift_multiplier>*<particle_force_lift_coefficient_<<species>>>*<rho_<<species>>>*cross[l=<<i>>](<u_slip_<<species>>[l=:]>,<omega_f_fluid[l=:]>)" ON <domain> output
  END_BLOCK

END_IF

# now apply the forces to the conservation equations, either via the dynamic forces, or via the extra forces
IF <<slip_lift_dynamic_force>> # use the dynamic forces instead of extra forces

  VARIABLE <dynamic_force_c_<<species>>[l=<<i>>]> "<dynamic_force_c_<<species>>[l=<<i>>]> + <particle_force_lift_slip_<<species>>[l=<<i>>]>"
  VARIABLE <dynamic_force_c_species0[l=<<i>>]> "<dynamic_force_c_species0[l=<<i>>]> - <particle_force_lift_slip_<<species>>[l=<<i>>]>*<phi_bounded_<<species>>>/<phi_bounded_species0>"
  VARIABLE <dynamic_force_f_<<species>>> "<dynamic_force_f_<<species>>> + <particle_force_f_lift_slip_<<species>>>"
  VARIABLE <dynamic_force_f_species0> "<dynamic_force_f_species0> - <particle_force_f_lift_slip_<<species>>>*<phi_f_bounded_<<species>>>/<phi_f_bounded_species0>"

ELSE

# finally add these contributions onto extra force
# a positive contribution to the solid species
  VARIABLE <extra_force_<<species>>[l=<<i>>]> "<extra_force_<<species>>[l=<<i>>]> + <particle_force_lift_slip_<<species>>[l=<<i>>]>"
# and an opposite contribution to the fluid species, specific to volume fraction
  VARIABLE <extra_force_species0[l=<<i>>]> "<extra_force_species0[l=<<i>>]> - <particle_force_lift_slip_<<species>>[l=<<i>>]>*<phi_bounded_<<species>>>/<phi_bounded_species0>"

END_IF
