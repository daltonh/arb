# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: src/free_surface_functions.f90
EXTERNALS "src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: 1d_nonuniform_diffusion.arb
#INCLUDE_WORKING "1d_nonuniform_diffusion.arb"
   #++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   # the following is INCLUDED from ../1d_nonuniform_diffusion.arb without any search/replace combinations
   # arb finite volume solver
   # Copyright 2009,2010 Dalton Harvie (daltonh@unimelb.edu.au)
   #
   # arb is released under the GNU GPL.  For full details see the license directory.
   #
   #----------------------------------------------------------------------------
   # file equations.in
   VERSION 0.40
   #----------------------------------------------------------------------------
   # system constants
   
   NEWTRESTOL 1.d-12 # convergence criterion for newton solver
   NEWTSTEPMAX 10 # maximum number of steps for newton solver
   
   #-------------------------------------------------------------------
   # geometry
   
   # CELL_REGION/FACE_REGION specified by: <name> "location string" # comments
   # where location string could be: "AT x1 x2 x3" for a single point closest to these coordinates
   # where location string could be: "WITHIN BOX x1_min x2_min x3_min x1_max x2_max x3_max" for all elements within a box defined by the minimum and maximum coordinate values
   # where location string could be: "COMPOUND +<a region>-<another region>" for a + and - compound region list
   # where location string could be: "BOUNDARY OF <a region>" - boundary faces/cells contained within or surrounding <a region>
   # where location string could be: "DOMAIN OF <a region>" - domain faces/cells contained within <a region>
   # where location string could be: "ASSOCIATED WITH <a region>" - faces/cells both contained within and surrounding <a region>
   CELL_REGION <left boundary cells> "BOUNDARY OF <left domain>"
   CELL_REGION <all left> "COMPOUND <left domain>+<left boundary cells>"
   CELL_REGION <right boundary cells> "BOUNDARY OF <right domain>"
   CELL_REGION <all right> "COMPOUND <right domain>+<right boundary cells>"
   
   # MSH_FILE instructs arb to read or write a gmsh file (location is read location - write location will always be within the output directory)
   # output options are: output,centringoutput,meshoutput,centringmeshoutput,nooutput
   # input options are: input,centringinput,meshinput,centringmeshinput,noinput
   # data output format options for CELL centred data (which overwrite individual variable options if specified): elementdata,elementnodedata,elementnodelimiteddata
   MSH_FILE "line.msh"
   
   # variable definition reference:
   # REGION_LIST <region_1> <region_2> ... <region_n> # comments: line has the ordered names of any regions
   # (CELL_|FACE_)REGION_CONSTANT <name> [multiplier*units] numerical_value_for_region_1 .. value_for_region_n options # comments: sets a constant that varies with region
   # (CELL_|FACE_|NONE_|)CONSTANT <name> [multiplier*units] numerical_value ON <region> options # comments: sets a constant specific to one region or no regions and has the form
   # (CELL_|FACE_|NONE|)CONSTANT <name> [units] "expression (involving only constants)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)TRANSIENT <name> [units] "expression (initial value, optional, evaluated in descending relstep order)" "expression (evaluated in ascending relstep order)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)NEWTIENT <name> [units] "expression (initial value, optional, evaluated in descending relstep order)" "expression (evaluated in ascending relstep order)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)DERIVED <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)UNKNOWN <name> [units] "expression (initial value, optional)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)EQUATION <name> [units] "expression (equation equaling zero)" ON <region> options # comments
   # (CELL_|FACE_|NONE|)OUTPUT <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)CONDITION <name> [units] "expression" ON <region> options # comments
   # (CELL_|FACE_|NONE|)LOCAL <name> [units] "expression" ON <region> options # comments
   
   # options include (with p=perl and f=fortran indicating which piece of code needs to know the option):
   #p  derivative/noderivative - for DERIVED, EQUATION, LOCAL : do or do not calculate Jacobian derivatives for this variable
   #p  positive/negative/nocheck - for DERIVED, UNKNOWN, EQUATION, LOCAL : check at each iteration that variable is positive/negative
   #f  output/nooutput - for ALL : output compound to msh files
   #f  componentoutput/nocomponentoutput - for ALL : output just this component to msh files
   #f  stepoutput/stepoutputnoupdate/nostepoutput - for ALL : output compound to step file.  The noupdate one does not update the variable when the step file is written (needed for recording when output occurred for example).
   #f  componentstepoutput/componentstepoutputnoupdate/nocomponentstepoutput - for ALL : output just this component to step files
   #f  input/noinput - for CONSTANT, TRANSIENT, UNKNOWN : read in compound from msh files - only these 3 variable types can be read in
   #f  componentinput/nocomponentinput - for CONSTANT, TRANSIENT, UNKNOWN : read in just this component from msh files - only these 3 variable types can be read in
   #f  elementdata,elementnodedata,elementnodelimiteddata - for CELL centred var : data type when writing this compound (unless gmesh overide is specified) (also same for components with prefix component)
   #p  outputcondition,stopcondition,convergencecondition,bellcondition - for CONDITION, type of condition, can have multiple conditions for the one variable
   #f  magnitude=value - for EQUATION, UNKNOWN specifies the initial variable magnitude to be used (rather than being based on the initial variable values) - a negative number will cause the magnitude to be set based upon the initial values (which is the default)
   #f  dynamicmagnitude/staticmagnitude - for EQUATION, UNKNOWN, adjust magnitude of variable dynamically as the simulation progresses, or keep it constant at the initial magnitude
   #f  dynamicmagnitudemultiplier=value - for EQUATION, UNKNOWN, multiplier to use when adjusting magnitude of variable dynamically (=>1.d0, with 1.d0 equivalent to static magnitudes, and large values placing no restriction on the change in magnitude from one newton iteration to the next)
   #   clearoptions - remove all previously (to the left and above the clearoptions word) user-specified options for this variable
   
   # physical data
   CONSTANT <D left> [m^2/s] 2.d-3 # diffusivity on the left of the domain
   CONSTANT <D right> [m^2/s] 1.d-3 # diffusivity on the right of the domain
   CONSTANT <T left> [C] 100.d0 # temperature 
   CONSTANT <T right> [C] 200.d0 # temperature
   
   CELL_UNKNOWN <T> [K] "1.d0" # temperature
   CELL_DERIVED <D nonuniform> "celldelta(<all left>)*<D left>+celldelta(<all right>)*<D right>" ON <all cells>
   FACE_DERIVED <D harmonic> "faceave[harmonic](<D nonuniform>)" ON <all faces> output
   CELL_EQUATION <T transport> "-celldiv(<D harmonic>*facegrad(<T>))" ON <domain> # diffusion equation
   FACE_EQUATION <T left bc> "<T>-<T left>" ON <left boundary> # set temperature on inlet
   FACE_EQUATION <T right bc> "<T>-<T right>" ON <right boundary> # set temperature on inlet
   
   NONE_OUTPUT <T average> "cellsum(<T>*<cellvol>,<domain>)/cellsum(<cellvol>,<domain>)" # find average temperature in entire domain
   
   FACE_OUTPUT <D harmonic test> "2.*cellproduct(<D nonuniform>)/cellsum(<D nonuniform>)" ON <all faces> output
   NONE_OUTPUT <D error infty norm> "facemax(abs(<D harmonic>-<D harmonic test>),,<all faces>)"
   
   NONE_OUTPUT <x left> "facesum(<cellx[l=1]>,<left boundary>)"
   NONE_OUTPUT <x centre> "facesum(<cellx[l=1]>,<centre>)"
   NONE_OUTPUT <x right> "facesum(<cellx[l=1]>,<right boundary>)"
   NONE_OUTPUT <L left> "<x centre>-<x left>"
   NONE_OUTPUT <L right> "<x right>-<x centre>"
   NONE_OUTPUT <q> "-(<T right>-<T left>)/(<L left>/<D left>+<L right>/<D right>)"
   CELL_OUTPUT <T analytical> "celldelta(<all left>)*(-<q>/<D left>*(<cellx[l=1]>-<x left>)+<T left>)+celldelta(<all right>)*(-<q>/<D right>*(<cellx[l=1]>-<x right>)+<T right>)"
   CELL_OUTPUT <T error> "<T>-<T analytical>"
   NONE_OUTPUT <T error infty norm> "cellmax(abs(<T error>),,<all cells>)"
   
   #-------------------------------------------------------------------
   # INCLUDE FINISHED for ../1d_nonuniform_diffusion.arb
   #--------------------------------------------------------
##################################################################################
