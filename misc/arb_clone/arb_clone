#!/bin/bash
# file arb_clone
#
# Copyright 2009-2017 Dalton Harvie (daltonh@unimelb.edu.au)
# 
# This file is part of arb finite volume solver, referred to as `arb'.
# 
# arb is a software package designed to solve arbitrary partial
# differential equations on unstructured meshes using the finite volume
# method.  Primarily it consists of fortran source code, perl source
# code and shell scripts.  arb replies on certain third party software
# to run, most notably the computer algebra system maxima
# <http://maxima.sourceforge.net/> which is released under the GNU GPL.
# 
# The original copyright of arb is held by Dalton Harvie, however the
# project is now under collaborative development.
# 
# arb is released under the GNU GPL.  arb is free software: you can
# redistribute it and/or modify it under the terms of the GNU General
# Public License (version 3) as published by the Free Software Foundation.
# You should have received a copy of the GNU General Public Licence
# along with arb (see file licence/gpl.txt after unpacking).  If not,
# see <http://www.gnu.org/licences/>.
# 
# arb is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public Licence
# for more details.
# 
# For full details of arb's licence see the licence directory.
# 
# The current homepage for the arb finite volume solver project is
# <http://people.eng.unimelb.edu.au/daltonh/downloads/arb>.
#
#-------------------------------------------------------------------------
#
# script to clone arb from a local or remote directory
# updated with more options 2/3/15
# will be cloned into directory named arb_branch by default
# assumes that ssh keys have been setup, otherwise use http transport
# suggest putting this somewhere in your PATH
#
# exit status:
# 0: successful
# 1: failed
# 
#-------------------------------------------------------------------------------
# usage function
usage () {
  echo "This script gets an arb version from a local or remote git repository";
  echo "HELP/USAGE: arb_clone [options]";
  echo
  echo "Possible options:";
  echo "  -b|--branch: branch to get (default = $branch)";
  echo "  -d|--directory: output directory name to use (default = arb_$branch)";
  echo "  -l|--local: clone from local directory if possible (default)";
  echo "  -r|--remote: clone from remote server (using ssh by default)";
  echo "  -u|--user: user name that hosts arb project (default = $user)";
  echo "  -p|--port: port number of git server for http requests (default = $port)";
  echo "  --server: server name to use, only for remote ssh (default = $server)";
  echo "  -h|--http: use http transport from git rather than ssh (for remote)";
  echo "  -s|--ssh: use ssh transport from git rather than http (default for remote)";
  echo "  --local-directory: local arb_dir directory use, only for local (default is $local_dir)";
  echo "  --develop: get develop branch (default)";
  echo "  --master: get master branch";
  echo "  --date: add date to default branch name TODO";
  echo "  --clean-git: remove git repository files TODO";
  echo "  --archive: tar and gzip subsequent cloned branch (implies --date and --clean-git) TODO";
# echo "  --closed-source: include any closed-source directory contents TODO";
  echo "  -h|--help: display this HELP INFO";
  echo;
  exit 1;
}
# echo "Clones an arb directory from either the local repository or from a remote repository";
# echo "If cloned_directory_name is given, then placed there, otherwise in default directory name";
#-------------------------------------------------------------------------------
# function to dereference symlinks and find the real path of a file
# call with the (possibly symlinked) file (not a directory)
# result is returned in (global) variable real_path - no not any more
# now called as a="$(resolve_real_path "$a")";
function resolve_real_path {
  real_path=$1;
  next_path=`readlink $real_path`;
  while [ -n "$next_path" ] ; do
    real_path="$(dirname "$real_path")/$next_path";
    next_path=`readlink $real_path`;
  done
# simplify directory links
  real_path="$(sanitise_filename "$real_path")";
# now return this as a string
  echo "$real_path";
  unset next_path;
  unset real_path;
}
#-------------------------------------------------------------------------------
# idea from http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
function sanitise_filename {
  echo "$(cd "$(dirname "$1")" && pwd -P)/$(basename "$1")";
}
#-------------------------------------------------------------------------------
# main script:

file_separator="##################################################################################"
#---------------------------
# define some default variables, directories and flags to say what has to be done

working_dir=`pwd -P`; # directory from which the script is run
# get the real path to the arb script with any symlinks resolved/dereferenced
arb_script="${BASH_SOURCE[0]}";
arb_script="$(resolve_real_path "$arb_script")"; # the result of resolve_real_path is held in this global variable
bin_dir="$(cd "$(dirname "$arb_script")" && pwd -P)"; # directory that holds this arb script, which determines...
arb_dir="${bin_dir%"/misc/arb_clone"}"; # arb root directory, known as arb_dir, with no trailing slash, may or may not be valid....

errorstatus=0;

#-------------------------------------------------------------------------------
# default variables
user="$USER"; # use system variable
branch="develop"; # default branch to use, now develop
server="vof.chemeng.unimelb.edu.au";
directory="";
local_dir="$arb_dir";
port="8000";
transport="local"; # default remote transport is ssh, but others are http and local
#-------------------------------------------------------------------------------
# better case implementation from http://www.linuxtopia.org/online_books/advanced_bash_scripting_guide/testbranch.html
while [ $# -gt 0 ]; do
  case "$1" in
    "-b"|"--branch") if [ ! -n "$2" ]; then echo "ERROR: branch not understood from option list"; usage; fi; branch=$2; shift;;
    "-u"|"--user") if [ ! -n "$2" ]; then echo "ERROR: user not understood from option list"; usage; fi; user=$2; shift;;
    "--server") if [ ! -n "$2" ]; then echo "ERROR: server not understood from option list"; usage; fi; server=$2; shift;;
    "--local-directory") if [ ! -n "$2" ]; then echo "ERROR: local-directory not understood from option list"; usage; fi; local_dir=$2; shift;;
    "-d"|"--directory") if [ ! -n "$2" ]; then echo "ERROR: directory not understood from option list"; usage; fi; directory=$2; shift;;
    "-p"|"--port") if [ ! -n "$2" ]; then echo "ERROR: port not understood from option list"; usage; fi; port=$2; shift;;
    "-h"|"--http") transport="http";;
    "-s"|"--ssh") transport="ssh";;
    "-r"|"--remote") transport="ssh";;
    "-l"|"--local") transport="local";;
    "--develop") branch="develop";;
    "--master") branch="master";;
    "-h"|"--help") usage;;
    "--"*|"-"*) echo "ERROR: unknown option $i passed to getarb"; usage;;
    *) echo "ERROR: unknown command line entry $i"; usage;;
  esac
  shift
done

#-----------------------------------------------------------------------------

if [ "${directory}" = "" ]; then directory="arb_$branch"; echo "setting output directory based on branch to $directory"; fi;

#-----------------------------------------------------------------------------
# if local is specified, check that local git repository exists

if [ $transport == "local" ] ; then
# now determine whether arb_clone is in a valid arb_dir, or just by itself
# first test whether other arb related directories exist
  for sub_dir in "src" "misc" "templates" "examples" ; do
    if [ ! -d "$local_dir/$sub_dir" ] ; then
      echo "INFO: cannot find $local_dir/$sub_dir relative to the arb_clone script.  A local repository cannot be found from the arb_clone location";
      echo "INFO: changing transport to ssh";
      transport="ssh"; # change transport to remote
      break; # exit the loop prematurely
    fi;
  done;
fi;
  
if [ $transport == "local" ] ; then
# now check whether git thinks this is a valid directory
  git_check="$(git -C $local_dir rev-parse 2>&1)"; # send both stdout and stderr to the one variable
# echo "git_check = |$git_check|";
  if [ ! -z "$git_check" ] ; then
    echo "INFO: the local directory $local_dir is not a valid git repository.  Error from git: $git_check";
    echo "INFO: changing transport to ssh";
    transport="ssh"; # change transport to remote
  fi;
# echo "git command: "`git -C $local_dir rev-parse`;
fi;

#-----------------------------------------------------------------------------
# now do the clone

if [ $transport == "ssh" ] ; then
  echo "performing: git clone -b $branch git@$server:$user/arb.git $directory";
  git clone -b $branch git@$server:$user/arb.git $directory;
elif [ $transport == "http" ] ; then
  echo "performing: git clone -b $branch http://$server:$port/$user/arb.git $directory";
  git clone -b $branch http://$server:$port/$user/arb.git $directory;
else
  echo "performing: git clone -b $branch $local_dir $directory";
  git clone -b $branch $local_dir $directory;
fi


exit $errorstatus ;
# done
#-------------------------------------------------------------------------------
