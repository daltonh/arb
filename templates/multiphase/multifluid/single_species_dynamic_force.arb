MARKDOWN
Here we add contributions to the dynamic force due to the already calculated <p_species> and <p^_species> for each disperse phase
END_MARKDOWN

# now uses <phi_dynamic_c_<<species>>> which must be defined
VARIABLE <dynamic_force_c_<<species>>[l=<<i>>]> '<dynamic_force_c_<<species>>[l=<<i>>]>-celldivgrad[l=<<i>>](<p_f_<<species>>>)/<phi_dynamic_c_<<species>>>-celldivgrad[l=<<i>>](<p^_f_<<species>>>)'

# IF 0
# # use wide span phi on base
#   VARIABLE <dynamic_force_c_<<species>>[l=<<i>>]> '<dynamic_force_c_<<species>>[l=<<i>>]>-celldivgrad[l=<<i>>](<p_f_<<species>>>)/(cellave(<phi_f_bounded_harmonic_<<species>>>))-celldivgrad[l=<<i>>](<p^_f_<<species>>>)'
# ELSE_IF 1
# # cell centred from face centred, and variable interpolation of face centred

# # set up a constant weighting factor that determines how local variables are going to be when calculating the non-specific gradient dynamic force terms
# # also used in calculating p_f_<<species>> and/or components
# # NONE_CONSTANT <dynamic_face_interpolation> 0.d0 # this is a constant that controls whether interpolation to face is via adjacentcells (0) or normal faceave (1)
# # now the string is set in single_species_pressure

# # FACE_DERIVED <phi_dynamic_f_<<species>>> "facemax(facemin(<dynamic_face_interpolation>*faceave(<phi_bounded_<<species>>>)+(1.d0-<dynamic_face_interpolation>)*faceave[adjacentcells](<phi_bounded_<<species>>>),1.d0-<phi_tol>),<phi_tol>)" ON <allfaces> output

# ELSE
#   VARIABLE <dynamic_force_c_<<species>>[l=<<i>>]> '<dynamic_force_c_<<species>>[l=<<i>>]>-celldivgrad[l=<<i>>](<p_f_<<species>>>)/(<phi_bounded_<<species>>>)-celldivgrad[l=<<i>>](<p^_f_<<species>>>)'
# END_IF

# trying different phi variables for the osmotic pressure term
#REPLACEMENTS R "<<dynamic_force_f_phi_variable>>" W "<phi_f_bounded_harmonic_<<species>>>" R "<<dynamic_force_f_phi_variable_species0>>" W "<phi_f_bounded_harmonic_species0>"
REPLACEMENTS R "<<dynamic_force_f_phi_variable>>" W "<phi_dynamic_f_<<species>>>" R "<<dynamic_force_f_phi_variable_species0>>" W "<phi_dynamic_f_species0>"
#REPLACEMENTS R "<<dynamic_force_f_phi_variable>>" W "<phi_f_bounded_adjacent_nob_<<species>>>" R "<<dynamic_force_f_phi_variable_species0>>" W "<phi_f_bounded_adjacent_nob_species0>" # version1, unstable in presence of large phi gradients
#REPLACEMENTS R "<<dynamic_force_f_phi_variable>>" W "<phi_f_bounded_adjacent_<<species>>>"

# now deal with dynamic_force_f
REPLACEMENTS D "<<facegrad_method>>" W "" # define scope of averaging variable, and default of blank which is facegrad
IF {{ return string_test('<<dynamic_force_f_method>>','dxunit'); }}
  REPLACEMENTS S "<<facegrad_method>>" W "dxunit"
ELSE_IF {{ return string_test('<<dynamic_force_f_method>>','facegrad'); }}
  REPLACEMENTS S "<<facegrad_method>>" W ""
ELSE_IF {{ return string_test('<<dynamic_force_f_method>>','facegradadjacentcells'); }}
  REPLACEMENTS S "<<facegrad_method>>" W "adjacentcells"
END_IF

VARIABLE <dynamic_force_f_<<species>>> "<dynamic_force_f_<<species>>>-facegrad[<<facegrad_method>>](<p_<<species>>>)/(<<dynamic_force_f_phi_variable>>)-facegrad[<<facegrad_method>>](<p^_<<species>>>)" output

# for visualisation
FACE_OUTPUT <dynamic_force_f_vect_<<species>>[l=<<i>>]> "<dynamic_force_f_<<species>>>*<facenorm[l=<<i>>]>" ON <allfaces>

IF {{ return (arb_defined(string_eval('<p^_<<species>>_species0>','text'))) }}
  IF {{ return (!(arb_defined(string_eval('<p^_f_<<species>>_species0>','text')))) }}
    ERROR "<p^_f_<<species>>_species0> should be defined"
  END_IF
# reaction force
#  VARIABLE <dynamic_force_c_species0[l=<<i>>]> '<dynamic_force_c_species0[l=<<i>>]>+<phi_bounded_<<species>>>*celldivgrad[l=<<i>>](<p^_f_<<species>>_species0>)/(<phi_bounded_species0>)'
#  VARIABLE <dynamic_force_f_species0> "<dynamic_force_f_species0>+<<dynamic_force_f_phi_variable>>*facegrad[<<facegrad_method>>](<p^_<<species>>_species0>)/(<<dynamic_force_f_phi_variable_species0>>)"
# additional force on fluid
  VARIABLE <dynamic_force_c_species0[l=<<i>>]> '<dynamic_force_c_species0[l=<<i>>]>-<phi_bounded_<<species>>>*celldivgrad[l=<<i>>](<p^_f_<<species>>_species0>)/(<phi_bounded_species0>)'
  VARIABLE <dynamic_force_f_species0> "<dynamic_force_f_species0>-<<dynamic_force_f_phi_variable>>*facegrad[<<facegrad_method>>](<p^_<<species>>_species0>)/(<<dynamic_force_f_phi_variable_species0>>)"
END_IF

IF {{ return (arb_defined(string_eval('<p_<<species>>_species0>','text'))) }}
  IF {{ return (!(arb_defined(string_eval('<p_f_<<species>>_species0>','text')))) }}
    ERROR "<p_f_<<species>>_species0> should be defined"
  END_IF
  VARIABLE <dynamic_force_c_species0[l=<<i>>]> '<dynamic_force_c_species0[l=<<i>>]>-celldivgrad[l=<<i>>](<p_f_<<species>>_species0>)/(<phi_bounded_species0>)'
  VARIABLE <dynamic_force_f_species0> "<dynamic_force_f_species0>-facegrad[<<facegrad_method>>](<p_<<species>>_species0>)/(<<dynamic_force_f_phi_variable_species0>>)"
END_IF

