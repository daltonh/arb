MARKDOWN
Here we calculate the surface tension force due to an interface in the presence of a surfactant concentration.

Uses CSF method.

Need to think about masks etc
END_MARKDOWN


WARNING "surfactant_csf_force.arb template poorly tested"

#-------------------------------------------------------------------
# marangoni forces using a possible CSF formulation
  
# create delta functions
INCLUDE_TEMPLATE "free_surface/volume_of_fluid"
INCLUDE "delta_magnitude" # note, this is based on a limited phi
FACE_DERIVED <vof_phigrad_delta_mag_f> "faceave[adjacentcells](<vof_phigrad_delta_mag>)" ON <vof_interface_mask_f[r=1]>
{{ return vector_expand(
  'CELL_LOCAL <vof_phigrad_delta_unit[l=$l]> [1] "<vof_phigrad_delta[l=$l]>/<vof_phigrad_delta_mag>" ON <vof_delta_mask[r=1]>'
  ); }}

# create face centred normals for the surfactant diffusion equation
{{ return vector_expand(
  'FACE_DERIVED <vof_phigrad_f[l=$l]> "facegrad[l=$l](<vof_phi_s>)" ON <allfaces>'
  ); }}
FACE_DERIVED <vof_phigrad_mag_f> "sqrt(facemax(dot(<vof_phigrad_f[l=:]>,<vof_phigrad_f[l=:]>),1.d-10))" ON <allfaces>
{{ return vector_expand(
  'FACE_DERIVED <vof_phigrad_unit_f[l=$l]> "<vof_phigrad_f[l=$l]>/<vof_phigrad_mag_f>" ON <allfaces> output'
  ); }}

# create surface tension force prior to delta application
# <c_s> needs to reflect the local surfactant concentration
# if surfactant transport isn't simulated then <c_s> needs to be defined here

REPLACEMENTS D '<<lipid_bilayer>>' W '0' D '<<lipid_monolayer>>' W '0'

IF <<lipid_monolayer>>
# membrane
  CONSTANT <sigma_m> "<S>" # breakage strength of lipids
  CONSTANT <sigma_dash> 1.d1 # dsigma/dLambda at Lambda_max (1.d0 works, 1.d1 is harder to converge but also works, conserves area more)
  CELL_DERIVED <sigma_c_c> "<sigma_m>*tanh(<sigma_dash>*(<Lambda_max>-<Lambda>)/<sigma_m>)" ON <allcells> output
  FACE_DERIVED <sigma_f> "faceave[adjacentcells](<sigma_c_c>)" ON <allfaces> output
ELSE_IF 1
# droplet with surfactant
  CONSTANT <sigma_m_multiplier> 0.5d0
  CONSTANT <sigma_m> "<sigma_m_multiplier>*<S>" # breakage strength of surfactant
  CONSTANT <sigma_dash> 1.d0 # dsigma/dLambda at Lambda_max
  CELL_DERIVED <sigma_c_c> "<S>-<sigma_m>*(1.d0-tanh(<sigma_dash>*(<Lambda_max>-<Lambda>)/<sigma_m>))" ON <allcells> output
  FACE_DERIVED <sigma_f> "faceave[adjacentcells](<sigma_c_c>)" ON <allfaces> output
ELSE
  CONSTANT <del_sigma> 0.2d0
  CONSTANT <sigma_min> 0.1d0
  FACE_DERIVED <sigma_f> "facemax(1.d0-<del_sigma>*faceave(cellmax(<c_s>,0.d0)/cellmax(<vof_phigrad_delta_mag>,<eps_delta>)),<sigma_min>)" ON <allfaces> output
END_IF
CELL_DERIVED <sigma_c> "<sigma_f>" ON <allcells> output

# define face centred interfacial stress 
               <<dim1comment>>FACE_LOCAL <vof_tau_s_f[l=1,1]> "1.d0-<vof_phigrad_unit_f[l=1]>*<vof_phigrad_unit_f[l=1]>" ON <vof_delta_mask_f[r=1]> output
               <<dim2comment>>FACE_LOCAL <vof_tau_s_f[l=2,2]> "1.d0-<vof_phigrad_unit_f[l=2]>*<vof_phigrad_unit_f[l=2]>" ON <vof_delta_mask_f[r=1]>
               <<dim3comment>>FACE_LOCAL <vof_tau_s_f[l=3,3]> "1.d0-<vof_phigrad_unit_f[l=3]>*<vof_phigrad_unit_f[l=3]>" ON <vof_delta_mask_f[r=1]>
<<dim1comment>><<dim2comment>>FACE_LOCAL <vof_tau_s_f[l=1,2]> "-<vof_phigrad_unit_f[l=1]>*<vof_phigrad_unit_f[l=2]>" ON <vof_delta_mask_f[r=1]>
<<dim1comment>><<dim3comment>>FACE_LOCAL <vof_tau_s_f[l=1,3]> "-<vof_phigrad_unit_f[l=1]>*<vof_phigrad_unit_f[l=3]>" ON <vof_delta_mask_f[r=1]>
<<dim2comment>><<dim3comment>>FACE_LOCAL <vof_tau_s_f[l=2,3]> "-<vof_phigrad_unit_f[l=2]>*<vof_phigrad_unit_f[l=3]>" ON <vof_delta_mask_f[r=1]>
<<dim2comment>><<dim1comment>>FACE_LOCAL <vof_tau_s_f[l=2,1]> "<vof_tau_s_f[l=1,2]>" ON <vof_delta_mask_f[r=1]>
<<dim3comment>><<dim1comment>>FACE_LOCAL <vof_tau_s_f[l=3,1]> "<vof_tau_s_f[l=1,3]>" ON <vof_delta_mask_f[r=1]>
<<dim3comment>><<dim2comment>>FACE_LOCAL <vof_tau_s_f[l=3,2]> "<vof_tau_s_f[l=2,3]>" ON <vof_delta_mask_f[r=1]>

{{ return vector_expand(
  'FACE_LOCAL <vof_facegrad_sigma[l=$l]> "facegrad[l=$l](<sigma_c>)" ON <vof_delta_mask_f[r=1]> output'
  ); }}
{{ return vector_expand(
  'FACE_DERIVED <vof_marangoni_f[l=$l]> [1] "dot(<vof_facegrad_sigma[l=:]>,<vof_tau_s_f[l=:,$l]>)" ON <vof_delta_mask_f[r=1]>'
  ); }}

INCLUDE "force" # force done back on the fluid mesh

IF {{ return string_test('<<cylindrical>>','1') }}
  WARNING "not sure if surfactant_csf_force template file can handle cylindrical coordinates?"
END_IF

# add marangoni forces to surface tension force
<<dim1comment>>VARIABLE <vof_F_c[l=1]> "<sigma_c>*<vof_F_c[l=1]>+<vof_marangoni_f[l=1]>*<vof_phigrad_delta_mag>" output
<<dim2comment>>VARIABLE <vof_F_c[l=2]> "<sigma_c>*<vof_F_c[l=2]>+<vof_marangoni_f[l=2]>*<vof_phigrad_delta_mag>"
<<dim3comment>>VARIABLE <vof_F_c[l=3]> "<sigma_c>*<vof_F_c[l=3]>+<vof_marangoni_f[l=3]>*<vof_phigrad_delta_mag>"
VARIABLE <vof_F_f> "<sigma_f>*<vof_F_f>+dot(<vof_marangoni_f[l=:]>,<facedxunit[l=:]>)*<vof_phigrad_delta_mag_f>" output

IF 1 # visualise marangoni force
  <<dim1comment>>CELL_OUTPUT <vof_marangoni_F_c[l=1]> "<vof_marangoni_f[l=1]>*<vof_phigrad_delta_mag>"
  <<dim2comment>>CELL_OUTPUT <vof_marangoni_F_c[l=2]> "<vof_marangoni_f[l=2]>*<vof_phigrad_delta_mag>"
  <<dim3comment>>CELL_OUTPUT <vof_marangoni_F_c[l=3]> "<vof_marangoni_f[l=3]>*<vof_phigrad_delta_mag>"
END_IF
