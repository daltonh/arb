#(comment created during unwrap): new block = resources/test_suite_results/gnu/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /home/daltonh/fortran/arb/testsuite/arb_develop/src/free_surface_functions.f90
EXTERNALS "/home/daltonh/fortran/arb/testsuite/arb_develop/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: minimal_kernel_example.arb
   #(comment created during unwrap): new block = minimal_kernel_example.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "minimal_kernel_example.arb"
   VERSION 0.51 # the version of syntax used in this file
   
   # the following strings describe the simulation and are passed to the output files
   INFO_TITLE "Simple file containing equations that only need minimal kernels to be calculated"
   INFO_DESCRIPTION "Used to bugtest kernel_availability"
   INFO_AUTHOR "Dalton Harvie"
   INFO_DATE "11/2/15" # interpreted as the last modification date
   
   MSH_FILE "surface.msh"
   
   # cell based:
   CELL_UNKNOWN <phi_c> "1.d0" ON <allcells>
   #NONE_CONSTANT <source> 1.d0
   
   # the following only needs facegrad
   #CELL_EQUATION <phi_c domain> "celldiv(facegrad(<phi_c>))-<source>" ON <domain>
   
   # the following needs no kernels
   #CELL_EQUATION <phi_c domain> "<phi_c>-<source>" ON <domain>
   #CELL_EQUATION <phi_c boundaries> "<phi_c>" ON <boundarycells>
   
   # the following needs cellfromnodeave
   CELL_EQUATION <phi_c equation> "<phi_c>-cellfromnodeave(<nodex[l=1]>)" ON <allcells>
   CELL_OUTPUT <phi_c error> "<phi_c>-<cellx[l=1]>" ON <allcells>
   
   # node based:
   NODE_UNKNOWN <phi_n> "1.d0" ON <allnodes>
   # the following needs nodegrad
   NODE_EQUATION <phi_n equation> "<phi_n>-nodegrad[l=1](<cellx[l=1]>)" ON <allnodes>
   # the following needs nodeave
   #NODE_EQUATION <phi_n equation> "<phi_n>-nodeave(<cellx[l=1]>)" ON <allnodes>
   
   # face based:
   #FACE_UNKNOWN <phi_f> "1.d0" ON <allfaces>
   # the following needs facegrad
   #FACE_EQUATION <phi_f equation> "<phi_f>-facegrad[l=1](<cellx[l=1]>)" ON <allfaces>
   # the following needs faceave
   #FACE_EQUATION <phi_f equation> "<phi_f>-faceave(<cellx[l=1]>)" ON <allfaces>
   
   #(hash inserted during unwrap)INCLUDE_TEMPLATE "general"
      #(comment created during unwrap): new block = ../../templates/general/element_information.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "element_information"
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)Compiles basic geometrical and index data about the elements in the mesh
      #(hash inserted during unwrap)END_MARKDOWN
      
      # includes all element information files from general
         #(comment created during unwrap): new block = ../../templates/general/element_coordinates.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "element_coordinates.arb"
         CELL_OUTPUT <cellx output[l=1]> "<cellx[l=1]>" ON <allcells>
         CELL_OUTPUT <cellx output[l=2]> "<cellx[l=2]>" ON <allcells>
         CELL_OUTPUT <cellx output[l=3]> "<cellx[l=3]>" ON <allcells>
         FACE_OUTPUT <facex output[l=1]> "<facex[l=1]>" ON <allfaces>
         FACE_OUTPUT <facex output[l=2]> "<facex[l=2]>" ON <allfaces>
         FACE_OUTPUT <facex output[l=3]> "<facex[l=3]>" ON <allfaces>
         NODE_OUTPUT <nodex output[l=1]> "<nodex[l=1]>" ON <allnodes>
         NODE_OUTPUT <nodex output[l=2]> "<nodex[l=2]>" ON <allnodes>
         NODE_OUTPUT <nodex output[l=3]> "<nodex[l=3]>" ON <allnodes>
         #(comment created during unwrap): new block = ../../templates/general/element_counts.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "element_counts.arb"
         FACE_OUTPUT <face_nodes> "nodesum(1.d0,region=<faceknodes>)" ON <allfaces>
         CELL_OUTPUT <cell_nodes> "nodesum(1.d0,region=<cellknodes>)" ON <allcells>
         CELL_OUTPUT <cell_faces> "facesum(1.d0,region=<celljfaces>)" ON <allcells>
         #(comment created during unwrap): new block = ../../templates/general/element_dimensions.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "element_dimensions.arb"
         CELL_OUTPUT <celldx output[l=1]> "<celldx[l=1]>" ON <allcells>
         CELL_OUTPUT <celldx output[l=2]> "<celldx[l=2]>" ON <allcells>
         CELL_OUTPUT <celldx output[l=3]> "<celldx[l=3]>" ON <allcells>
         CELL_OUTPUT <celldxmax output> "<celldxmax>" ON <allcells>
         CELL_OUTPUT <cellvol output> "<cellvol>" ON <allcells>
         FACE_OUTPUT <facedx output> "<facedx>" ON <allfaces>
         FACE_OUTPUT <facearea output> "<facearea>" ON <allfaces>
         #(comment created during unwrap): new block = ../../templates/general/element_indices.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "element_indices.arb"
         CELL_OUTPUT <icell output> "<icell>" ON <allcells>
         FACE_OUTPUT <jface output> "<jface>" ON <allfaces>
         NODE_OUTPUT <knode output> "<knode>" ON <allnodes>
         #(comment created during unwrap): new block = ../../templates/general/face_normals.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "face_normals.arb"
         #(hash inserted during unwrap)MARKDOWN
         #(hash inserted during unwrap)Here we output the face normals (norm, tang1 and tang2) as vectors
         #(hash inserted during unwrap)END_MARKDOWN
         
         FACE_OUTPUT <facenorm output[l=1]> '<facenorm[l=1]>' ON <allfaces>
         FACE_OUTPUT <facetang1 output[l=1]> '<facetang1[l=1]>' ON <allfaces>
         FACE_OUTPUT <facetang2 output[l=1]> '<facetang2[l=1]>' ON <allfaces>
         FACE_OUTPUT <facenorm output[l=2]> '<facenorm[l=2]>' ON <allfaces>
         FACE_OUTPUT <facetang1 output[l=2]> '<facetang1[l=2]>' ON <allfaces>
         FACE_OUTPUT <facetang2 output[l=2]> '<facetang2[l=2]>' ON <allfaces>
         FACE_OUTPUT <facenorm output[l=3]> '<facenorm[l=3]>' ON <allfaces>
         FACE_OUTPUT <facetang1 output[l=3]> '<facetang1[l=3]>' ON <allfaces>
         FACE_OUTPUT <facetang2 output[l=3]> '<facetang2[l=3]>' ON <allfaces>
         
         FACE_CONSTANT <dot_facenorm_facedxunit> "dot(<facenorm[l=:]>,<facedxunit[l=:]>)" ON <allfaces> output # also used in navier_stokes/p_error.arb
      #(comment created during unwrap): new block = ../../templates/general/kernel_information.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "kernel_information"
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)These parameters characterise the quality of the kernel elements
      #(hash inserted during unwrap)END_MARKDOWN
      
      CELL_OUTPUT <crosskernel output> "<crosskernel>" ON <allcells>
      CELL_OUTPUT <centralkernel output> "<centralkernel>" ON <allcells>
      CELL_OUTPUT <kernelsum output> "<kernelsum>" ON <allcells>
      CELL_OUTPUT <cell deriv kernel elements output> "cellsum(1.d0,region=<cellkernelregion[l=1]>)" ON <allcells>
      FACE_OUTPUT <face deriv kernel elements output> "cellsum(1.d0,region=<facekernelregion[l=1]>)" ON <allfaces>
      NODE_OUTPUT <node deriv kernel elements output> "cellsum(1.d0,region=<nodekernelregion[l=1]>)" ON <allnodes>
      CELL_OUTPUT <celldxkernel output> "<celldxkernel>" ON <allcells>
      FACE_OUTPUT <facedxkernel output> "<facedxkernel>" ON <allfaces>
      NODE_OUTPUT <nodedxkernel output> "<nodedxkernel>" ON <allnodes>
      #(comment created during unwrap): new block = ../../templates/general/mesh_quality.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "mesh_quality"
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)Compiles various parameters that describe the quality of the mesh
      #(hash inserted during unwrap)END_MARKDOWN
      
      # some metrics on mesh quality
         #(comment created during unwrap): new block = ../../templates/general/cell_aspect_ratio.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "cell_aspect_ratio" # keep < 100 say for structured meshes, or as close to 1 as possible
         CELL_OUTPUT <cell aspect ratio> "facemax(<facearea>,region=<celljfaces>)/cellmax(facemin(<facearea>,region=<celljfaces>),<tinyish>)" ON <domain>
         NONE_OUTPUT <maximum cell aspect ratio> "cellmax(<cell aspect ratio>,region=<domain>)"
         #(comment created during unwrap): new block = ../../templates/general/cell_adjacent_volume_ratio.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "cell_adjacent_volume_ratio" # keep < 1.2 say, or as close to 1 as possible
         # for each cell within the domain, this is the ratio between the maximum surround cell volume and the cell's volume, indicating how uniform cell sizes are
         #CELL_OUTPUT <cell adjacent volume ratio> "cellmax(<cellvol>,region=<nocadjacentcellicells>)/<cellvol>" ON <domain> # NB boundary cells have cellvol = 0 so will not contribute to this calculation, as required
         #NONE_OUTPUT <maximum cell adjacent volume ratio> "cellmax(<cell adjacent volume ratio>,region=<domain>)"
         FACE_OUTPUT <cell adjacent volume ratio> "cellmax(<cellvol>,region=<adjacentfaceicells>)/cellmin(<cellvol>,default=<hugeish>,region=<adjacentfaceicells>)" ON <domainfaces>
         NONE_OUTPUT <maximum cell adjacent volume ratio> "facemax(<cell adjacent volume ratio>,region=<domainfaces>)"
         #(comment created during unwrap): new block = ../../templates/general/kernel_information.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "kernel_information"
         #(hash inserted during unwrap)MARKDOWN
         #(hash inserted during unwrap)These parameters characterise the quality of the kernel elements
         #(hash inserted during unwrap)END_MARKDOWN
         
         CELL_OUTPUT <crosskernel output> "<crosskernel>" ON <allcells>
         CELL_OUTPUT <centralkernel output> "<centralkernel>" ON <allcells>
         CELL_OUTPUT <kernelsum output> "<kernelsum>" ON <allcells>
         CELL_OUTPUT <cell deriv kernel elements output> "cellsum(1.d0,region=<cellkernelregion[l=1]>)" ON <allcells>
         FACE_OUTPUT <face deriv kernel elements output> "cellsum(1.d0,region=<facekernelregion[l=1]>)" ON <allfaces>
         NODE_OUTPUT <node deriv kernel elements output> "cellsum(1.d0,region=<nodekernelregion[l=1]>)" ON <allnodes>
         CELL_OUTPUT <celldxkernel output> "<celldxkernel>" ON <allcells>
         FACE_OUTPUT <facedxkernel output> "<facedxkernel>" ON <allfaces>
         NODE_OUTPUT <nodedxkernel output> "<nodedxkernel>" ON <allnodes>
##################################################################################
