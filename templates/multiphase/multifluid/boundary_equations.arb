MARKDOWN
Boundary conditions for an inlet, outlet or walls.  Choose which by setting '<region' equal to either <inlet, <outlet or <walls.

To give the region another (or specific) name, do a secondary subsequent substitution when calling, as in

```arb
INCLUDE_TEMPLATE "multifluid/boundary_equations R '<inlet' W '<inlet1' R '<region' W '<inlet'
```

IE, replace <region with <inlet first, and then replace <inlet with <inlet1.
END_MARKDOWN

# if not otherwise specified, default to inlet boundary conditions
REPLACEMENTS D '<region' W '<inlet'

# set the default boundary condition methods here for methods that do not change for the boundary type of species being considered
# otherwise specify the methods individually when calling the navier-stokes boundary_equations template below
# individual methods can be specified when calling this file to overwrite any of these default (D) methods
# eg INCLUDE 'boundary_equations' R '<<boundarymethodvariable>>' W 'dynamicforce'

# this is the default for p extrapolation at the wall, which can be set specifically for wall boundaries using
# eg INCLUDE 'boundary_equations' R '<<boundarynormalwallmethod>>' W 'rhiechow'
#REPLACEMENTS D '<<boundarynormalwallmethod>>' W 'rhiechow'
REPLACEMENTS D '<<boundarynormalwallmethod>>' W 'zerodynamic' # current default

REPLACEMENTS D '<<boundarytangentmethod>>' W 'noslip'

#REPLACEMENTS D '<<boundarymethodvariable>>' W 'dynamicforce'
REPLACEMENTS D '<<boundarymethodvariable>>' W 'p'

# problem is these will break if phi_f_adv is zero as u_f on the boundary is no longer in an equation?
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {

# set the <<species>> replacement string before all others
    $return_string .= "REPLACEMENTS R '<<species>>' W '$species'\n";

    if ($species eq 'species0') {
      if (string_test('<region','<outlet')) {
# outlet for fluid, set the fluid pressure to zero in one cell, and a uniform <<boundarymethodvariable>> across the rest
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'onefacepressure' R '<region p_<<species>>>' W '0'\n";
      } elsif (string_test('<region','<inlet')) {
# inlet for fluid, set the flowrate <region u_<<species>>> to equal <u_av_<<species>>> using the spare one cell equation, and a uniform <<boundarymethodvariable>> across the rest
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'flowrate' R '<region u_<<species>>>' W '<u_av_<<species>>>'\n";
      } else {
# walls for fluid, set noslip and noflux (zero velocity), and use rhiechow extrapolation
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W '<<boundarynormalwallmethod>>' D '<<boundarymethod>>' W 'noflux'\n";
      }
    } else {
      if (string_test('<region','<outlet')) {
# outlet for disperse phase, set the gradient normal to the port to be zero, overwriting the existing <outlet flowrate equation>
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'zerophigrad'\n";
      } elsif (string_test('<region','<inlet')) {
# inlet for disperse phase, set the volume fraction as a uniform value to <region phi_<<species>>>
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W 'zerogradu' D '<<boundarymethod>>' W 'phi'\n";
      } else {
# walls for disperse phase, set noslip and noflux (zero velocity), and use zero dynamic extrapolation
        $return_string .= "INCLUDE 'single_species_boundary_equations' D '<<boundarynormalmethod>>' W '<<boundarynormalwallmethod>>' D '<<boundarymethod>>' W 'noflux'\n";
      }
    }
  }
  return $return_string;
}}
