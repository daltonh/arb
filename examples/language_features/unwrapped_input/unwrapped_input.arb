#(comment created during unwrap): new block = resources/test_suite_results/intel/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /Users/daltonh/codes/arb/testsuite/arb_develop/src/free_surface_functions.f90
EXTERNALS "/Users/daltonh/codes/arb/testsuite/arb_develop/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: ddot_test.arb multiply_variables.arb random_test.arb reuse.arb skip_if_test.arb syntax_test.arb
   #(comment created during unwrap): new block = ddot_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "ddot_test.arb"
   # this demonstrates how to take a double dot product and how to use a template file to perform a tensor transpose
   
   NONE_CONSTANT <A[l=1,1]> "11"
   NONE_CONSTANT <A[l=1,2]> "12"
   NONE_CONSTANT <A[l=1,3]> "13"
   NONE_CONSTANT <A[l=2,1]> "21"
   NONE_CONSTANT <A[l=2,2]> "22"
   NONE_CONSTANT <A[l=2,3]> "23"
   NONE_CONSTANT <A[l=3,1]> "31"
   NONE_CONSTANT <A[l=3,2]> "32"
   NONE_CONSTANT <A[l=3,3]> "33"
   NONE_CONSTANT <B[l=1,1]> "111"
   NONE_CONSTANT <B[l=1,2]> "112"
   NONE_CONSTANT <B[l=1,3]> "113"
   NONE_CONSTANT <B[l=2,1]> "121"
   NONE_CONSTANT <B[l=2,2]> "122"
   NONE_CONSTANT <B[l=2,3]> "123"
   NONE_CONSTANT <B[l=3,1]> "131"
   NONE_CONSTANT <B[l=3,2]> "132"
   NONE_CONSTANT <B[l=3,3]> "133"
   NONE_CONSTANT <ddot(A,B)> "ddot(<A[l=:,:]>,<B[l=:,:]>)"
   #(hash inserted during unwrap)INCLUDE_TEMPLATE "general"
      #(comment created during unwrap): new block = ../../templates/general/tensor_transpose.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "tensor_transpose" 
      
      # little code snippet to create a transpose of a tensor as a local variable
      # NOTE, may need to correct centring of variable when calling
      
      NONE_LOCAL <B_transpose[l=1,1]> "<B[l=1,1]>"
      NONE_LOCAL <B_transpose[l=2,2]> "<B[l=2,2]>"
      NONE_LOCAL <B_transpose[l=3,3]> "<B[l=3,3]>"
      NONE_LOCAL <B_transpose[l=1,2]> "<B[l=2,1]>"
      NONE_LOCAL <B_transpose[l=1,3]> "<B[l=3,1]>"
      NONE_LOCAL <B_transpose[l=2,3]> "<B[l=3,2]>"
      NONE_LOCAL <B_transpose[l=2,1]> "<B[l=1,2]>"
      NONE_LOCAL <B_transpose[l=3,1]> "<B[l=1,3]>"
      NONE_LOCAL <B_transpose[l=3,2]> "<B[l=2,3]>"
   NONE_CONSTANT <ddot(A,B_transpose)> "ddot(<A[l=:,:]>,<B_transpose[l=:,:]>)"
##################################################################################
   #(comment created during unwrap): new block = multiply_variables.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "multiply_variables.arb"
   CONSTANT <amultiply> "1.d0"
   CONSTANT <bmultiply> "2.d0"
   CONSTANT <multiplier> "3.d0"
   # first multiply by another constant
      #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE_TEMPLATE "general/multiply_variables" 
      
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)Use this template file to multiply (or optionally add, divide, subtract etc) a comma separated list of variables (contained within <amultiply>,<bmultiply>) by something else, contained in <multiplier>
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)To use this for another arithmetic operation, set <<operator>> to the required operator, eg
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)```arb
      #(hash inserted during unwrap)# for addition
      #(hash inserted during unwrap)```
      #(hash inserted during unwrap)END_MARKDOWN
      
      # these are the variables you want operated on
      # this is what they are going to be multiplied with
      # this is the operation being performed
         #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 1
         #(hash inserted during unwrap)IF <amultiply>,<bmultiply>
         VARIABLE <amultiply> '(<amultiply>) * (<multiplier>)'
         VARIABLE <bmultiply> '(<bmultiply>) * (<multiplier>)'
         
         #(hash inserted during unwrap)END_IF
   # now multiply by a number
      #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE_TEMPLATE "general/multiply_variables" 
      
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)Use this template file to multiply (or optionally add, divide, subtract etc) a comma separated list of variables (contained within <amultiply>,<bmultiply>) by something else, contained in 3.d0
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)To use this for another arithmetic operation, set <<operator>> to the required operator, eg
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)```arb
      #(hash inserted during unwrap)# for addition
      #(hash inserted during unwrap)```
      #(hash inserted during unwrap)END_MARKDOWN
      
      # these are the variables you want operated on
      # this is what they are going to be multiplied with
      # this is the operation being performed
         #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 1
         #(hash inserted during unwrap)IF <amultiply>,<bmultiply>
         VARIABLE <amultiply> '(<amultiply>) * (3.d0)'
         VARIABLE <bmultiply> '(<bmultiply>) * (3.d0)'
         
         #(hash inserted during unwrap)END_IF
   # now add on a number
      #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE_TEMPLATE "general/multiply_variables" 
      
      #(hash inserted during unwrap)MARKDOWN
      #(hash inserted during unwrap)Use this template file to multiply (or optionally add, divide, subtract etc) a comma separated list of variables (contained within <amultiply>,<bmultiply>) by something else, contained in 1.d0
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)To use this for another arithmetic operation, set + to the required operator, eg
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)```arb
      #(hash inserted during unwrap)# for addition
      #(hash inserted during unwrap)```
      #(hash inserted during unwrap)END_MARKDOWN
      
      # these are the variables you want operated on
      # this is what they are going to be multiplied with
      # this is the operation being performed
         #(comment created during unwrap): new block = ../../templates/general/multiply_variables.arb: sub_block = 1
         #(hash inserted during unwrap)IF <amultiply>,<bmultiply>
         VARIABLE <amultiply> '(<amultiply>) + (1.d0)'
         VARIABLE <bmultiply> '(<bmultiply>) + (1.d0)'
         
         #(hash inserted during unwrap)END_IF
##################################################################################
   #(comment created during unwrap): new block = random_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "random_test.arb"
   # <random> creates a random variable in the range 0 <= <random> < 1, which is unique to each call
   NONE_CONSTANT <random1> "<random>"
   NONE_CONSTANT <random2> "<random>"
   NONE_CONSTANT <random3> "<random>"
##################################################################################
   #(comment created during unwrap): new block = reuse.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "reuse.arb"
   NONE_CONSTANT <a> "1.d0+<pi>"
   NONE_DERIVED <b>
   NONE_DERIVED <b> "<b>+<b>+(<b>)+<a>"
   NONE_DERIVED <b> CANCEL
   NONE_DERIVED <b> "<b>+<a>"
   NONE_DERIVED <b> "<b>+1.d0"
   NONE_DERIVED <b> "<b>*<b>"
   
   NONE_CONSTANT <c[l=1]> "2.d0*<pi>"
   NONE_CONSTANT <c[l=2]> "<hugeish>"
   NONE_CONSTANT <c[l=1]> "dot(<c[l=:]>,<c[l=:]>)" # tricky self reference to variable within dot operator
   
   # the following statements should flag an error as variable and region names must be unique
   #NONE_CONSTANT <allcells> "1.d0"
   #NONE_CONSTANT <cellkernelregion[l=1]> "1.d0"
##################################################################################
   #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "skip_if_test.arb"
   CONSTANT <aa> 1.d0
   
   
   # testing of skip notation
   #(hash inserted during unwrap)SKIP  # a skip section starts after the completion of the line that the skip statement is on
   #(hash inserted during unwrap)# during any skip section, replacements are not done on any text until the end of the END_SKIP solver line
   #(hash inserted during unwrap)
   #(hash inserted during unwrap)# no string code is parsed within a skip section, but is instead replaced by the empty string
   #(hash inserted during unwrap)
   #(hash inserted during unwrap)
   #(hash inserted during unwrap)CONSTANT <bb> 3.d0
   #(hash inserted during unwrap)
   #(hash inserted during unwrap)END_SKIP  
   
   
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)BLOCK
      
      CONSTANT <cc> 4.d0
      
      #(hash inserted during unwrap)END_BLOCK
   
   #(hash inserted during unwrap)COMMENT # this will generate a deprecated syntax message
   #(hash inserted during unwrap)
   #(hash inserted during unwrap)END_COMMENT
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)IF 0
      #(hash inserted during unwrap)
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE_IF 1
      
         #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 2
         #(hash inserted during unwrap)IF 1
         CONSTANT <ee> 5.d0
         #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 2
         #(hash inserted during unwrap)ELSE
         #(hash inserted during unwrap)CONSTANT <ff> 6.d0
         #(hash inserted during unwrap)END_IF
      
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)END_IF
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)IF 0
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE
      #END
      #(hash inserted during unwrap)END_IF
   
   CONSTANT <gg> 7.d0
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)IF 0
      #(hash inserted during unwrap)ERROR "IF: should not be here"
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE_IF 1
      INFO "ELSE_IF: should be here"
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE
      #(hash inserted during unwrap)ERROR "ELSE: should not be here"
      #(hash inserted during unwrap)END_IF
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)IF 0
      #(hash inserted during unwrap)ERROR "IF: should not be here"
      #(hash inserted during unwrap)
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE_IF 1
      INFO "ELSE_IF: should be here"
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE
      #(hash inserted during unwrap)#  {{ asdfsfs }} # should not be evaluated
      #(hash inserted during unwrap)ERROR "ELSE: should not be here"
      #(hash inserted during unwrap)END_IF
   
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)IF 0
      #(hash inserted during unwrap)
      #(hash inserted during unwrap)# {{ sadfas }} # this will cause an error if evaluated
      #(comment created during unwrap): new block = skip_if_test.arb: sub_block = 1
      #(hash inserted during unwrap)ELSE
      INFO "correctly avoided incorrect nested solver code in IF statement"
      #(hash inserted during unwrap)END_IF
##################################################################################
   #(comment created during unwrap): new block = syntax_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "syntax_test.arb"
   # this file just tests the syntax parsing
   
   CELL_REGION <awful name ddot( () []> "compound(+<domain>-<allcells>+<domain>)"
   CELL_REGION <another awful [ =,] name> "compound(+<domain>-<allcells>+<domain>)"
   CONSTANT <jibber dot(> "1.d0"
   CONSTANT <jibber ddot(> "<jibber dot(>"
   CONSTANT <jibber3> "cellsum(cellsum(<jibber ddot(>,region=<awful name ddot( () []>),<another awful [ =,] name>)"
   
   # some tests on redefining variables
   VARIABLE <jibber2> nooutput # now we can even initialise a variable without a type
   CELL_CONSTANT <jibber2> "cellsum(<jibber dot(>,region=<awful name ddot( () []>)" ON <allcells>
   NONE_DERIVED <jibber2> # this should cancel the region definition already
   CELL_OUTPUT <jibber2> ON <boundarycells>
   CELL_CONSTANT <jibber2> 1.d0 # this should cancel the previous equation expression
   NONE_OUTPUT <jibber2> ON <none> # this should cancel the previous constant_list
   CELL_TRANSIENT <jibber2> "<jibber dot(>" "<jibber dot(>" ON <allcells>
   CELL_OUTPUT <jibber2> "1.d0" # this will cancel the initial_equation expression
   FACE_VARIABLE <jibber2>
   NONE_VARIABLE <jibber2> # after all of the replacements, <jibber2> should be a NONE_OUTPUT
##################################################################################
