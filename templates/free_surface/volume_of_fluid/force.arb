# within this file we calculate the cell centred surface force and face centred force used in the <u_f> interpolation

<<dim1comment>>CELL_DERIVED <vof_F_c[l=1]> "<vof_kappa_c>*celldivgrad[l=1](<vof_phi_delta_f>)" ON <vof_delta_mask[r=1]>
<<dim2comment>>CELL_DERIVED <vof_F_c[l=2]> "<vof_kappa_c>*celldivgrad[l=2](<vof_phi_delta_f>)" ON <vof_delta_mask[r=1]>
<<dim3comment>>CELL_DERIVED <vof_F_c[l=3]> "<vof_kappa_c>*celldivgrad[l=3](<vof_phi_delta_f>)" ON <vof_delta_mask[r=1]>

IF 1

# the following strings reused from navier-stokes p_error, so this must be called after that file
  IF {{ return string_test('<<dynamicforcefmethod>>','dxunit'); }}
  # dxunit method
    FACE_DERIVED <vof_F_f> "<vof_kappa_f>*facegrad[dxunit](<vof_phi_delta>)" ON <vof_interface_mask_f[r=1]>
  ELSE_IF {{ return string_test('<<dynamicforcefmethod>>','facegrad'); }}
  # facegrad method
    FACE_DERIVED <vof_F_f> "<vof_kappa_f>*facegrad(<vof_phi_delta>)" ON <vof_interface_mask_f[r=1]>
  ELSE_IF {{ return string_test('<<dynamicforcefmethod>>','facegradadjacentcells'); }}
  # facegradadjacentcells method
    FACE_DERIVED <vof_F_f> "<vof_kappa_f>*facegrad[adjacentcells](<vof_phi_delta>)" ON <vof_interface_mask_f[r=1]>
  ELSE
    ERROR 'No valid dynamicforcefmethod is chosen in the volume_of_fluid/force template file: string currently set as <<dynamicforcefmethod>>'
  END_IF

ELSE
  FACE_DERIVED <vof_F_f> "<vof_kappa_f>*facegrad[dxunit](<vof_phi_delta>)" ON <vof_interface_mask_f[r=1]>
END_IF
