# a fully arb version of the operator facevofphi[linearone]() for 2D cells, using the linearone method
# requires cell centred <facevofphi_n[l=:]>, face centred <u_f>, cell centred <facevofphi_d>, face centred <u_f_vect[l=:]> (which in this case defines the donating region boundaries), cell centred <facevofphi_phi> (for cutoff bits) and constant <facevofphi_phitol>
# with node loops the linearone method could be completely done in arb syntax for any dimensions

FACE_LOCAL <facevofphi_x_c[l=1]> "faceif(<u_f>,faceave[downcell](<cellx[l=1]>),faceave[upcell](<cellx[l=1]>))"
FACE_LOCAL <facevofphi_x_c[l=2]> "faceif(<u_f>,faceave[downcell](<cellx[l=2]>),faceave[upcell](<cellx[l=2]>))"
FACE_LOCAL <facevofphi_x_1[l=1]> "<facex[l=1]>-<facearea>*<facetang1[l=1]>/2.d0-<facevofphi_x_c[l=1]>"
FACE_LOCAL <facevofphi_x_1[l=2]> "<facex[l=2]>-<facearea>*<facetang1[l=2]>/2.d0-<facevofphi_x_c[l=2]>"
FACE_LOCAL <facevofphi_x_2[l=1]> "<facex[l=1]>+<facearea>*<facetang1[l=1]>/2.d0-<facevofphi_x_c[l=1]>"
FACE_LOCAL <facevofphi_x_2[l=2]> "<facex[l=2]>+<facearea>*<facetang1[l=2]>/2.d0-<facevofphi_x_c[l=2]>"
FACE_LOCAL <facevofphi_x_3[l=1]> "<facex[l=1]>+<facearea>*<facetang1[l=1]>/2.d0-<facevofphi_x_c[l=1]>-<dt>*<u_f_vect[l=1]>"
FACE_LOCAL <facevofphi_x_3[l=2]> "<facex[l=2]>+<facearea>*<facetang1[l=2]>/2.d0-<facevofphi_x_c[l=2]>-<dt>*<u_f_vect[l=2]>"
FACE_LOCAL <facevofphi_x_4[l=1]> "<facex[l=1]>-<facearea>*<facetang1[l=1]>/2.d0-<facevofphi_x_c[l=1]>-<dt>*<u_f_vect[l=1]>"
FACE_LOCAL <facevofphi_x_4[l=2]> "<facex[l=2]>-<facearea>*<facetang1[l=2]>/2.d0-<facevofphi_x_c[l=2]>-<dt>*<u_f_vect[l=2]>"
FACE_LOCAL <facevofphi_n_c[l=1]> "faceif(<u_f>,faceave[downcell](<facevofphi_n[l=1]>),faceave[upcell](<facevofphi_n[l=1]>))"
FACE_LOCAL <facevofphi_n_c[l=2]> "faceif(<u_f>,faceave[downcell](<facevofphi_n[l=2]>),faceave[upcell](<facevofphi_n[l=2]>))"
FACE_LOCAL <facevofphi_d_c> "faceif(<u_f>,faceave[downcell](<facevofphi_d>),faceave[upcell](<facevofphi_d>))"
FACE_LOCAL <facevofphi_phi_c> "faceif(<u_f>,faceave[downcell](<facevofphi_phi>),faceave[upcell](<facevofphi_phi>))"
FACE_TRANSIENT <facevofphi_d_1[r=1]> "dot(<facevofphi_n_c[l=:]>,<facevofphi_x_1[l=:]>)" ON <all faces>
FACE_TRANSIENT <facevofphi_d_2[r=1]> "dot(<facevofphi_n_c[l=:]>,<facevofphi_x_2[l=:]>)" ON <all faces>
FACE_TRANSIENT <facevofphi_d_3[r=1]> "dot(<facevofphi_n_c[l=:]>,<facevofphi_x_3[l=:]>)" ON <all faces>
FACE_TRANSIENT <facevofphi_d_4[r=1]> "dot(<facevofphi_n_c[l=:]>,<facevofphi_x_4[l=:]>)" ON <all faces>
INCLUDE "facevofphi_linearone_2D_locald_explicit"
INCLUDE "facevofphi_linearone_2D_locald_explicit" R "_12" W "_23" R "_2[" W "_3[" R "_1[" W "_2["
INCLUDE "facevofphi_linearone_2D_locald_explicit" R "_12" W "_34" R "_2[" W "_4[" R "_1[" W "_3["
INCLUDE "facevofphi_linearone_2D_locald_explicit" R "_12" W "_41" R "_1[" W "_4[" R "_2[" W "_1["
FACE_LOCAL <facevofphi_f_12_34> "(<facevofphi_f_12[r=1]>+<facevofphi_f_34[r=1]>)/2.d0"
#FACE_TRANSIENT <facevofphi_f[r=1]> "facemin(<facevofphi_f_23[r=1]>,<facevofphi_f_41[r=1]>)+<facevofphi_f_12_34>*abs(<facevofphi_f_23[r=1]>-<facevofphi_f_41[r=1]>)" ON <all faces>
# now limited using <facevofphi_phi> and <facevofphi_phitol>
FACE_TRANSIENT <facevofphi_f[r=1]> "faceif(<facevofphi_phi_c>-<facevofphi_phitol>,faceif(1.d0-<facevofphi_phitol>-<facevofphi_phi_c>,facemin(<facevofphi_f_23[r=1]>,<facevofphi_f_41[r=1]>)+<facevofphi_f_12_34>*abs(<facevofphi_f_23[r=1]>-<facevofphi_f_41[r=1]>),1.d0),0.d0)" ON <all faces>
