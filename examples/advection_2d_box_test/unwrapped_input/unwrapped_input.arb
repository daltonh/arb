#(comment created during unwrap): new block = resources/test_suite_results/intel/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /home/daltonh/fortran/arb/testsuite/arb_develop/src/free_surface_functions.f90
EXTERNALS "/home/daltonh/fortran/arb/testsuite/arb_develop/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: advection_2d_box_test.arb
   #(comment created during unwrap): new block = advection_2d_box_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "advection_2d_box_test.arb"
   # arb by dalton harvie
   # file equations.in
   #----------------------------------------------------------------------------
   VERSION 0.42
   
   #-------------------------------------------------------------------
   # geometry
   
   FACE_REGION <walls> "COMPOUND <boundaries>-<inlet>-<outlet>"
   CELL_REGION <inlet_cells>  "BOUNDARY OF <inlet>"
   CELL_REGION <outlet_cells> "BOUNDARY OF <outlet>"
   
   MSH_FILE "surface.msh"
   #MSH_FILE "2d_box_meshes/coarse/surface.msh"
   #MSH_FILE "2d_box_meshes/medium/surface.msh"
   #MSH_FILE "2d_box_meshes/fine/surface.msh"
   #MSH_FILE "2d_box_meshes/poor_2d_box_meshes/one.msh"
   #MSH_FILE "poor_2d_box_meshes/one.msh"
   #MSH_FILE "problem_070313/problem.msh"
   #MSH_FILE "problem_070313_2/problem.msh"
   #MSH_FILE "problem_180313/problem.msh" input
   MSH_FILE "output/output.msh" elementdata
   
   #NEWTSTEPMAX 1
   #NEWTSTEPOUT 1
   #TRANSIENT_SIMULATION
   
   #TIMESTEPOUT 1
   #TIMESTEPMAX 2
   
   #-------------------------------------------------------------------
   # setup test problem and solution
   
   CELL_CONSTANT <u[l=1]> "1.d0" output,elementdata
   CELL_CONSTANT <u[l=2]> "1.d0" nooutput
   FACE_CONSTANT <u_f> "dot(<u[l=:]>,<facenorm[l=:]>)"
   #CELL_UNKNOWN <foo> "<foo_theory>*(-100.d0)-50.d0" elementdata,magnitude=1.d0
   CELL_UNKNOWN <foo> "1.d+0" elementdata
   #CELL_DERIVED <foo_zero> "<foo>" ON <domain> positive
   #CELL_DERIVED <foo_one> "1.d0-<foo>" ON <domain> positive
   
   #CELL_CONSTANT <x_phi> "<cellx[l=1]>-<cellx[l=2]>"
   #CELL_CONSTANT <foo_theory> "cellif(<x_phi>,cellif(<x_phi>-0.5d0,2.d0-2.d0*<x_phi>,2.d0*<x_phi>),0.d0)"
   
   #CELL_CONSTANT <x_phi> "<cellx[l=1]>-<cellx[l=2]>+0.25d0"
   #CELL_CONSTANT <foo_theory> "cellif(<x_phi>,cellif(<x_phi>-0.5d0,1.d0,2.d0*<x_phi>),0.d0)"
   
   #CELL_CONSTANT <x_phi> "<cellx[l=1]>-<cellx[l=2]>"
   #CELL_CONSTANT <foo_theory> "cellmax(cellif(<x_phi>,1.d0-4.d0*<x_phi>,1.d0+4.d0*<x_phi>),0.d0)"
   
   #CELL_CONSTANT <x_phi> "<cellx[l=1]>-<cellx[l=2]>"
   #CELL_CONSTANT <foo_theory> "cellmin(cellmax(cellif(<x_phi>,2.d0-8.d0*<x_phi>,2.d0+8.d0*<x_phi>),0.d0),1.d0)"
   
   CELL_CONSTANT <x_phi> "<cellx[l=1]>-<cellx[l=2]>"
   CELL_CONSTANT <foo_theory> "cellif(abs(<x_phi>)-0.25d0,0.d0,1.d0)"
   
   #--------------------------------------------------------
   # different limiter options
   
   # limiters are taken from the following template directory
   #(hash inserted during unwrap)INCLUDE_TEMPLATE "advection_limiters/implicit"
   
   #--------------------
   # absolute limiter, applied between 0 and 1 (default values)
   
      #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/absolute_limiter.arb: sub_block = 0
      #(hash inserted during unwrap)INCLUDE "absolute_limiter" 
      
      # this file produces a limiter (<phi_limiter>) that can be used to limit advective quantities
      
      # to use these limiters for a general cell-centred variable <foo> say you need to:
      # INCLUDE_TEMPLATE "limiters_2d"
      # INCLUDE "absolute_limiter" R <phi_W_<foo
      # these will produce a CELL_DERIVED <foo_limiter> on <allcells>
      # a byproduct is the CELL_DERIVED <foo_limiter_grad[l=:]> vectors which can also be reused in the advection calculation, ie
      # FACE_DERIVED <foo_f> "faceave[advection](<foo>,<u_f>,<foo_limiter>,gradient[l=1]=<foo_limiter_grad[l=1]>,gradient[l=2]=<foo_limiter_grad[l=2]>,gradient[l=3]=<foo_limiter_grad[l=3]>)"
      
      # these statements reference the regions <domain>, <allcells> and <allfaces> so if non-standard regions are being used these will also have to be replaced
      # the advective flux is assumed to be the face variable <u_f>, so again if this isn't used it will need to be replaced by an alternative velocity
      
      # finally, the magnitude of the <phi> variable needs to be stored in the NONE_CONSTANT <phi_magnitude>
      # the default is that this is calculated based on the initial value for <phi>
      # if this won't work (say <phi> is initially 0.d0) then need to set this NONE_CONSTANT explicitly
      
      # the relative_limiter file is almost the same, except for the inclusion of the relative_limits.arb file
      
      # the only difference between 2d and 3d is in the limiter_gradients.arb file
      #--------------------------------------------------------
      # set <phi_upper_bound> and <phi_lower_bound> using absolute limits
      
      # these are the absolute limits that phi will be bound between
      # to make one irrelevant, set it to +-<huge>
      CONSTANT <foo_upper_bound> 1.d0
      # CONSTANT <phi_upper_bound> "<huge>"
      CONSTANT <foo_lower_bound> 0.d0
      # CONSTANT <phi_lower_bound> "-<huge>"
      
      #--------------------------------------------------------
      # do all the limiter calcs
      
         #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/limiter.arb: sub_block = 0
         #(hash inserted during unwrap)INCLUDE "limiter"
         # vector from centre to face within each cell
         # these will need <<dim1comment>> etc replaced either with spaces or comments, depending on which dimensions are being solved for
            #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/centre_to_face_vector.arb: sub_block = 0
            #(hash inserted during unwrap)INCLUDE "centre_to_face_vector"
            # vector to the face from the last cell centre
            FACE_LOCAL <xc_to_xf[l=1]> "<facex[l=1]>-faceave[lastcell](<cellx[l=1]>)"
            FACE_LOCAL <xc_to_xf[l=2]> "<facex[l=2]>-faceave[lastcell](<cellx[l=2]>)"
            FACE_LOCAL <xc_to_xf[l=3]> "<facex[l=3]>-faceave[lastcell](<cellx[l=3]>)"
         
         # calculate <phi_limiter_kernel> which is only limited to ensure that the kernel components are below certain maximums
            #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/kernel_limiter.arb: sub_block = 0
            #(hash inserted during unwrap)INCLUDE "kernel_limiter"
            # this limiter ensures that the effective kernels used to calculate the face centred quantities within each cell are below certain maximums
            # making these numbers smaller will cause the method to become more upwind
            NONE_CONSTANT <foo_limiter_crosskernel_max> 0.45d0 # the maximum multiplier for any cell value that is not the central cell
            NONE_CONSTANT <foo_limiter_centralkernel_max> 0.05d0 # the maximum multiplier for the central cell value
            CELL_LOCAL <foo_limiter_crosskernel> "cellif(<crosskernel>-<foo_limiter_crosskernel_max>,<foo_limiter_crosskernel_max>/<crosskernel>,1.d0)"
            CELL_LOCAL <foo_limiter_centralkernel> "cellif(<centralkernel>-<foo_limiter_centralkernel_max>,<foo_limiter_centralkernel_max>/<centralkernel>,1.d0)"
            CELL_CONSTANT <foo_limiter_kernel> "cellmin(<foo_limiter_crosskernel>,<foo_limiter_centralkernel>)" ON <allcells>
         
         # calculate cell centred phi gradients
            #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/limiter_gradients.arb: sub_block = 0
            #(hash inserted during unwrap)INCLUDE "limiter_gradients"
            CELL_DERIVED <foo_limiter_grad[l=1]> "cellgrad[l=1](<foo>)*<foo_limiter_kernel>" ON <allcells>
            CELL_DERIVED <foo_limiter_grad[l=2]> "cellgrad[l=2](<foo>)*<foo_limiter_kernel>" ON <allcells>
            CELL_DERIVED <foo_limiter_grad[l=3]> "cellgrad[l=3](<foo>)*<foo_limiter_kernel>" ON <allcells>
         
         # <phi_delta> is the change in phi from the lastcell to face centre, based on the unlimited gradient
         FACE_LOCAL <foo_delta> "dot(<xc_to_xf[l=:]>,faceave[lastcell](<foo_limiter_grad[l=:]>))"
         
         # TODO: write order(<phi>) function to allow the following:
         #NONE_CONSTANT <phi_magnitude> "nonemagnitude(<phi>)" # this function works except that the magnitudes haven't been calculated yet when this constant is evaluated - so in summary, this line doesn't work!
         NONE_CONSTANT <foo_magnitude> "cellmax(abs(<foo>),region=<allcells>)"
         NONE_CONSTANT <foo_eps> "<foo_magnitude>*1.d-20" # a small phi value, used to guard against divide by zero
         
         # this is the maximum absolute <phi_delta> value
         CELL_LOCAL <foo_deltac> "facemax(abs(<foo_delta>),default=0.d0,region=<celljfaces>)" ON <domain>
         CELL_LOCAL <foo_diff> "cellmin(<foo_upper_bound>-<foo>,-(<foo_lower_bound>-<foo>))" ON <domain>
         CELL_LOCAL <foo_diff_bounded> "cellmax(<foo_diff>,0.d0)" ON <domain>
         # these numbers control how aggressively the limiter limits and hence the diagonal dominance of the resulting jacobian matrix
         NONE_CONSTANT <foo_a> 4.0d0 # determines the gradient of the limiter
         NONE_CONSTANT <foo_b> 0.25d0 # between 0 and 1.  Less than 0.5 is probably required for any guarantee of diagonal dominance.  At b=0 all gradients will be limited to some extent.  If b=1 then only gradients that are absolutely going to cause under/overshoots will be limited (but the resulting Jacobian is unlikely to be diagonally dominant for a pure advection problem)
         CELL_DERIVED <foo_betar> "<foo_diff_bounded>/(<foo_deltac>+<foo_eps>)" ON <domain> nooutput
         CELL_LOCAL <foo_limiter_domain> "cellif(1.d0-<foo_b>*<foo_betar>,<foo_betar>^2/(<foo_betar>^2+<foo_a>*(1.d0-<foo_b>*<foo_betar>)^2),1.d0)"
         CELL_DERIVED <foo_limiter> "cellif(celldelta(<domain>),<foo_limiter_domain>,0.d0)" ON <allcells>
         
         # overwrite various parameters that define how conservative (ie, stable) the limiter is
            #(comment created during unwrap): new block = ../../templates/advection_limiters/implicit/default_parameters.arb: sub_block = 0
            #(hash inserted during unwrap)INCLUDE "default_parameters"
            # these are the parameters that are now standard (v0.50), and included at the end of the limiter file now, overwriting those in limiter.arb and kernel_limiter.arb
            NONE_CONSTANT <foo_a> 4.0d0 # determines the gradient of the limiter
            NONE_CONSTANT <foo_b> 0.25d0 # between 0 and 1.  Less than 0.5 is probably required for any guarantee of diagonal dominance.  At b=0 all gradients will be limited to some extent.  If b=1 then only gradients that are absolutely going to cause under/overshoots will be limited (but the resulting Jacobian is unlikely to be diagonally dominant for a pure advection problem)
            NONE_CONSTANT <foo_limiter_crosskernel_max> 0.45d0 # the maximum multiplier for any cell value that is not the central cell
            NONE_CONSTANT <foo_limiter_centralkernel_max> 0.05d0 # the maximum multiplier for the central cell value
      
      #--------------------------------------------------------
   
   # in addition, to remove upper bound
   #NONE_CONSTANT <foo_upper_bound> "<huge>"
   #NONE_CONSTANT <foo_upper_bound> 0.5d0
   # in addition, to remove lower bound
   #NONE_CONSTANT <foo_lower_bound> "-<huge>"
   
   #--------------------
   # relative limiter
   
   #INCLUDE "relative_surrounding_limiter" R "<phi"_W_"<foo"_#_local_limits_on_phi_are_based_on_low_order_phi_values_that_are_adjacent_to_the_cell
   #INCLUDE "relative_transient_limiter" R "<phi"_W_"<foo"_R_"<<limiterupwindseparation>>" W "3" # local limits are based on cells that are atmost 3 cells upwind of the local cell (2 is the default without string replacements)
   
   #CELL_DERIVED <foo_c_low_order> output
   #CELL_DERIVED <foo_upper_bound> output
   #CELL_DERIVED <foo_lower_bound> output
   #--------------------
   
   #CELL_DERIVED <foo_limiter> "1.d0"
   #NEWTRESTOL 1.d-20
   
   # check whether limits were huge or not:  If so don't include that limiter in the min
   #CELL_LOCAL <foo_limiter_domain> "cellmin(cellif(0.1d0*<huge>-<foo_upper_bound>,<foo_limiter_upper>,1.d0),cellif(0.1d0*<huge>+<foo_lower_bound>,<foo_limiter_lower>,1.d0))" ON <domain>
   #CELL_LOCAL <foo_limiter_domain> "cellif(<foo>-(<foo_lower_bound>+<foo_upper_bound>)/2.d0,<foo_limiter_upper>,<foo_limiter_lower>)" ON <domain>
   #CELL_LOCAL <foo_limiter_domain> "<foo_limiter_new>"
   #CELL_LOCAL <foo_limiter_domain> "cellmin(<foo_limiter_upper>,<foo_limiter_lower>)"
   #CELL_DERIVED <foo_limiter> "cellif(celldelta(<domain>),<foo_limiter_domain>,0.d0)" ON <allcells>
   
   # set some outputs
   CELL_CONSTANT <foo_limiter_kernel> output
   #CELL_DERIVED <foo_limiter> output
   #--------------------------------------------------------
   # modifications
   
   #NONE_CONSTANT <foo_max_crosskernel> 0.25d0 # if a crosskernel is larger than this, use a limit within the cell to reduce it to this size
   #CELL_DERIVED <foo_limiter> "cellif(celldelta(<domain>),(1.d0-cos(<foo_limiter_domain>*<pi>))/2.d0,0.d0)" ON <allcells>
   
   #CELL_CONSTANT <foo_limiter_crosskernel> "cellmin(0.95d0/cellmax(<kernelsum>,<tinyish>),1.d0)" ON <allcells> output
   #NONE_CONSTANT <foo_max_kernelsum> 0.9d0
   #NONE_CONSTANT <foo_eps> "<foo_magnitude>*1.d-8" # a small phi value, used to calculate the smallest reliable <phi_delta>
   #CELL_OUTPUT <foo_bound_marker> "cellif(<foo>-(<foo_lower_bound>+<foo_upper_bound>)/2.d0,1.d0,-1.d0)" ON <domain>
   
   #--------------------------------------------------------
   # now the equations to solve
   
   # low order upwind
   #FACE_DERIVED <foo_f> "faceave[advection](<foo>,<u_f>,0.d0)" output
   # high order upwind
   #FACE_DERIVED <foo_f> "faceave[advection](<foo>,<u_f>,1.d0)" output
   # high order upwind but using the kernelsum limiter
   #FACE_DERIVED <foo_f> "faceave[advection](<foo>,<u_f>,<foo_limiter_crosskernel>,gradient[l=1]=<foo_limiter_grad[l=1]>,gradient[l=2]=<foo_limiter_grad[l=2]>)" output
   # calculate the limited advection value of <foo> using one of the include statements above
   FACE_DERIVED <foo_f> "faceave[advection](<foo>,<u_f>,<foo_limiter>,gradient[l=1]=<foo_limiter_grad[l=1]>,gradient[l=2]=<foo_limiter_grad[l=2]>)" output
   
   # advection equations to solve
   FACE_EQUATION <foo_inlet> "<foo>-<foo_theory>" ON <inlet> output
   #CELL_EQUATION <foo_inlet> "<foo>-<foo_theory>" ON <inlet_cells> output
   #FACE_EQUATION <foo_outlet> "<foo>-<foo_theory>" ON <outlet> output
   #FACE_EQUATION <foo_outlet> "dot(<u[l=:]>,faceave[downcell](<dphidx[l=:]>))" ON <outlet> output # this is correct, but can result in under/overshoots because outlet value is extrapolated using a linear function
   FACE_EQUATION <foo_outlet> "<foo>-faceave[downcell](<foo>)" ON <outlet> output # upwinding of phi value on boundary
   #CELL_EQUATION <foo_outlet> "<foo>-cellave(faceave[downcell](<foo>))" ON <outlet_cells> output # upwinding of phi value on boundary
   CELL_EQUATION <foo_advection> "celldiv(<foo_f>*<u_f>)" ON <domain> output
   
   CELL_OUTPUT <foo_error> "<foo>-<foo_theory>"
   NONE_OUTPUT <foo_error_rms_ave> "sqrt(cellsum(<foo_error>^2*<cellvol>,<domain>)/cellsum(<cellvol>,<domain>))"
   NONE_OUTPUT <foo_max> "cellmax(<foo>,,<domain>)"
   NONE_OUTPUT <foo_min> "cellmin(<foo>,,<domain>)"
   NONE_OUTPUT <foo_error_max> "cellmax(abs(<foo_error>),,<domain>)"
   
   #--------------------------------------------------------
   # debugging info follows
   
   CELL_OUTPUT <icell_output> "<icell>"
   FACE_OUTPUT <jface_output> "<jface>"
   FACE_OUTPUT <facenorm_output[l=1]> "<facenorm[l=1]>"
   FACE_OUTPUT <facenorm_output[l=2]> "<facenorm[l=2]>"
   FACE_OUTPUT <u_f_vect[l=1]> "<facenorm[l=1]>*<u_f>"
   FACE_OUTPUT <u_f_vect[l=2]> "<facenorm[l=2]>*<u_f>"
   
   CELL_LOCAL <local_equation> "cellif(celldelta(<domain>),<foo_advection>,0.d0)+cellif(celldelta(<inlet_cells>),<foo_inlet>,0.d0)+cellif(celldelta(<outlet_cells>),<foo_outlet>,0.d0)" ON <allcells> output
   CELL_OUTPUT <crosskernel_output> "<crosskernel>" ON <domain>
   CELL_OUTPUT <centralkernel_output> "<centralkernel>" ON <domain>
   CELL_OUTPUT <kernelsum_output> "<kernelsum>" ON <domain>
   
   NONE_OUTPUT <norm_1>  "cellsum(abs(<local_equation>),<allcells>)/cellsum(1.d0,<allcells>)"
   NONE_OUTPUT <norm_2> "(cellsum(abs(<local_equation>)^2,<allcells>)/cellsum(1.d0,<allcells>))^(1/2)"
   NONE_OUTPUT <norm_4> "(cellsum(abs(<local_equation>)^4,<allcells>)/cellsum(1.d0,<allcells>))^(1/4)"
   NONE_OUTPUT <norm_8> "(cellsum(abs(<local_equation>)^8,<allcells>)/cellsum(1.d0,<allcells>))^(1/8)"
   NONE_OUTPUT <norm_infty> "cellmax(abs(<local_equation>),region=<allcells>)"
   
   CELL_OUTPUT <foo_newtonupdate> "cellnewtonupdate(variable=<foo>)" ON <allcells>
   
   #(hash inserted during unwrap)END
