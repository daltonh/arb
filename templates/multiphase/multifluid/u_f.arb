MARKDOWN
Here we setup the face flux velocity u_f for each phase, basically following the same ideas as the navier-stokes file
END_MARKDOWN

# ensure that <<u_f_method>> has been set
INCLUDE_LOCAL "default_replacement_strings"

IF {{ return (!(arb_defined(string_eval('<dynamic_force_f_{correction}_species0>','text')))) }} # only calculate the dynamic_force correction if it isn't already defined
  INCLUDE "dynamic_force"
END_IF

# run through all species, calculating the {raw} interpolated velocity u_f_{raw}, and then calculating all of the alpha coefficients
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "FACE_DERIVED <u_f_{raw}_$species> 'dot(<u_f_vect_$species"."[l=:]>,<facenorm[l=:]>)' ON <allfaces>\n"; # volume (velocity) transport over the face, only by arithmetic interpolation
    $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/u_f_coefficients' ".
      "SUFFIX '<u[l=1]>' W '_$species' ".
      "SUFFIX '<u_f_vect[l=1]>' W '_$species' ".
      "SUFFIX '<mu_f>' W '_$species' ".
      "R '<mu_f>' W '<mu_f_correction_$species>' ".
      "SUFFIX '<u_f_alpha_{vis}>' W '_$species' ".
      "SUFFIX '<u_f_alpha_{transient}>' W '_$species' ".
      "SUFFIX '<u_f_alpha_{adv}>' W '_$species' ".
      "SUFFIX '<u_f_alpha>' W '_$species' ".
      "SUFFIX '<u_f_{raw}>' W '_$species' ".
      "SUFFIX '<u_f_{raw}_magnitude>' W '_$species' ".
      "SUFFIX '<u_f_vect_magnitude>' W '_$species' ".
      "SUFFIX '<u_f_vect_magnitude[r=1]>' W '_$species' ".
      "R '<rho_f>' W '<rho_$species>' ".
      "SUFFIX '<dynamic_force_f_{correction}_magnitude>' W '_$species' ".
      "SUFFIX '<dynamic_force_f_{correction}>' W '_$species'\n";
  }
  return $return_string;
}}

# save old correction velocity for transient calculations
IF <<transientnavierstokes>>
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "FACE_TRANSIENT <u_f_{correction}_$species"."[r=1]> '0.d0' '<u_f_{correction}_$species>' ON <correctionfaces>\n";
    }
    return $return_string;
  }}
END_IF

# now calculate the correction velocity 
IF {{ return string_test('<<u_f_method>>','mixture') }}
  INCLUDE "mixture_u_f"
ELSE_IF {{ return string_test('<<u_f_method>>','species') }}
# species aware fancier method, with species0 having to be done first
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_LOCAL 'single_species_u_f' R '<<species>>' W '$species'\n";
    }
    return $return_string;
  }}
ELSE
  ERROR "u_f_method not set in u_f.arb in multifluid string = <<u_f_method>>"
END_IF

# final face velocity is made from raw and correction components
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "FACE_DERIVED <u_f_$species> '<u_f_{raw}_$species>+faceif(facedelta(<domainfaces>),<u_f_{correction}_$species>,0.d0)' ON <allfaces>\n"; # volume (velocity) transport
  }
  return $return_string;
}}

# this oddball file is required for implicit timestepping after u_f is calculated
INCLUDE_TEMPLATE "navier_stokes/transient_save_dt"
