# within this file we calculate the curvature

# many difference curvature calculation methods have been tried - Method 8 gives the best results

# Method 1 - celldiv around cell centres, averaged to faces
#<<dim1comment>>FACE_LOCAL <vof_n_f[l=1]> "facegrad[l=1](<vof_phi>)" output
#<<dim2comment>>FACE_LOCAL <vof_n_f[l=2]> "facegrad[l=2](<vof_phi>)"
#<<dim3comment>>FACE_LOCAL <vof_n_f[l=3]> "facegrad[l=3](<vof_phi>)"
#FACE_DERIVED <vof_n_f mag> "sqrt(dot(<vof_n_f[l=:]>,<vof_n_f[l=:]>))" output,elementdata
#CELL_DERIVED <vof_kappa_c> "-celldiv(facegrad(<vof_phi>)/<vof_n_f mag>)" ON <all cells> output,elementdata
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" output

# Method 2 - face centred calculation, averaged to cell centres
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "cellgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "cellgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "cellgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#FACE_DERIVED <vof_kappa_f> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
#CELL_DERIVED <vof_kappa_c> "<vof_kappa_f>" output

# Method 3 - cell centred calculation, using cellgrad instead of celldiv, then averaged to faces
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "cellgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "cellgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "cellgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#CELL_DERIVED <vof_kappa_c> "-(cellgrad[l=1](<vof_n_c_unit[l=1]>)+cellgrad[l=2](<vof_n_c_unit[l=2]>)+cellgrad[l=3](<vof_n_c_unit[l=3]>))" ON <all cells> output
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" output

# Method 4 - as per method 2, but with more smoothing
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "cellgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "cellgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "cellgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#FACE_DERIVED <vof_kappa_f2> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
#CELL_DERIVED <vof_kappa_c> "<vof_kappa_f2>" output
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" output

# Method 5 - face and cell calculated separately from same cell centred unit normals
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "cellgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "cellgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "cellgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#FACE_DERIVED <vof_kappa_f> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
#CELL_DERIVED <vof_kappa_c> "-(cellgrad[l=1](<vof_n_c_unit[l=1]>)+cellgrad[l=2](<vof_n_c_unit[l=2]>)+cellgrad[l=3](<vof_n_c_unit[l=3]>))" ON <all cells> output

# Method 6 - as per method 1 but not normalising unit vectors
#CELL_DERIVED <vof_kappa_c> "-celldiv(facegrad(<vof_phi>))" ON <all cells> output,elementdata
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" output

# Method 7 - as per method 6 but more smoothing
#CELL_DERIVED <vof_kappa_c2> "-celldiv(facegrad(<vof_phi>))" ON <all cells> output,elementdata
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c2>" output
#CELL_DERIVED <vof_kappa_c> "<vof_kappa_f>" output,elementdata

# Method 8 - as per method 1 but more smoothing
#<<dim1comment>>FACE_LOCAL <vof_n_f[l=1]> "facegrad[l=1](<vof_phi>)"
#<<dim2comment>>FACE_LOCAL <vof_n_f[l=2]> "facegrad[l=2](<vof_phi>)"
#<<dim3comment>>FACE_LOCAL <vof_n_f[l=3]> "facegrad[l=3](<vof_phi>)"
#FACE_LOCAL <vof_n_f mag> "sqrt(dot(<vof_n_f[l=:]>,<vof_n_f[l=:]>))" elementdata
#FACE_DERIVED <vof_n_f_scalar> "facegrad(<vof_phi>)/<vof_n_f mag>" ON <all faces> nooutput
#<<cylindricalcomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<<radius_f>>*<vof_n_f_scalar>/faceave[lastcell](<<radius_c>>))" ON <all cells> nooutput,elementdata
#<<cartesiancomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<vof_n_f_scalar>)" ON <all cells> nooutput,elementdata
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c2>" ON <all faces>
#CELL_DERIVED <vof_kappa_c> "<vof_kappa_f>" ON <all cells> output,elementdata

# Method 9 - face and cell calculated separately, cell from celldiv, face from cell centred normals
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "cellgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "cellgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "cellgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#FACE_DERIVED <vof_kappa_f> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
#CELL_DERIVED <vof_kappa_c> "-celldiv(facegrad(<vof_phi>))" ON <all cells> output,elementdata

# Method 10 - as per method 2, but cell centred unit normals calculated from celldivgrads
<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "celldivgrad[l=1](<vof_phi>)" ON <all cells>
<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "celldivgrad[l=2](<vof_phi>)" ON <all cells>
<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "celldivgrad[l=3](<vof_phi>)" ON <all cells>
CELL_DERIVED <vof_n_c mag> "cellmax(sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>)),<vof_phi_tol>/<celldxave>)" ON <all cells>
<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
FACE_DERIVED <vof_kappa_f> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
CELL_DERIVED <vof_kappa_c> "<vof_kappa_f>" output

# Method 11 - face and cell calculated separately from same cell centred unit normals, now calculated with celldivgrad
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "celldivgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "celldivgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "celldivgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#FACE_DERIVED <vof_kappa_f> "-(facegrad[l=1](<vof_n_c_unit[l=1]>)+facegrad[l=2](<vof_n_c_unit[l=2]>)+facegrad[l=3](<vof_n_c_unit[l=3]>))" ON <all faces> output
#CELL_DERIVED <vof_kappa_c> "-(cellgrad[l=1](<vof_n_c_unit[l=1]>)+cellgrad[l=2](<vof_n_c_unit[l=2]>)+cellgrad[l=3](<vof_n_c_unit[l=3]>))" ON <all cells> output

# Method 12 - as per method 3, but cell centred normals calculated using celldivgrad
#<<dim1comment>>CELL_DERIVED <vof_n_c[l=1]> "celldivgrad[l=1](<vof_phi>)" ON <all cells>
#<<dim2comment>>CELL_DERIVED <vof_n_c[l=2]> "celldivgrad[l=2](<vof_phi>)" ON <all cells>
#<<dim3comment>>CELL_DERIVED <vof_n_c[l=3]> "celldivgrad[l=3](<vof_phi>)" ON <all cells>
#CELL_DERIVED <vof_n_c mag> "sqrt(dot(<vof_n_c[l=:]>,<vof_n_c[l=:]>))" ON <all cells>
#<<dim1comment>>CELL_LOCAL <vof_n_c_unit[l=1]> "<vof_n_c[l=1]>/<vof_n_c mag>" ON <all cells> output
#<<dim2comment>>CELL_LOCAL <vof_n_c_unit[l=2]> "<vof_n_c[l=2]>/<vof_n_c mag>" ON <all cells>
#<<dim3comment>>CELL_LOCAL <vof_n_c_unit[l=3]> "<vof_n_c[l=3]>/<vof_n_c mag>" ON <all cells>
#CELL_DERIVED <vof_kappa_c> "-(cellgrad[l=1](<vof_n_c_unit[l=1]>)+cellgrad[l=2](<vof_n_c_unit[l=2]>)+cellgrad[l=3](<vof_n_c_unit[l=3]>))" ON <all cells> output
#FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" output

# # Method 13 - as per method 8 but <vof_kappa_f> is calculated from <vof_kappa_c>, rather than the other way around (ie, more smoothing on this)
# <<dim1comment>>FACE_LOCAL <vof_n_f[l=1]> "facegrad[l=1](<vof_phi>)"
# <<dim2comment>>FACE_LOCAL <vof_n_f[l=2]> "facegrad[l=2](<vof_phi>)"
# <<dim3comment>>FACE_LOCAL <vof_n_f[l=3]> "facegrad[l=3](<vof_phi>)"
# FACE_LOCAL <vof_n_f mag> "sqrt(dot(<vof_n_f[l=:]>,<vof_n_f[l=:]>))" elementdata
# FACE_DERIVED <vof_n_f_scalar> "facegrad(<vof_phi>)/<vof_n_f mag>" ON <all faces> nooutput
# #CELL_DERIVED <vof_kappa_c2> "-celldiv(facegrad(<vof_phi>)/<vof_n_f mag>)" ON <all cells> output,elementdata
# <<cylindricalcomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<<radius_f>>*<vof_n_f_scalar>/faceave[lastcell](<<radius_c>>))" ON <all cells> nooutput,elementdata
# <<cartesiancomment>>CELL_DERIVED <vof_kappa_c2> "-celldiv(<vof_n_f_scalar>)" ON <all cells> nooutput,elementdata
# FACE_LOCAL <vof_kappa_f2> "<vof_kappa_c2>"
# CELL_DERIVED <vof_kappa_c> "<vof_kappa_f2>" ON <all cells> output,elementdata
# FACE_DERIVED <vof_kappa_f> "<vof_kappa_c>" ON <all faces>

