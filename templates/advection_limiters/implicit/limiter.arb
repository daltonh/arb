# vector from centre to face within each cell
# these will need <<dim1comment>> etc replaced either with spaces or comments, depending on which dimensions are being solved for
INCLUDE "centre_to_face_vector"

# calculate <phi_limiter_kernel> which is only limited to ensure that the kernel components are below certain maximums
INCLUDE "kernel_limiter"

# calculate cell centred phi gradients
INCLUDE "limiter_gradients"

# <phi_delta> is the change in phi from the lastcell to face centre, based on the unlimited gradient
FACE_LOCAL <phi_delta> "dot(<xc_to_xf[l=:]>,faceave[lastcell](<phi_limiter_grad[l=:]>))"

# TODO: write order(<phi>) function to allow the following:
#NONE_CONSTANT <phi_magnitude> "nonemagnitude(<phi>)" # this function works except that the magnitudes haven't been calculated yet when this constant is evaluated - so in summary, this line doesn't work!
NONE_CONSTANT <phi_magnitude> "cellmax(abs(<phi>),region=<allcells>)"
NONE_CONSTANT <phi_eps> "<phi_magnitude>*1.d-20" # a small phi value, used to guard against divide by zero

# this is the maximum absolute <phi_delta> value
CELL_LOCAL <phi_deltac> "facemax(abs(<phi_delta>),default=0.d0,region=<celljfaces>)" ON <domain>
CELL_LOCAL <phi_diff> "cellmin(<phi_upper_bound>-<phi>,-(<phi_lower_bound>-<phi>))" ON <domain>
CELL_LOCAL <phi_diff_bounded> "cellmax(<phi_diff>,0.d0)" ON <domain>
# these numbers control how aggressively the limiter limits and hence the diagonal dominance of the resulting jacobian matrix
NONE_CONSTANT <phi_a> 4.0d0 # determines the gradient of the limiter
NONE_CONSTANT <phi_b> 0.25d0 # between 0 and 1.  Less than 0.5 is probably required for any guarantee of diagonal dominance.  At b=0 all gradients will be limited to some extent.  If b=1 then only gradients that are absolutely going to cause under/overshoots will be limited (but the resulting Jacobian is unlikely to be diagonally dominant for a pure advection problem)
CELL_DERIVED <phi_betar> "<phi_diff_bounded>/(<phi_deltac>+<phi_eps>)" ON <domain> nooutput
CELL_LOCAL <phi_limiter_domain> "cellif(1.d0-<phi_b>*<phi_betar>,<phi_betar>^2/(<phi_betar>^2+<phi_a>*(1.d0-<phi_b>*<phi_betar>)^2),1.d0)"
CELL_DERIVED <phi_limiter> "cellif(celldelta(<domain>),<phi_limiter_domain>,0.d0)" ON <allcells>

# overwrite various parameters that define how conservative (ie, stable) the limiter is
INCLUDE "default_parameters"
