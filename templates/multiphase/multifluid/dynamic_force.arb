MARKDOWN
Here we calculate the dynamic forces, including <dynamic_force_c[l=:]>, <dynamic_force_f> and <dynamic_force_f_{correction}>

Note that <dynamic_force_f_{correction}> has different interpretations depending on <<u_f_method>>
END_MARKDOWN

# ensure that <<u_f_method>> has been set
INCLUDE "default_replacement_strings"

# the region <correctionfaces> should be defined if it isn't already
IF {{ return (!(arb_defined('<correctionfaces>'))) }} # only calculate the dynamic_force correction if it isn't already defined
  FACE_REGION <correctionfaces> "all" ON <domainfaces>
END_IF

# first use the navier_stokes dynamic_force template to create the variables
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_species_list>>','list')) {
    $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/dynamic_force' ".
      "SUFFIX '<dynamic_force_f_{correction}>' W '_$species' ".
      "SUFFIX '<dynamic_force_c_f[l=1]>' W '_$species' ".
      "SUFFIX '<dynamic_force_c[l=1]>' W '_$species' ".
      "SUFFIX '<dynamic_force_f>' W '_$species' ".
      "SUFFIX '<p>' W '_species0' ".
      "SUFFIX '<p_f_gradient_limiter>' W '_species0' ".
      "SUFFIX '<p_f>' W '_species0'\n";
  }
  return $return_string;
}}

# add on contributions due to disperse phase species pressures, possibly osmotic in nature so not multiplied by phi
{{
  my $return_string = '';
  for my $species (string_eval('<<multifluid_disperse_species_list>>','list')) {
    $return_string .= "INCLUDE_LOCAL 'single_species_dynamic_force' R '<<species>>' W '$species'\n";
  }
  return $return_string;
}}

IF {{ return string_test('<<u_f_method>>','mixture') }}
# for the mixture method, <dynamic_force_f_{correction}> is based solely on the phase pressures, without other body forces etc
# calculate these here overwriting those calculated above, using navier_stokes templates but with dummy dynamic_force_c and dynamic_force_f variables
# note that this does not touch <dynamic_force_c[l=:]> or <dynamic_force_f>, which are used in the momentum equations and boundary conditions, respectively
  {{
    my $return_string = '';
    for my $species (string_eval('<<multifluid_species_list>>','list')) {
      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/dynamic_force' ".
        "SUFFIX '<dynamic_force_f_{correction}>' W '_$species' ".
        "R '<dynamic_force_c_f[' W '<dynamic_force_corcalc_c_f_$species"."[' ".
        "R '<dynamic_force_c[' W '<dynamic_force_corcalc_c_$species"."[' ".
        "R '<dynamic_force_f>' W '<dynamic_force_corcalc_f_$species>' ".
        "SUFFIX '<p>' W '_$species' ".
        "SUFFIX '<p_f_gradient_limiter>' W '_$species' ".
        "SUFFIX '<p_f>' W '_$species'\n";
    }
    return $return_string;
  }}
END_IF
