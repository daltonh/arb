gamma_rate_multifluid.arb:Calculating the laplacian of gamma tensor - Rate of gamma - For <<species>>, which could be mixture
gamma_rate_multifluid.arb:REPLACEMENTS D "<<species_gammarate>>" W "mixture"
gamma_rate_multifluid.arb:CELL_DERIVED <laplacian_<<species_gammarate>>[l=<<i>>]> "celldiv(dot(<facenorm[l=:]>,<gamma_f_<<species_gammarate>>[l=:,<<i>>]>))" ON <domain> output
gamma_rate_multifluid.arb:#CELL_DERIVED <gammarate_<<species>>[l=<<i>>]> "celldiv(dot(<facenorm[l=:]>,<gamma_f_<<mixture>>[l=:,<<i>>]>))" ON <domain> output
gamma_rate_multifluid.arb:CELL_DERIVED <laplacian_magnitude_<<species_gammarate>>> "sqrt(cellmax(dot(<laplacian_<<species_gammarate>>[l=:]>,<laplacian_<<species_gammarate>>[l=:]>),<tinyish>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim1comment>>CELL_DERIVED <gammarate_species0[l=1]> "celldiv(dot(<facenorm[l=:]>,<gamma_species0[l=:,1]>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim1comment>>CELL_DERIVED <gammarate_species0[l=1]> "celldiv(dot(<facenorm[l=:]>,<gamma_species0[l=:,1]>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim3comment>>CELL_DERIVED <gammarate_species0[l=3]> "celldiv(dot(<facenorm[l=:]>,<gamma_species0[l=:,3]>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim1comment>>CELL_DERIVED <gammarate_<<species>>[l=1]> "celldiv(dot(<facenorm[l=:]>,<gamma_<<species>>[l=:,1]>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim2comment>>CELL_DERIVED <gammarate_<<species>>[l=2]> "celldiv(dot(<facenorm[l=:]>,<gamma_<<species>>[l=:,2]>))" ON <domain> output
gamma_rate_multifluid.arb:#<<dim3comment>>CELL_DERIVED <gammarate_<<species>>[l=3]> "celldiv(dot(<facenorm[l=:]>,<gamma_<<species>>[l=:,3]>))" ON <domain> output
gamma_rate_multifluid.arb:#CELL_DERIVED <gammarate_magnitude_species0> "sqrt(cellmax(cellave(dot(<gammarate_species0[l=:]>,<gammarate_species0[l=:]>)),<tinyish>))" ON <domain> output
gamma_rate_multifluid.arb:#CELL_DERIVED <gammarate_magnitude_<<species>>> "sqrt(cellmax(cellave(dot(<gammarate_<<species>>[l=:]>,<gammarate_<<species>>[l=:]>)),<tinyish>))" ON <domain> output
gamma_rate_multifluid.arb:#CELL_DERIVED <gammarate_magnitude_species0> "sqrt(cellmax(dot(<gammarate_species0[l=:]>,<gammarate_species0[l=:]>),<tinyish>))" ON <domain> output
gamma_rate_multifluid.arb:#CELL_DERIVED <gammarate_magnitude_<<species>>> "sqrt(cellmax(dot(<gammarate_<<species>>[l=:]>,<gammarate_<<species>>[l=:]>),<tinyish>))" ON <domain> output
single_species_faxen.arb:    CELL_DERIVED <laplacian_mixture[l=<<i>>]> "celldiv(dot(<facenorm[l=:]>,<gamma_f_mixture[l=:,<<i>>]>))" ON <domain> output
single_species_faxen.arb:    CELL_DERIVED <laplacian_species0[l=<<i>>]> "celldiv(dot(<facenorm[l=:]>,<gamma_f_species0[l=:,<<i>>]>))" ON <domain> output
single_species_inertial_diffusion.arb:#REPLACEMENTS D "<<inertial_diffusion_method>>" W "gammaslip" # strain + slip
single_species_inertial_diffusion.arb:#REPLACEMENTS D "<<inertial_diffusion_method>>" W "gammagamma" # strain
single_species_inertial_diffusion.arb:  # deal with strain rate + slip component, known as 'gammaslip'
single_species_inertial_diffusion.arb:  NONE_CONSTANT <p_inertial_gammaslip_multiplier> 1.d0
single_species_inertial_diffusion.arb:  IF {{ return (string_test('<<inertial_diffusion_method>>','gammaslip') || string_test('<<inertial_diffusion_method>>','all'))}}
single_species_inertial_diffusion.arb:    INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_species0[' R '<gamma_magnitude>' W '<gamma_magnitude_species0>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_species0>' R '<u_f_vect[' W '<u_f_vect_species0[' R '<u[' W '<u_species0[' R '<ugrad_f[' W '<ugrad_f_species0['
single_species_inertial_diffusion.arb:    CELL_DERIVED <p_inertial_<<species>>> "<p_inertial_<<species>>>+(<p_inertial_gammaslip_multiplier>*<a_<<species>>>*<gamma_magnitude_species0>*<u_slip_magnitude_<<species>>>)"
single_species_inertial_diffusion.arb:  # deal with strain velocity component, known as 'gammagamma'
single_species_inertial_diffusion.arb:  NONE_CONSTANT <p_inertial_gammagamma_multiplier> 1.d0
single_species_inertial_diffusion.arb:  IF {{ return (string_test('<<inertial_diffusion_method>>','gammagamma') || string_test('<<inertial_diffusion_method>>','all'))}}
single_species_inertial_diffusion.arb:    INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_species0[' R '<gamma_magnitude>' W '<gamma_magnitude_species0>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_species0>' R '<u_f_vect[' W '<u_f_vect_species0[' R '<u[' W '<u_species0[' R '<ugrad_f[' W '<ugrad_f_species0['
single_species_inertial_diffusion.arb:    CELL_DERIVED <p_inertial_<<species>>> "<p_inertial_<<species>>>+(<p_inertial_gammagamma_multiplier>*(<a_<<species>>>*<gamma_magnitude_species0>)^2)"
single_species_inertial_diffusion.arb:  INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_species0[' R '<gamma_magnitude>' W '<gamma_magnitude_species0>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_species0>' R '<u_f_vect[' W '<u_f_vect_species0[' R '<u[' W '<u_species0[' R '<ugrad_f[' W '<ugrad_f_species0['
single_species_inertial_diffusion.arb:      $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_$species"."[' R '<gamma_magnitude>' W '<gamma_magnitude_$species".">' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_$species".">' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<u[' W '<u_$species"."[' R '<ugrad_f[' W '<ugrad_f_$species"."['\n";
single_species_inertial_diffusion.arb:      $return_string .= "VARIABLE <p_inertial_<<species>>> '(<p_inertial_<<species>>>)+(<p_inertial_multiplier>*<phi_pos_$species>*<phi_pos_<<species>>>*<a_$species>*<a_<<species>>>*<rho_<<species>>>*<gamma_magnitude_$species>*<gamma_magnitude_<<species>>>)'\n";
single_species_inertial_diffusion.arb:      $return_string .= "VARIABLE <p_inertial_<<species>>_species0> '(<p_inertial_<<species>>_species0>)+(<p_inertial_species0_multiplier>*<phi_pos_$species>*<phi_pos_<<species>>>*<a_$species>*<a_<<species>>>*<rho_species0>*(<gamma_magnitude_species0>^2))'\n";
single_species_sheargrad_unbounded_lift.arb:  INCLUDE_TEMPLATE "gamma_rate_multifluid"
single_species_sheargrad_unbounded_lift.arb:  CELL_LOCAL <gamma_mixture[l=<<i>>,<<j>>]> "<gamma_f_mixture[l=<<i>>,<<j>>]>" ON <allcells>
single_species_sheargrad_unbounded_lift.arb:  CELL_DERIVED <gamma_mixture_mag> "sqrt(cellmax(0.5d0*ddot(<gamma_mixture[l=:,:]>,<gamma_mixture[l=:,:]>),<tinyish>))" ON <allcells>
single_species_sheargrad_unbounded_lift.arb:  CELL_DERIVED <particle_force_sheargrad_unbounded_lift_mixture[l=<<i>>]> "dot(<gamma_mixture[l=:,<<i>>]>,<laplacian_mixture[l=:]>)/(sqrt(cellmax(<gamma_mixture_mag>,<tinyish>)))" ON <domain> output
single_species_sheargrad_unbounded_lift.arb:  INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["
single_species_sheargrad_unbounded_lift.arb:  INCLUDE_TEMPLATE "gamma_rate_multifluid" R "<domain>" W "<allcells>" R "<<species>>" W "species0"
single_species_sheargrad_unbounded_lift.arb:  CELL_DERIVED <sheargrad_unbounded_<<species>>> "5.362*3.d0/(4.d0*<pi>)*(<rho_species0>**0.5d0*<mu_species0>**0.5d0*<a_<<species>>>)*(1/<gamma_magnitude_species0>**0.5d0)" ON <allcells> output
single_species_sheargrad_unbounded_lift.arb:   'CELL_DERIVED <particle_force_sheargrad_unbounded_lift_<<species>>[l=$l]> "<sheargrad_unbounded_<<species>>>*dot(<gamma_species0[l=:,$l]>,<laplacian_species0[l=:]>)" ON <allcells> output',
single_species_sid_pressure.arb:    INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_<<species>>[' R '<gamma_magnitude>' W '<gamma_magnitude_<<species>>>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_<<species>>>' R '<u_f_vect[' W '<u_f_vect_<<species>>[' R '<u[' W '<u_<<species>>[' R '<ugrad_f[' W '<ugrad_f_<<species>>['
single_species_sid_pressure.arb:    VARIABLE <p^_sid_<<species>>> "<p_sid_multiplier_<<species>>>*<gamma_magnitude_<<species>>>*(<p^_sid_<<species>>>)"
single_species_sid_pressure.arb:    INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_<<species>>[' R '<gamma_magnitude>' W '<gamma_magnitude_<<species>>>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_<<species>>>' R '<u_f_vect[' W '<u_f_vect_<<species>>[' R '<u[' W '<u_<<species>>[' R '<ugrad_f[' W '<ugrad_f_<<species>>['
single_species_sid_pressure.arb:    VARIABLE <p_sid_<<species>>> "<p_sid_multiplier_<<species>>>*<gamma_magnitude_<<species>>>*<phi_pos_<<species>>>*(<p_sid_<<species>>>)"
single_species_sid_pressure.arb:  # crazyspecific is same as specific, except is diveded through by sqrt(Re_p) = sqrt(gamma*a^2*rho/mu)
single_species_sid_pressure.arb:    INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_<<species>>[' R '<gamma_magnitude>' W '<gamma_magnitude_<<species>>>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_<<species>>>' R '<u_f_vect[' W '<u_f_vect_<<species>>[' R '<u[' W '<u_<<species>>[' R '<ugrad_f[' W '<ugrad_f_<<species>>['
single_species_sid_pressure.arb:    VARIABLE <p^_sid_<<species>>> "<p_sid_multiplier_<<species>>>*sqrt(cellmax(<gamma_magnitude_<<species>>>*<mu_species0>/<rho_species0>,default=<tinyish>))*(<p^_sid_<<species>>>)"
single_species_sid_pressure.arb:    # calculate gamma for each phase, and then average this to allsolids
single_species_sid_pressure.arb:      CELL_LOCAL <gamma_magnitude_allsolids> "0.d0" ON <allcells> output
single_species_sid_pressure.arb:          $return_string .= "INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_$species"."[' R '<gamma_magnitude>' W '<gamma_magnitude_$species>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_$species>' R '<u_f_vect[' W '<u_f_vect_$species"."[' R '<u[' W '<u_$species"."[' R '<ugrad_f[' W '<ugrad_f_$species"."['\n";
single_species_sid_pressure.arb:          $return_string .= "VARIABLE <gamma_magnitude_allsolids> '<gamma_magnitude_allsolids>+<phi_pos_$species>*<gamma_magnitude_$species>'\n";
single_species_sid_pressure.arb:    # volume average solid velocities first, then calculate allsolids gamma from this
single_species_sid_pressure.arb:      INCLUDE_TEMPLATE 'navier_stokes/strain_rate_magnitude' R '<gamma[' W '<gamma_allsolids[' R '<gamma_magnitude>' W '<gamma_magnitude_allsolids>' R '<gamma_magnitude_f>' W '<gamma_magnitude_f_allsolids>' R '<u_f_vect[' W '<u_f_vect_allsolids[' R '<u[' W '<u_allsolids[' R '<ugrad_f[' W '<ugrad_f_allsolids['
single_species_sid_pressure.arb:      CELL_LOCAL <p_sid_multiplier_<<species>>> "<p_sid_adjuster>*<mu_species0>*<gamma_magnitude_allsolids>*<p_osmotic_Z_allsolids>" output
single_species_sid_pressure.arb:          CELL_LOCAL <p_sid_multiplier_highPe_allsolids> "<p_sid_c>*<gamma_magnitude_allsolids>*<mu_species0>*<p_osmotic_Z_allsolids>" ON <allcells> output
single_species_sid_pressure.arb:          CELL_LOCAL <p_sid_multiplier_highPe_allsolids> "<p_sid_c>*<gamma_magnitude_allsolids>*<mu_c_allsolids>" ON <allcells> output
single_species_sid_pressure.arb:          CELL_DERIVED <p_sid_multiplier_highPe_allsolids> [Pa.s] "<mu_species0>*<gamma_magnitude_allsolids>*<p_sid_K_n>*<p_sid_phi_norm_allsolids>/(<p_sid_phi_max_allsolids>*(1.d0-<p_sid_phi_norm_allsolids>)**2)" ON <allcells> output
single_species_sid_pressure.arb:      # CELL_LOCAL <p_sid_multiplier_highPe_<<species>>> "<p_sid_c>*<gamma_magnitude_allsolids>*<mu_l>*<p_osmotic_Z_allsolids>" ON <allcells> output
single_species_sid_pressure.arb:        #CELL_LOCAL <p_sid_multiplier_highPe_<<species>>> "<gamma_<<species>>_magnitude>*<mu_<<species>>_n>" ON <allcells> output
single_species_sid_pressure.arb:        #CELL_LOCAL <p_sid_multiplier_highPe_<<species>>> "<p_sid_c>*<gamma_magnitude_allsolids>*<mu_c_allsolids>*<p_osmotic_Z_allsolids>" ON <allcells> output
single_species_sid_pressure.arb:        #CELL_LOCAL <p_sid_multiplier_highPe_<<species>>> "<gamma_<<species>>_magnitude>*<mu_c_allsolids>*<p_osmotic_Z_allsolids>" ON <allcells> output
single_species_sid_pressure.arb:        CELL_DERIVED <Pe_local_<<species>>> "6*pi*<mu_species0>*<gamma_<<species>>_magnitude>*<a_<<species>>>**3/(<k_boltzmann>*<T>)"
single_species_sid_pressure.arb:        CELL_LOCAL <p_sid_multiplier_lowPe_<<species>>> "<mu_species0>*<gamma_<<species>>_magnitude>*<A_sid>*<Pe_local_<<species>>>*<p_lowPeSID_func>" output
single_species_slip_lift.arb:    FACE_DERIVED <gamma_f_species0[l=<<i>>,<<j>>]> "<ugrad_f_species0[l=<<i>>,<<j>>]>+<ugrad_f_species0[l=<<j>>,<<i>>]>" ON <allfaces> output
single_species_slip_lift.arb:    FACE_DERIVED <gamma_magnitude_f_species0> "mag(<gamma_f_species0[l=:,:]>)" ON <allfaces> output
single_species_slip_lift.arb:    FACE_DERIVED <particle_force_alpha6_f_allsolids> "(3*6.46/(4*<pi>))*sqrt(<mu_species0>*<rho_species0>/facemax(<gamma_magnitude_f_species0>,1.d-20))" ON <allfaces> output
single_species_slip_lift.arb:    FACE_DERIVED <particle_force_f_lift_slip_vect_<<species>>[l=<<i>>]> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_f_<<species>>>*dot(<u_f_slip_<<species>>[l=:]>,<gamma_f_species0[l=:,<<i>>]>)" ON <allfaces> output
single_species_slip_lift.arb:    INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["
single_species_slip_lift.arb:      CELL_DERIVED <particle_force_alpha6_allsolids> "(3*6.46/(4*<pi>))*sqrt(<mu_species0>*<rho_species0>/cellmax(<gamma_magnitude_species0>,1.d-20))" ON <allcells> output # should be x sqrt(2)?
single_species_slip_lift.arb:    CELL_DERIVED <particle_force_lift_slip_<<species>>[l=<<i>>]> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_<<species>>>*dot(<gamma_species0[l=<<i>>,:]>,<u_slip_<<species>>[l=:]>)" ON <allcells> output
single_species_slip_lift.arb:      FACE_LOCAL <gamma_f_species0[l=<<i>>,<<j>>]> "<ugrad_f_species0[l=<<i>>,<<j>>]>+<ugrad_f_species0[l=<<j>>,<<i>>]>" ON <allfaces> output
single_species_slip_lift.arb:      FACE_DERIVED <particle_force_f_lift_slip_<<species>>> "-<particle_force_slip_lift_multiplier>*<particle_force_alpha6_<<species>>>*ddot(<gamma_f_species0[l=:,:]>,<u_f_slip_<<species>>[l=:]>*<facenorm[l=:]>)" ON <allfaces> output
single_species_vc_wall_lift.arb:INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["
single_species_vc_wall_lift.arb:   #CELL_DERIVED <Re_shear> "<a_<<species>>>^2*<gamma_magnitude_species0>/(<mu_species0>/<rho_species0>)" ON <domain> output #shear based Re number
single_species_wall_lift.arb:INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["
single_species_wall_lift.arb:  #CELL_DERIVED <Re_shear> "<a_<<species>>>^2*<gamma_magnitude_species0>/(<mu_species0>/<rho_species0>)" ON <domain> output #shear based Re number
single_species_wall_lift.arb:  CELL_LOCAL <wall_lift_L_G> "sqrt(cellmax(<mu_species0>/(<rho_species0>*<gamma_magnitude_species0>),<tinyish>))" ON <domain> output
single_species_wall_lift.arb:  CELL_DERIVED <wall_lift_Re_gamma_<<species>>> "<rho_species0>*<gamma_magnitude_species0>*<a_<<species>>>^2/<mu_species0>" ON <domain> output
single_species_wall_lift.arb:  CELL_DERIVED <wall_lift_f1_<<species>>> "<wall_lift_lambda1>*exp(<wall_lift_lambda2>*<wall_lift_Re_gamma_<<species>>>)-<wall_lift_lambda3>*exp(<wall_lift_lambda4>*<wall_lift_Re_gamma_<<species>>>)" ON <domain> output
single_species_wall_lift.arb:  CELL_DERIVED <wall_lift_f2_<<species>>> "1.d0+sqrt(cellmax(<wall_lift_Re_gamma_<<species>>>,<tinyish>))" ON <domain> output
single_species_wall_lift.arb:CELL_DERIVED <particle_force_wall_lift_<<species>>[l=<<i>>]> "<particle_force_alpha5_<<species>>>*<gamma_magnitude_species0>^2*<wall_normal_unit[l=<<i>>]>" ON <domain> output
single_species_wall_sheardrag.arb:INCLUDE_TEMPLATE "navier_stokes/strain_rate_magnitude" R "<gamma[" W "<gamma_species0[" R "<gamma_magnitude>" W "<gamma_magnitude_species0>" R "<gamma_magnitude_f>" W "<gamma_magnitude_f_species0>" R "<u_f_vect[" W "<u_f_vect_species0[" R "<u[" W "<u_species0[" R "<ugrad_f[" W "<ugrad_f_species0["
single_species_wall_sheardrag.arb:# gamma approximated by local solid velocity/distance
single_species_wall_sheardrag.arb:# gamma calculated locally, and based on fluid
single_species_wall_sheardrag.arb:  CELL_DERIVED <particle_force_normal_sheargradient_species0[l=<<i>>]> "dot(<wall_normal_unit[l=:]>,<gamma_species0[l=:,<<i>>]>)" ON <domain> output,componentoutput
single_species_wall_sheardrag.arb:#  'CELL_DERIVED <particle_force_normal_sheargradient_species0[l=$l]> "dot(<wall_normal_unit[l=:]>,<gamma_species0[l=:,$l]>)" ON <domain> output,componentoutput',
total_stress.arb:* version1 = the gamma used in each phase is specific to that phase, but stress is not specific to phase (see conservation template)
total_stress.arb:* version2 = the gamma used in each phase is based on mixture velocities
total_stress.arb:* version3 = the gamma used in each phase is specific to that phase, but stress is specific to phase (see conservation template)
total_stress.arb:* version4 = the gamma used in each phase is based on mixture velocities, but the solid viscosities are independent of the species combinations
total_stress.arb:* version4_species = the gamma used in each phase is based on species velocities
total_stress.arb:  FACE_DERIVED <gamma_f_mixture[l=<<i>>,<<j>>]> "(<ugrad_f_mixture[l=<<i>>,<<j>>]>+<ugrad_f_mixture[l=<<j>>,<<i>>]>)" ON <allfaces>
total_stress.arb:    FACE_DERIVED <tau_species0[l=<<i>>,<<j>>]> "-<mu_f_species0>*<gamma_f_mixture[l=<<i>>,<<j>>]>" ON <allfaces> # note, maxima will simplify diagonal components
total_stress.arb:    FACE_DERIVED <tau_species0[l=<<i>>,<<j>>]> "-<mu_f_species0>*<gamma_f_species0[l=<<i>>,<<j>>]>" ON <allfaces> # note, maxima will simplify diagonal components
total_stress.arb:# calculate the magnitude of the strain rate, on the faces, based on mixture velocities (checked consistency with BSL, p241, where gamma is the sum of the velocity gradient + transpose)
total_stress.arb:       FACE_DERIVED <gamma_f_mixture_mag> "sqrt(facemax(0.5d0*ddot(<gamma_f_mixture[l=:,:]>,<gamma_f_mixture[l=:,:]>)+2.d0*faceave(<u_mixture[l=<<radialdim>>]>/<cellx[l=<<radialdim>>]>)**2- facegrad[l=<<radialdim>>,reflect=<<radialdim>>](<u_mixture[l=<<azimuthaldim>>]>**2/<cellx[l=<<radialdim>>]>),<tinyish>))" ON <allfaces> output
total_stress.arb:       FACE_DERIVED <gamma_f_mixture_mag> "sqrt(facemax(0.5d0*ddot(<gamma_f_mixture[l=:,:]>,<gamma_f_mixture[l=:,:]>)+2.d0*faceave(<u_mixture[l=<<radialdim>>]>/<cellx[l=<<radialdim>>]>)**2,<tinyish>))" ON <allfaces> output
total_stress.arb:       FACE_DERIVED <gamma_f_mixture_mag> "sqrt(facemax(0.5d0*ddot(<gamma_f_mixture[l=:,:]>,<gamma_f_mixture[l=:,:]>),<tinyish>))" ON <allfaces> output
total_stress.arb:      FACE_DERIVED <tau^^_mixture[l=<<i>>,<<j>>]> "<mu_species0>*( -<mu^_col_f_mixture>*<gamma_f_mixture[l=<<i>>,<<j>>]> + <mu^_sid1_f_mixture>*dot(<gamma_f_mixture[l=<<i>>,:]>,<gamma_f_mixture[l=:,<<j>>]>)/facemax(<gamma_f_mixture_mag>,<tinyish>) + <mu^_sid2_f_mixture>*<gamma_f_mixture_mag>*kronecker(<<i>>,<<j>>) )" ON <allfaces> output
total_stress.arb:          $return_string .= "FACE_DERIVED <gamma_f_$species"."[l=<<i>>,<<j>>]> '(<ugrad_f_$species"."[l=<<i>>,<<j>>]>+<ugrad_f_$species"."[l=<<j>>,<<i>>]>)' ON <allfaces>\n";
total_stress.arb:            $return_string .= "FACE_DERIVED <gamma_f_$species"."_mag> 'sqrt(facemax(0.5d0*ddot(<gamma_f_$species"."[l=:,:]>,<gamma_f_$species"."[l=:,:]>)+2.d0*faceave(<u_$species"."[l=<<radialdim>>]>/<cellx[l=<<radialdim>>]>)**2- facegrad[l=<<radialdim>>,reflect=<<radialdim>>](<u_$species"."[l=<<azimuthaldim>>]>**2/<cellx[l=<<radialdim>>]>),<tinyish>))' ON <allfaces> output\n";
total_stress.arb:            $return_string .= "FACE_DERIVED <gamma_f_$species"."_mag> 'sqrt(facemax(0.5d0*ddot(<gamma_f_$species"."[l=:,:]>,<gamma_f_$species"."[l=:,:]>)+2.d0*faceave(<u_$species"."[l=<<radialdim>>]>/<cellx[l=<<radialdim>>]>)**2,<tinyish>))' ON <allfaces> output\n";
total_stress.arb:            $return_string .= "FACE_DERIVED <gamma_f_$species"."_mag> 'sqrt(facemax(0.5d0*ddot(<gamma_f_$species"."[l=:,:]>,<gamma_f_$species"."[l=:,:]>),<tinyish>))' ON <allfaces> output\n";
total_stress.arb:          $return_string .= "FACE_DERIVED <tau^^_$species"."[l=<<i>>,<<j>>]> '<mu_species0>*( -<mu^_col_f_mixture>*<gamma_f_$species"."[l=<<i>>,<<j>>]> + <mu^_sid1_f_mixture>*dot(<gamma_f_$species"."[l=<<i>>,:]>,<gamma_f_$species"."[l=:,<<j>>]>)/facemax(<gamma_f_$species"."_mag>,<tinyish>) + <mu^_sid2_f_mixture>*<gamma_f_$species"."_mag>*kronecker(<<i>>,<<j>>) )' ON <allfaces> output\n";
