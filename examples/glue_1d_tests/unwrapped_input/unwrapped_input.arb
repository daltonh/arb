#(comment created during unwrap): new block = resources/test_suite_results/gnu/output/build/root_input.arb: sub_block = 0
# root_input.arb file created by the arb script
##################################################################################
# the following external fortran files were found by the arb script and are available for inclusion: /Users/daltonh/codes/arb/testsuite/arb_develop/src/free_surface_functions.f90
EXTERNALS "/Users/daltonh/codes/arb/testsuite/arb_develop/src/free_surface_functions.f90"
##################################################################################
# the following working directory files found by the arb script: glue_1d_reflection_test.arb
   #(comment created during unwrap): new block = glue_1d_reflection_test.arb: sub_block = 0
   #(hash inserted during unwrap)INCLUDE_WORKING "glue_1d_reflection_test.arb"
   # arb finite volume solver
   # Copyright 2009,2010 Dalton Harvie (daltonh@unimelb.edu.au)
   #
   # arb is released under the GNU GPL.  For full details see the license directory.
   #
   #-------------------------------------------------------------------
   # file equations.in
   VERSION 0.40
   #----------------------------------------------------------------------------
   
   #-------------------------------------------------------------------
   # geometry
   
   MSH_FILE "line.msh"
   MSH_FILE "output/output.msh" elementdata
   
   GLUE_FACES <left> reflect=1 # make problem periodic by glueing boundary faces together
   
   #CELL_CONSTANT <phi> "(1.d0-cos(<cellx[l=1]>*2.d0*<pi>))/2.d0" ON <allcells> output
   #CELL_CONSTANT <phi> "(1.d0-cos(<cellx[l=1]>*4.d0*<pi>))/2.d0" ON <allcells> output # half the wavelength
   #CELL_CONSTANT <phi> "cellif(<cellx[l=1]>-0.5d0,<cellx[l=1]>-1.d0+4.d0,<cellx[l=1]>+4.d0)" ON <allcells> output
   CELL_CONSTANT <phi> "cellif(<cellx[l=1]>-0.5d0,<cellx[l=1]>-1.d0,<cellx[l=1]>)" ON <allcells> output
   
   # output some variables to check face geometries over the glue
   FACE_OUTPUT <facedx output> "<facedx>"
   FACE_OUTPUT <facedxkernel output> "<facedxkernel>"
   FACE_OUTPUT <facenorm output[l=1]> "<facenorm[l=1]>"
   FACE_OUTPUT <facenorm output[l=2]> "<facenorm[l=2]>"
   FACE_OUTPUT <facenorm output[l=3]> "<facenorm[l=3]>"
   FACE_OUTPUT <facetang1 output[l=1]> "<facetang1[l=1]>"
   FACE_OUTPUT <facetang1 output[l=2]> "<facetang1[l=2]>"
   FACE_OUTPUT <facetang1 output[l=3]> "<facetang1[l=3]>"
   FACE_OUTPUT <facetang2 output[l=1]> "<facetang2[l=1]>"
   FACE_OUTPUT <facetang2 output[l=2]> "<facetang2[l=2]>"
   FACE_OUTPUT <facetang2 output[l=3]> "<facetang2[l=3]>"
   FACE_OUTPUT <facedxunit output[l=1]> "<facedxunit[l=1]>"
   FACE_OUTPUT <facedxunit output[l=2]> "<facedxunit[l=2]>"
   FACE_OUTPUT <facedxunit output[l=3]> "<facedxunit[l=3]>"
   
   # here <phi> is interpreted as a scalar
   FACE_OUTPUT <facegrad phi 1> "facegrad[l=1](<phi>)"
   FACE_OUTPUT <facegrad phi 4> "facegrad[l=4](<phi>)"
   CELL_OUTPUT <cellgrad phi 1> "cellgrad[l=1](<phi>)"
   
   # here <phi> is interpreted as the first component of a vector, hence the reflect=1
   FACE_OUTPUT <facegrad reflect phi 1> "facegrad[l=1,reflect=1](<phi>)"
   FACE_OUTPUT <facegrad reflect phi 4> "facegrad[l=4,reflect=1](<phi>)"
   CELL_OUTPUT <cellgrad reflect phi 1> "cellgrad[l=1,reflect=1](<phi>)"
   CELL_OUTPUT <celldivgrad phi 1> "celldivgrad[l=1](faceave[reflect=1](<phi>))"
   FACE_OUTPUT <faceave reflect phi> "faceave[reflect=1](<phi>)"
   FACE_OUTPUT <faceave noreflect phi> "faceave(<phi>)"
   CELL_OUTPUT <cellave reflect phi_f> "cellave[reflect=1](<faceave reflect phi>)" # reflect isn't used in cellave, but is ignored
   CELL_OUTPUT <cellave noreflect phi_f> "cellave(<faceave reflect phi>)" # reflect isn't used in cellave, but is ignored
   
   CELL_OUTPUT <cellgrad reflect test> "cellgrad[l=1,reflect=3,reflect=1](<phi>)"
   
   CELL_OUTPUT <number of cellicell elements> "cellsum(1.d0,<cellicells>)"
   FACE_OUTPUT <number of faceicell elements> "cellsum(1.d0,<faceicells>)"
   CELL_OUTPUT <icell output> "<icell>"
   FACE_OUTPUT <jface output> "<jface>"
##################################################################################
